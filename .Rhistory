isolation_date_UTC,
isolation_local_time,
isolation_latitude,
isolation_longitude,
worms_on_sample,
approximate_number_of_worms)
}
else {
message("Invalid list of dataframes supplied to joinFulcrum. Are there 5 OR 2 processed dataframes in the list? Are they named correctly?")
}
# return data
return(joined_data)
}
# test joinFulcrum function
join_data1 <- joinFulcrum(proc_data1)
library(easyfulcrum)
library(tidyverse)
# set working directory
setwd(glue::glue("{dirname(rstudioapi::getActiveDocumentContext()$path)}/.."))
# setup test directory for multi project Fulcrum export
dir1 <- "test_data/2020FebruaryAustralia/data/fulcrum"
# test readFulcrum function
raw_data1 <- readFulcrum(dir1)
# test procFulcrum function
proc_data1 <- procFulcrum(raw_data1)
# test parameter_check function
parameter_check(proc_data1)
# test parameter_check function with optional parameters set to TRUE
test1 <- parameter_check(proc_data1, save = TRUE, return = TRUE)
# test joinFulcrum function
join_data1 <- joinFulcrum(proc_data1)
will_fail<- joinFulcrum(raw_data1)
# test initial_data_check function
initial_data_check(join_data1)
# test initial_data_check function with optional parameters set to TRUE
test2 <- initial_data_check(join_data1, save = TRUE, return = TRUE)
View(test2)
View(join_data1)
proc_data1$nematode_isolation_s_labeled_plates_proc
proc_slabs <- proc_data1$nematode_isolation_s_labeled_plates_proc
View(proc_slabs)
library(easyfulcrum)
library(easyfulcrum)
library(tidyverse)
# set working directory
setwd(glue::glue("{dirname(rstudioapi::getActiveDocumentContext()$path)}/.."))
# setup test directory for multi project Fulcrum export
dir1 <- "test_data/2020FebruaryAustralia/data/fulcrum"
# test readFulcrum function
raw_data1 <- readFulcrum(dir1)
# test procFulcrum function
proc_data1 <- procFulcrum(raw_data1)
# test parameter_check function
parameter_check(proc_data1)
# test joinFulcrum function
join_data1 <- joinFulcrum(proc_data1)
# test initial_data_check function
initial_data_check(join_data1)
# test initial_data_check function with optional parameters set to TRUE
test2 <- initial_data_check(join_data1, save = TRUE, return = TRUE)
# test annotateFulcrum
anno_data1 <- annotateFulcrum(join_data1)
# test readGenotypes function
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
devtools::document
()
devtools::document()
library(easyfulcrum)
library(easyfulcrum)
# set working directory
setwd(glue::glue("{dirname(rstudioapi::getActiveDocumentContext()$path)}/.."))
# setup test directory for multi project Fulcrum export
dir1 <- "test_data/2020FebruaryAustralia/data/fulcrum"
# test readFulcrum function
raw_data1 <- readFulcrum(dir1)
# test procFulcrum function
proc_data1 <- procFulcrum(raw_data1)
# test parameter_check function
parameter_check(proc_data1)
# test parameter_check function with optional parameters set to TRUE
test1 <- parameter_check(proc_data1, save = TRUE, return = TRUE)
# test joinFulcrum function
join_data1 <- joinFulcrum(proc_data1)
if(c("nematode_field_sampling_proc", "nematode_field_sampling_sample_photo_proc", "data$nematode_isolation_proc",
"data$nematode_isolation_s_labeled_plates_proc", "data$nematode_isolation_photos_proc") %in% data_names$data_name &
nrow(data_names) == 5
)
if(c("nematode_field_sampling_proc", "nematode_field_sampling_sample_photo_proc", "data$nematode_isolation_proc",
"data$nematode_isolation_s_labeled_plates_proc", "data$nematode_isolation_photos_proc") %in% data_names$data_name &
nrow(data_names) == 5)
if(c("nematode_field_sampling_proc", "nematode_field_sampling_sample_photo_proc", "data$nematode_isolation_proc",
"data$nematode_isolation_s_labeled_plates_proc", "data$nematode_isolation_photos_proc") %in% data_names$data_name &
nrow(data_names) == 5)
if(c("nematode_field_sampling_proc", "nematode_field_sampling_sample_photo_proc", "data$nematode_isolation_proc",
"data$nematode_isolation_s_labeled_plates_proc", "data$nematode_isolation_photos_proc") %in% data_names$data_name &
nrow(data_names) == 5)
if(c("nematode_field_sampling_proc", "nematode_field_sampling_sample_photo_proc", "data$nematode_isolation_proc",
"data$nematode_isolation_s_labeled_plates_proc", "data$nematode_isolation_photos_proc") %in% data_names$data_name &
nrow(data_names) == 5)
if(c("nematode_field_sampling_proc", "nematode_field_sampling_sample_photo_proc", "data$nematode_isolation_proc",
"data$nematode_isolation_s_labeled_plates_proc", "data$nematode_isolation_photos_proc") %in% data_names$data_name &
nrow(data_names) == 5)
if(c("nematode_field_sampling_proc", "nematode_field_sampling_sample_photo_proc", "data$nematode_isolation_proc",
"data$nematode_isolation_s_labeled_plates_proc", "data$nematode_isolation_photos_proc") %in% data_names$data_name &
nrow(data_names) == 5)
if(c("nematode_field_sampling_proc", "nematode_field_sampling_sample_photo_proc", "data$nematode_isolation_proc",
"data$nematode_isolation_s_labeled_plates_proc", "data$nematode_isolation_photos_proc") %in% data_names$data_name &
nrow(data_names) == 5)
if(c("nematode_field_sampling_proc", "nematode_field_sampling_sample_photo_proc", "data$nematode_isolation_proc",
"data$nematode_isolation_s_labeled_plates_proc", "data$nematode_isolation_photos_proc") %in% data_names$data_name &
nrow(data_names) == 5)
if(c("nematode_field_sampling_proc", "nematode_field_sampling_sample_photo_proc", "data$nematode_isolation_proc",
"data$nematode_isolation_s_labeled_plates_proc", "data$nematode_isolation_photos_proc") %in% data_names$data_name &
nrow(data_names) == 5)
if(c("nematode_field_sampling_proc", "nematode_field_sampling_sample_photo_proc", "data$nematode_isolation_proc",
"data$nematode_isolation_s_labeled_plates_proc", "data$nematode_isolation_photos_proc") %in% data_names$data_name &
nrow(data_names) == 5)
asdf
if(c("nematode_field_sampling_proc", "nematode_field_sampling_sample_photo_proc", "data$nematode_isolation_proc",
"data$nematode_isolation_s_labeled_plates_proc", "data$nematode_isolation_photos_proc") %in% data_names$data_name &
nrow(data_names) == 5)
test <- ifelse((c("nematode_field_sampling_proc", "nematode_field_sampling_sample_photo_proc", "data$nematode_isolation_proc",
"data$nematode_isolation_s_labeled_plates_proc", "data$nematode_isolation_photos_proc") %in% data_names$data_name &
nrow(data_names) == 5), T, F)
location <- getwd()
setwd(paste(location, "/R", sep = ""))
files.sources = list.files()
sapply(files.sources, source)
setwd(location)
# setup test directory for multi project Fulcrum export
dir1 <- "test_data/2020FebruaryAustralia/data/fulcrum"
dir2 <- "test_data/2018OctoberHawaii/data/fulcrum"
dir3 <- "test_data/2019DecemberHawaii/data/fulcrum"
dir4 <- "test_data/2019OctoberHawaii/data/fulcrum"
### TEST 1 ###
# test readFulcrum function
raw_data1 <- readFulcrum(dir1)
# test procFulcrum function
proc_data1 <- procFulcrum(raw_data1)
# test checkParameters function, will output rows with flags/rows related to those w flags
checkParameters(proc_data1)
# test checkParameters function, saves the output as a list of three dataframes of flagged rows
flag1.1 <- checkParameters(proc_data1, return = TRUE)
# easier to see which rows we might want to edit
View(flag1.1)
# upon further inspection we select two rows for ambient_temperature_run to be set to NA
to_change <- c("c5b0cabf-ded8-4c3d-9915-b3c94b913686", "fb975ace-0036-4a80-b073-8ff638f35786")
proc_data1_clean <- fixParameters(proc_data1, ambient_temperature_run_ids = to_change)
# test checkProc function, will output info with flags/rows related to those flags
checkProc(proc_data1)
# test checkParameters function, saves the output as a list of six dataframes of flagged rows
flag1.2 <- checkProc(proc_data1, return = TRUE)
# test joinFulcrum function
join_data1 <- joinFulcrum(proc_data1)
# test checkProc function, will output info of flags/rows related to those flags
checkJoin(join_data1)
# test checkProc function, saves the output as a dataframe of flagged rows
flag1.3 <- checkJoin(join_data1, return = TRUE)
# test annotateFulcrum fuction
anno_data1 <- annotateFulcrum(join_data1)
library(dplyr)
### TEST 1 ###
# test readFulcrum function
raw_data1 <- readFulcrum(dir1)
# test procFulcrum function
proc_data1 <- procFulcrum(raw_data1)
# test checkParameters function, will output rows with flags/rows related to those w flags
checkParameters(proc_data1)
# test checkParameters function, saves the output as a list of three dataframes of flagged rows
flag1.1 <- checkParameters(proc_data1, return = TRUE)
# easier to see which rows we might want to edit
View(flag1.1)
# upon further inspection we select two rows for ambient_temperature_run to be set to NA
to_change <- c("c5b0cabf-ded8-4c3d-9915-b3c94b913686", "fb975ace-0036-4a80-b073-8ff638f35786")
proc_data1_clean <- fixParameters(proc_data1, ambient_temperature_run_ids = to_change)
# test checkProc function, will output info with flags/rows related to those flags
checkProc(proc_data1)
# test checkParameters function, saves the output as a list of six dataframes of flagged rows
flag1.2 <- checkProc(proc_data1, return = TRUE)
# test joinFulcrum function
join_data1 <- joinFulcrum(proc_data1)
# test checkProc function, will output info of flags/rows related to those flags
checkJoin(join_data1)
# test checkProc function, saves the output as a dataframe of flagged rows
flag1.3 <- checkJoin(join_data1, return = TRUE)
# test annotateFulcrum fuction
anno_data1 <- annotateFulcrum(join_data1)
library(stringr)
### TEST 1 ###
# test readFulcrum function
raw_data1 <- readFulcrum(dir1)
# test procFulcrum function
proc_data1 <- procFulcrum(raw_data1)
# test checkParameters function, will output rows with flags/rows related to those w flags
checkParameters(proc_data1)
# test checkParameters function, saves the output as a list of three dataframes of flagged rows
flag1.1 <- checkParameters(proc_data1, return = TRUE)
# easier to see which rows we might want to edit
View(flag1.1)
# upon further inspection we select two rows for ambient_temperature_run to be set to NA
to_change <- c("c5b0cabf-ded8-4c3d-9915-b3c94b913686", "fb975ace-0036-4a80-b073-8ff638f35786")
proc_data1_clean <- fixParameters(proc_data1, ambient_temperature_run_ids = to_change)
# test checkProc function, will output info with flags/rows related to those flags
checkProc(proc_data1)
# test checkParameters function, saves the output as a list of six dataframes of flagged rows
flag1.2 <- checkProc(proc_data1, return = TRUE)
# test joinFulcrum function
join_data1 <- joinFulcrum(proc_data1)
# test checkProc function, will output info of flags/rows related to those flags
checkJoin(join_data1)
# test checkProc function, saves the output as a dataframe of flagged rows
flag1.3 <- checkJoin(join_data1, return = TRUE)
# test annotateFulcrum fuction
anno_data1 <- annotateFulcrum(join_data1)
View(anno_data1)
# test readGenotypes function
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
gs4_deauth()
# test readGenotypes function
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
location <- getwd()
setwd(paste(location, "/R", sep = ""))
files.sources = list.files()
sapply(files.sources, source)
setwd(location)
# test readGenotypes function
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
sheets_auth9
library(googlesheets4
)
sheets_auth()
gs4_auth()
# test readGenotypes function
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
gs4_auth()
# test readGenotypes function
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
location <- getwd()
setwd(paste(location, "/R", sep = ""))
files.sources = list.files()
sapply(files.sources, source)
setwd(location)
# setup test directory for multi project Fulcrum export
dir1 <- "test_data/2020FebruaryAustralia/data/fulcrum"
dir2 <- "test_data/2018OctoberHawaii/data/fulcrum"
dir3 <- "test_data/2019DecemberHawaii/data/fulcrum"
dir4 <- "test_data/2019OctoberHawaii/data/fulcrum"
### TEST 1 ###
# test readFulcrum function
raw_data1 <- readFulcrum(dir1)
# test procFulcrum function
proc_data1 <- procFulcrum(raw_data1)
location <- getwd()
setwd(paste(location, "/R", sep = ""))
files.sources = list.files()
sapply(files.sources, source)
setwd(location)
# test checkParameters function, will output rows with flags/rows related to those w flags
checkParameters(proc_data1)
data <- proc_data1
ambient_temperature_run <- data[[1]] %>%
dplyr::arrange(collection_datetime_UTC)
#replace NA values in the flag with FALSE, doesn't matter for this purpose
ambient_temperature_run$flag_ambient_temperature_run <-
tidyr::replace_na(ambient_temperature_run$flag_ambient_temperature_run, FALSE)
ambient_temperature_run <- data[[1]] %>%
dplyr::arrange(collection_datetime_UTC)
#replace NA values in the flag with FALSE, doesn't matter for this purpose
ambient_temperature_run$flag_ambient_temperature_run <-
tidyr::replace_na(ambient_temperature_run$flag_ambient_temperature_run, FALSE)
#add another logical for adjacent rows, will later delete
ambient_temperature_run$temp <- rep(FALSE, nrow(ambient_temperature_run))
for(i in 1:5){
if(ambient_temperature_run$flag_ambient_temperature_run[i]==TRUE){
ambient_temperature_run$temp[1:i] <- TRUE
ambient_temperature_run$temp[i+1:5] <- TRUE
}
}
for(i in 6:(nrow(ambient_temperature_run)-6)){
if(ambient_temperature_run$flag_ambient_temperature_run[i]==TRUE){
ambient_temperature_run$temp[i] <- TRUE
ambient_temperature_run$temp[i+1:5] <- TRUE
ambient_temperature_run$temp[i-1:5] <- TRUE
}
}
for(i in (nrow(ambient_temperature_run)-5):nrow(ambient_temperature_run)){
if(ambient_temperature_run$flag_ambient_temperature_run[i]==TRUE){
ambient_temperature_run$temp[i:nrow(ambient_temperature_run)] <- TRUE
ambient_temperature_run$temp[i-1:5] <- TRUE
}
}
ambient_temperature_run <- ambient_temperature_run %>%
dplyr::filter(temp == TRUE) %>% dplyr::select(-matches("temp"))
print(paste("There are", sum(ambient_temperature_run$flag_ambient_temperature_run),
"rows with flagged ambient run temperature:", sep = " "))
if(sum(ambient_temperature_run$flag_ambient_temperature_run) > 0){
to_return <- ambient_temperature_run %>%
dplyr::select(fulcrum_id, raw_ambient_temperature, ambient_humidity,
flag_ambient_temperature_run, collection_local_time, collection_datetime_UTC)
View(ambient_temperature_run)
message(">>> Checking ambient run temperature")
#arrange by collection_datetime
ambient_temperature_run <- data[[1]] %>%
dplyr::arrange(collection_datetime_UTC)
#replace NA values in the flag with FALSE, doesn't matter for this purpose
ambient_temperature_run$flag_ambient_temperature_run <-
tidyr::replace_na(ambient_temperature_run$flag_ambient_temperature_run, FALSE)
#add another logical for adjacent rows, will later delete
ambient_temperature_run$temp <- rep(FALSE, nrow(ambient_temperature_run))
for(i in 1:5){
if(ambient_temperature_run$flag_ambient_temperature_run[i]==TRUE){
ambient_temperature_run$temp[1:i] <- TRUE
ambient_temperature_run$temp[i+1:5] <- TRUE
}
}
for(i in 6:(nrow(ambient_temperature_run)-6)){
if(ambient_temperature_run$flag_ambient_temperature_run[i]==TRUE){
ambient_temperature_run$temp[i] <- TRUE
ambient_temperature_run$temp[i+1:5] <- TRUE
ambient_temperature_run$temp[i-1:5] <- TRUE
}
}
for(i in (nrow(ambient_temperature_run)-5):nrow(ambient_temperature_run)){
if(ambient_temperature_run$flag_ambient_temperature_run[i]==TRUE){
ambient_temperature_run$temp[i:nrow(ambient_temperature_run)] <- TRUE
ambient_temperature_run$temp[i-1:5] <- TRUE
}
}
test <- ambient_temperature_run %>%
dplyr::filter(temp == TRUE)
View(test)
dim(test)
test <- ambient_temperature_run %>%
dplyr::filter(temp == TRUE) %>% dplyr::select(-matches("temp"))
dim(test)
test <- ambient_temperature_run %>%
dplyr::filter(temp == TRUE) %>% dplyr::select(-temp)
dim(test)
location <- getwd()
setwd(paste(location, "/R", sep = ""))
files.sources = list.files()
sapply(files.sources, source)
setwd(location)
# test checkParameters function, will output rows with flags/rows related to those w flags
checkParameters(proc_data1)
flag1.1 <- checkParameters(proc_data1, return = TRUE)
View(flag1.1)
location <- getwd()
setwd(paste(location, "/R", sep = ""))
files.sources = list.files()
sapply(files.sources, source)
setwd(location)
flag1.1 <- checkParameters(proc_data1, return = TRUE)
flag1.1
location <- getwd()
setwd(paste(location, "/R", sep = ""))
files.sources = list.files()
sapply(files.sources, source)
setwd(location)
flag1.1 <- checkParameters(proc_data1, return = TRUE)
location <- getwd()
setwd(paste(location, "/R", sep = ""))
files.sources = list.files()
sapply(files.sources, source)
setwd(location)
flag1.1 <- checkParameters(proc_data1, return = TRUE)
to_change <- c("c5b0cabf-ded8-4c3d-9915-b3c94b913686", "fb975ace-0036-4a80-b073-8ff638f35786")
proc_data1_clean <- fixParameters(proc_data1, ambient_temperature_run_ids = to_change)
flag1.1 <- checkParameters(proc_data1_clean, return = TRUE)
# test checkProc function, will output info with flags/rows related to those flags
checkProc(proc_data1)
# test checkParameters function, saves the output as a list of six dataframes of flagged rows
flag1.2 <- checkProc(proc_data1, return = TRUE)
# test joinFulcrum function
join_data1 <- joinFulcrum(proc_data1)
# test checkProc function, will output info of flags/rows related to those flags
checkJoin(join_data1)
# test checkProc function, saves the output as a dataframe of flagged rows
flag1.3 <- checkJoin(join_data1, return = TRUE)
# test annotateFulcrum fuction
anno_data1 <- annotateFulcrum(join_data1)
# test readGenotypes function
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
# test joinGenoFulc function to join genotype data to fulcrum data
joingeno_data1 <- joinGenoFulc(geno = geno_data1, fulc = anno_data1)
location <- getwd()
setwd(paste(location, "/R", sep = ""))
files.sources = list.files()
sapply(files.sources, source)
setwd(location)
# test joinGenoFulc function to join genotype data to fulcrum data
joingeno_data1 <- joinGenoFulc(geno = geno_data1, fulc = anno_data1)
# test the procPhotos function, output is final dataframe
photodir <- "test_data/2020FebruaryAustralia/data/fulcrum/photos"
final_data1 <- procPhotos(photodir, joingeno_data1)
# test readFulcrum function
raw_data4 <- readFulcrum(dir4)
# test procFulcrum function
proc_data4 <- procFulcrum(raw_data4)
# test checkParameters function, will output rows with flags/rows related to those w flags
checkParameters(proc_data4)
# test checkParameters function, saves the output as a list of three dataframes
test4 <- checkParameters(proc_data4, return = TRUE)
# upon further inspection we select all rows for ambient_temperature_run to be set to NA
to_change <- test4$fulcrum_id
proc_data4_clean <- fixParameters(proc_data4, substrate_temperature_ids = to_change)
# test checkProc function, will output info of flags/rows related to those flags
checkProc(proc_data4)
# test checkParameters function, saves the output as a list of six dataframes of flagged rows
flag4.2 <- checkProc(proc_data4, return = TRUE)
# test joinFulcrum function
join_data4 <- joinFulcrum(proc_data4)
# test checkProc function, will output info of flags/rows related to those flags
checkJoin(join_data4)
# test checkProc function, saves the output as a dataframe of flagged rows
flag4.3 <- checkJoin(join_data4, return = TRUE)
# test annotateFulcrum fuction
anno_data4 <- annotateFulcrum(join_data4)
# test readGenotypes function
geno_data4 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
# test joinGenoFulc function to join genotype data to fulcrum data
joingeno_data4 <- joinGenoFulc(geno = geno_data4, fulc = anno_data4)
install.packages("imager")
library(imager)
library(easyfulcrum)
library(easyfulcrum)
setwd("~/Desktop/Andersen")
location <- getwd()
setwd(paste(location, "/R", sep = ""))
files.sources = list.files()
sapply(files.sources, source)
setwd(location)
# setup test directory for multi project Fulcrum export
dir1 <- "test_collection/data/raw/fulcrum"
dir2 <- "test_data/2018OctoberHawaii/data/fulcrum"
dir3 <- "test_data/2019DecemberHawaii/data/fulcrum"
dir4 <- "test_data/2019OctoberHawaii/data/fulcrum"
### TEST 1 ###
# test readFulcrum function
raw_data1 <- readFulcrum(dir1)
# test procFulcrum function
proc_data1 <- procFulcrum(raw_data1)
# test checkParameters function, will output rows with flags/rows related to those w flags
checkParameters(proc_data1)
# test checkParameters function, saves the output as a list of three dataframes of flagged rows
flag1.1 <- checkParameters(proc_data1, return = TRUE)
# easier to see which rows we might want to edit
View(flag1.1$ambient_temperature_run)
# upon further inspection we select two rows for ambient_temperature_run to be set to NA
to_change <- c("fb975ace-0036-4a80-b073-8ff638f35786", "3c1fd1f3-ea50-43b7-8fd6-09670e3068bf")
proc_data1_clean <- fixParameters(proc_data1, ambient_temperature_run_ids = to_change)
# test checkProc function, will output info with flags/rows related to those flags
checkProc(proc_data1)
# test checkParameters function, saves the output as a list of six dataframes of flagged rows
flag1.2 <- checkProc(proc_data1, return = TRUE)
# test joinFulcrum function
join_data1 <- joinFulcrum(proc_data1)
# test checkProc function, will output info of flags/rows related to those flags
checkJoin(join_data1)
# test checkProc function, saves the output as a dataframe of flagged rows
flag1.3 <- checkJoin(join_data1, return = TRUE)
# test annotateFulcrum fuction
anno_data1 <- annotateFulcrum(join_data1)
# test readGenotypes function
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
setwd("~/Desktop/Andersen")
location <- getwd()
setwd(paste(location, "/R", sep = ""))
files.sources = list.files()
sapply(files.sources, source)
setwd(location)
# setup test directory for multi project Fulcrum export
dir1 <- "test_collection/data/raw/fulcrum"
dir2 <- "test_data/2018OctoberHawaii/data/fulcrum"
dir3 <- "test_data/2019DecemberHawaii/data/fulcrum"
dir4 <- "test_data/2019OctoberHawaii/data/fulcrum"
### TEST 1 ###
# test readFulcrum function
raw_data1 <- readFulcrum(dir1)
# test procFulcrum function
proc_data1 <- procFulcrum(raw_data1)
# test checkParameters function, will output rows with flags/rows related to those w flags
checkParameters(proc_data1)
# test checkParameters function, saves the output as a list of three dataframes of flagged rows
flag1.1 <- checkParameters(proc_data1, return = TRUE)
# easier to see which rows we might want to edit
View(flag1.1$ambient_temperature_run)
# upon further inspection we select two rows for ambient_temperature_run to be set to NA
to_change <- c("fb975ace-0036-4a80-b073-8ff638f35786", "3c1fd1f3-ea50-43b7-8fd6-09670e3068bf")
proc_data1_clean <- fixParameters(proc_data1, ambient_temperature_run_ids = to_change)
# test checkProc function, will output info with flags/rows related to those flags
checkProc(proc_data1)
# test checkParameters function, saves the output as a list of six dataframes of flagged rows
flag1.2 <- checkProc(proc_data1, return = TRUE)
# test joinFulcrum function
join_data1 <- joinFulcrum(proc_data1)
# test checkProc function, will output info of flags/rows related to those flags
checkJoin(join_data1)
# test checkProc function, saves the output as a dataframe of flagged rows
flag1.3 <- checkJoin(join_data1, return = TRUE)
# test annotateFulcrum fuction
anno_data1 <- annotateFulcrum(join_data1)
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
proc_geno_data1 <- procGenotypes(geno_data = geno_data1, fulc_data = anno_data1)
#test checkGenotypes function
checkGenotypes(proc_geno_data1)
flag1.4 <- checkGenotypes(proc_geno_data1, return = TRUE)
joingeno_data1 <- joinGenoFulc(geno = proc_geno_data1, fulc = anno_data1)
# test the procPhotos function, output is final dataframe
final_data1 <- procPhotos(dir = "test_collection/data/raw/fulcrum/photos", data = joingeno_data1, percentage = 20, overwrite = T)
# test the procPhotos function, output is final dataframe
final_data1 <- procPhotos(dir = "test_collection/data/raw/fulcrum/photos", data = joingeno_data1, percentage = 20, overwrite = T)
