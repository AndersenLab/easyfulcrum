setwd("~/Desktop/Andersen")
library(easyfulcrum)
makeDirStructure(startdir = "~/Desktop/Andersen/git/test_easyfulcrum/test_data/",
projectdirname = "2020FebruaryAustralia_errors_created2")
#first dataset has created purposeful errors
dir1 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum"
raw_data1 <- readFulcrum(dir1)
raw_data1 <- readFulcrum(dir1)
raw_data1 <- readFulcrum(dir1)
raw_data1 <- readFulcrum(dir1)
raw_data1 <- readFulcrum(dir1)
raw_data1 <- readFulcrum(dir1)
raw_data1 <- readFulcrum(dir1)
raw_data1 <- readFulcrum(dir1)
proc_data1 <- procFulcrum(raw_data1)
checkParameters(proc_data1)
flag1.1 <- checkParameters(proc_data1, return = TRUE)
#pass in fulcrum_id values corresponding to flagged rows
proc_data1_clean <- fixParameters(proc_data1,
substrate_temperature_ids = "fe28600b-c78a-4545-a525-28dfb3e5d84c",
ambient_temperature_ids = "e088d373-6f4a-48c3-b672-2f6a43747595",
ambient_temperature_run_ids =
c("fb975ace-0036-4a80-b073-8ff638f35786","c9313751-3f96-41f6-9d5e-b8dc994f5edb"))
checkParameters(proc_data1_clean)
join_data1 <- joinFulcrum(proc_data1)
checkJoin(join_data1)
flag1.2 <- checkJoin(join_data1, return = TRUE)
anno_data1 <- annotateFulcrum(join_data1)
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
proc_geno_data1 <- procGenotypes(geno_data = geno_data1, fulc_data = anno_data1)
library(easyfulcrum)
setwd("~/Desktop/Andersen")
library(easyfulcrum)
#first dataset has created purposeful errors
dir1 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum"
raw_data1 <- readFulcrum(dir1)
proc_data1 <- procFulcrum(raw_data1)
checkParameters(proc_data1)
flag1.1 <- checkParameters(proc_data1, return = TRUE)
#pass in fulcrum_id values corresponding to flagged rows
proc_data1_clean <- fixParameters(proc_data1,
substrate_temperature_ids = "fe28600b-c78a-4545-a525-28dfb3e5d84c",
ambient_temperature_ids = "e088d373-6f4a-48c3-b672-2f6a43747595",
ambient_temperature_run_ids =
c("fb975ace-0036-4a80-b073-8ff638f35786","c9313751-3f96-41f6-9d5e-b8dc994f5edb"))
checkParameters(proc_data1_clean)
join_data1 <- joinFulcrum(proc_data1)
checkJoin(join_data1)
flag1.2 <- checkJoin(join_data1, return = TRUE)
anno_data1 <- annotateFulcrum(join_data1)
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
flag1.3 <- checkGenotypes(geno_data = geno_data1, fulc_data = anno_data1, return = FALSE)
setwd("~/Desktop/Andersen")
library(easyfulcrum)
library(easyfulcrum)
geno_data1
flag1.3 <- checkGenotypes(geno_data = geno_data1, fulc_data = anno_data1, return = FALSE)
geno_data1 <- read.csv("geno_data1_to_fix.csv")
flag1.3 <- checkGenotypes(geno_data = geno_data1, fulc_data = anno_data1, return = FALSE)
flag1.3
flag1.3 <- checkGenotypes(geno_data = geno_data1, fulc_data = anno_data1, return = TRUE)
View(flag1.3)
library(easyfulcrum)
setwd("~/Desktop/Andersen")
library(easyfulcrum)
#first dataset has created purposeful errors
dir1 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum"
raw_data1 <- readFulcrum(dir1)
proc_data1 <- procFulcrum(raw_data1)
checkParameters(proc_data1)
flag1.1 <- checkParameters(proc_data1, return = TRUE)
#pass in fulcrum_id values corresponding to flagged rows
proc_data1_clean <- fixParameters(proc_data1,
substrate_temperature_ids = "fe28600b-c78a-4545-a525-28dfb3e5d84c",
ambient_temperature_ids = "e088d373-6f4a-48c3-b672-2f6a43747595",
ambient_temperature_run_ids =
c("fb975ace-0036-4a80-b073-8ff638f35786","c9313751-3f96-41f6-9d5e-b8dc994f5edb"))
checkParameters(proc_data1_clean)
join_data1 <- joinFulcrum(proc_data1)
checkJoin(join_data1)
flag1.2 <- checkJoin(join_data1, return = TRUE)
anno_data1 <- annotateFulcrum(join_data1)
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
proc_geno_data1 <- checkGenotypes(geno_data = geno_data1, fulc_data = anno_data1, return = FALSE)
flag1.3 <- checkGenotypes(geno_data = geno_data1, fulc_data = anno_data1, return = TRUE)
View(proc_geno_data1)
View(flag1.3)
str(join_data1)
sapply(join_data1, class)
as.vector(sapply(join_data1, class))
unlist(sapply(join_data1, class))
matrix(sapply(join_data1, class))
matrix(unlist(sapply(join_data1, class)))
unlist(sapply(join_data1, class))
str(unlist(sapply(join_data1, class)))
names(unlist(sapply(join_data1, class)))
geno_data1 <- read.csv("geno_data1_to_fix.csv")
proc_geno_data1 <- checkGenotypes(geno_data = geno_data1, fulc_data = anno_data1, return = FALSE)
flag1.3 <- checkGenotypes(geno_data = geno_data1, fulc_data = anno_data1, return = TRUE)
View(proc_geno_data1)
View(flag1.3)
str(unlist(sapply(join_data1, class)))
saved <- unlist(sapply(join_data1, class))
saved
saved$project
saved[1]
saved[1] <- "numeric"
test <- saved
saved <- unlist(sapply(join_data1, class))
all.equal(saved, test)
saved <- unlist(sapply(join_data1, class))
test <- saved
test[1] <- saved[2]
test[2] <- saved[1]
test
head(test)
head(save)
head(test)
head(saved)
test[1] <- saved[4]
test[4] <- saved[1]
head(saved)
head(saved)
head(test)
all.equal(saved, test)
names(test[2])
test[1] <- saved[4]
test[4] <- saved[1]
names(test[1]) <- names(test[4])
names(test[1]) <- names(saved[4])
names(test[4]) <- names(saved[1])
head(test)
head(saved)
names(saved[1])
names(test[1])
names(test[1]) <- "help"
names(test[1])
?setNames
setNames(test[1]) <- "help"
setNames(test[1], "help")
saved <- unlist(sapply(join_data1, class))
test[4] <- saved[1]
test[1] <- saved[4]
setNames(test[1], names(saved[4]))
setNames(test[4], names(saved[1]))
head(test)
head(saved)
saved <- unlist(sapply(join_data1, class))
test <- c(saved[4], saved[1:3], saved[5:length(saved)])
head(saved)
head(test)
all.equal(saved, test)
?sapply
vapply(join_data1, class)
?sapply
sapply(join_data1, class, simplify = "matrix")
saved <- unlist(sapply(join_data1, class))
View(saved)
saved <- as.data.frame(sapply(join_data1, class))
saved
saved <- as.data.frame(unlist(sapply(join_data1, class)))
saved
str(saved)
saved <- as.data.frame(unlist(sapply(join_data1, class)))
saved[,2] <- rownames(saved)
names(saved) <- c("class", "variable")
saved
View(saved)
saved <- as.data.frame(unlist(sapply(join_data1, class)))
saved[,2] <- rownames(saved)
rownames(saved) <- NULL
names(saved) <- c("class", "variable")
View(saved)
easyfulcrum::island
?save
saveRDS(saved, "~Desktop/fulcrumTypes.rda")
saveRDS(saved, "~/Desktop/fulcrumTypes.rda")
saved <- as.data.frame(unlist(sapply(geno_data1, class)))
saved
View(saved)
saved[,2] <- rownames(saved)
rownames(saved) <- NULL
names(saved) <- c("class", "variable")
View(saved)
saveRDS(saved, "~/Desktop/genotypeTypes.rda")
saved <- as.data.frame(unlist(sapply(geno_data1, class)))
saved[,2] <- rownames(saved)
rownames(saved) <- NULL
names(saved) <- c("classExpected", "variable")
saveRDS(saved, "~/Desktop/genotypeTypes.rda")
saved <- as.data.frame(unlist(sapply(join_data1, class)))
saved[,2] <- rownames(saved)
rownames(saved) <- NULL
names(saved) <- c("classExpected", "variable")
saveRDS(saved, "~/Desktop/fulcrumTypes.rda")
dim(saved)
names(saved)
saved <- as.data.frame(unlist(sapply(geno_data1, class)))
dim(saved)
saved <- as.data.frame(unlist(sapply(join_data1, class)))
saved[,2] <- rownames(saved)
rownames(saved) <- NULL
names(saved) <- c("classExpected", "variable")
save(saved, "~/Desktop/fulcrumTypes.rda")
version
saved <- as.data.frame(unlist(sapply(join_data1, class)))
saved[,2] <- rownames(saved)
rownames(saved) <- NULL
names(saved) <- c("classExpected", "variable")
save(saved, "~/Desktop/fulcrumTypes.rda", version = 3)
saved <- as.data.frame(unlist(sapply(join_data1, class)))
saved[,2] <- rownames(saved)
rownames(saved) <- NULL
names(saved) <- c("classExpected", "variable")
saveRDS(saved, "~/Desktop/fulcrumTypes.rda", version = 3)
saved <- as.data.frame(unlist(sapply(join_data1, class)))
saved[,2] <- rownames(saved)
rownames(saved) <- NULL
names(saved) <- c("classExpected", "variable")
saveRDS(saved, "~/Desktop/fulcrumTypes.rda", version = 2)
save(saved, "~/Desktop/fulcrumTypes.rda", version = 2)
fulcrumTypes <- as.data.frame(unlist(sapply(join_data1, class)))
fulcrumTypes[,2] <- rownames(fulcrumTypes)
rownames(fulcrumTypes) <- NULL
names(fulcrumTypes) <- c("classExpected", "variable")
save("fulcrumTypes", "~/Desktop/fulcrumTypes.rda", version = 2)
save("fulcrumTypes", "fulcrumTypes.rda", version = 2)
save("fulcrumTypes", "~/Desktop/fulcrumTypes.Rdata", version = 2)
save("fulcrumTypes", "~/Desktop/fulcrumTypes.RData", version = 2)
?save
save(fulcrumTypes, version = 3)
save("fulcrumTypes", "fulcrumTypes.RData", version = 2)
fulcrumTypes <- as.data.frame(unlist(sapply(join_data1, class)))
fulcrumTypes[,2] <- rownames(fulcrumTypes)
rownames(fulcrumTypes) <- NULL
names(fulcrumTypes) <- c("classExpected", "variable")
saveRDS(fulcrumTypes, "~/Desktop/fulcrumTypes.RData", version = 3)
loadRDS("~/Desktop/fulcrumTypes.RData")
readRDS("~/Desktop/fulcrumTypes.RData")
load("~/Desktop/fulcrumTypes.RData")
save(fulcrumTypes, "~/Desktop/fulcrumTypes.RData", version = 3)
save(data = fulcrumTypes, "~/Desktop/fulcrumTypes.RData", version = 3)
save(data = fulcrumTypes, file = "~/Desktop/fulcrumTypes.RData", version = 3)
load("~/Desktop/fulcrumTypes.RData")
View(fulcrumTypes)
genotypeTypes <- as.data.frame(unlist(sapply(geno_data1, class)))
genotypeTypes[,2] <- rownames(genotypeTypes)
rownames(genotypeTypes) <- NULL
names(genotypeTypes) <- c("classExpected", "variable")
save(data = genotypeTypes, file = "~/Desktop/genotypeTypes.rda", version = 3)
save(data = fulcrumTypes, file = "~/Desktop/fulcrumTypes.rda", version = 3)
library(easyfulcrum)
island
fulcrumTypes
genotypeTypes
?sapply
?distinct
distinct(fulcrumTypes)
dpylr::distinct(fulcrumTypes)
library(dplyr)
dpylr::distinct(fulcrumTypes)
dplyr::distinct(fulcrumTypes)
data <- join_data1
types <- as.data.frame(unlist(sapply(data, class)))
fulcrumTypes[,2] <- rownames(types)
rownames(types) <- NULL
names(types) <- c("class", "variable")
check_classes <- dplyr::left_join(fulcrumTypes, data, by = c("variable" == "variable"))
View(data)
types <- as.data.frame(unlist(sapply(data, class)))
types
fulcrumTypes
types <- as.data.frame(unlist(sapply(data, class)))
types[,2] <- rownames(types)
rownames(types) <- NULL
names(types) <- c("class", "variable")
check_classes <- dplyr::left_join(fulcrumTypes, data, by = c("variable" == "variable"))
?left_join
types <- as.data.frame(unlist(sapply(data, class)))
types[,2] <- rownames(types)
rownames(types) <- NULL
names(types) <- c("class", "variable")
check_classes <- dplyr::left_join(fulcrumTypes, data, by = c("variable" = "variable"))
View(fulcrumTypes)
View(data)
View(types)
types <- as.data.frame(unlist(sapply(data, class)))
types[,2] <- rownames(types)
rownames(types) <- NULL
names(types) <- c("class", "variable")
check_classes <- dplyr::left_join(fulcrumTypes, data)
types <- as.data.frame(unlist(sapply(data, class)))
types[,2] <- rownames(types)
rownames(types) <- NULL
names(types) <- c("class", "variable")
check_classes <- dplyr::left_join(fulcrumTypes, types, by = c("variable" = "variable"))
check_classes
View(check_classes)
types <- as.data.frame(unlist(sapply(data, class)))
types[,2] <- rownames(types)
rownames(types) <- NULL
names(types) <- c("class", "variable")
check_classes <- dplyr::left_join(fulcrumTypes, types, by = c("variable" = "variable")) %>%
filter(class != classExpected)
View(check_classes)
library(easyfulcrum)
setwd("~/Desktop/Andersen")
library(easyfulcrum)
#first dataset has created purposeful errors
dir1 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum"
raw_data1 <- readFulcrum(dir1)
proc_data1 <- procFulcrum(raw_data1)
checkParameters(proc_data1)
flag1.1 <- checkParameters(proc_data1, return = TRUE)
#pass in fulcrum_id values corresponding to flagged rows
proc_data1_clean <- fixParameters(proc_data1,
substrate_temperature_ids = "fe28600b-c78a-4545-a525-28dfb3e5d84c",
ambient_temperature_ids = "e088d373-6f4a-48c3-b672-2f6a43747595",
ambient_temperature_run_ids =
c("fb975ace-0036-4a80-b073-8ff638f35786","c9313751-3f96-41f6-9d5e-b8dc994f5edb"))
checkParameters(proc_data1_clean)
join_data1 <- joinFulcrum(proc_data1)
checkJoin(join_data1)
anno_data1 <- annotateFulcrum(join_data1)
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
proc_geno_data1 <- checkGenotypes(geno_data = geno_data1, fulc_data = anno_data1, return = FALSE)
geno_data <- geno_data1
types <- as.data.frame(unlist(sapply(geno_data, class)))
types
types[,2] <- rownames(types)
rownames(types) <- NULL
names(types) <- c("class", "variable")
check_classes <- dplyr::left_join(genotypeTypes, types, by = c("variable" = "variable")) %>%
dplyr::filter(class != classExpected)
View(check_classes)
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
genotypeTypes <- as.data.frame(unlist(sapply(geno_data1, class)))
genotypeTypes[,2] <- rownames(genotypeTypes)
rownames(genotypeTypes) <- NULL
names(genotypeTypes) <- c("classExpected", "variable")
View(genotypeTypes)
save(data = genotypeTypes, file = "~/Desktop/genotypeTypes.rda", version = 3)
library(easyfulcrum)
proc_geno_data1 <- checkGenotypes(geno_data = geno_data1, fulc_data = anno_data1, return = FALSE)
types <- as.data.frame(unlist(sapply(geno_data1, class)))
types
genotypeTypes
?
rio
library(rio)
install_formats()
library(rio)
dir1 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum"
dir <- dir1
files_full <- list.files(glue::glue("{dir}"), pattern = ".csv", full.names = T)
glue::glue("{dir}")
dir
?glue
dir1 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created"
dir <- dir1
dir
files_full <- list.files(glue::glue("{dir}","/data/raw/fulcrum"), pattern = ".csv", full.names = T)
files_full
dir <- dir1
dir
strsplit(dir,"/")
tail(strsplit(dir,"/"),1)
tail(strsplit(dir,"/")[[1]],1)
date()
?date
Sys.Date()
#filename <- paste(tail(strsplit(dir,"/")[[1]],1),".rda"
glue::glue("{dir}","/data/processed/genotypes/", Sys.Date(), paste(tail(strsplit(dir,"/")[[1]],1),".rds")
}
if(is.null(blast)){
# Join genotyping sheet with collection and isolation data
out_dat <- fulc %>%
dplyr::full_join(geno) %>%
# Reorder variables
dplyr::select(project,
c_label,
s_label,
species_id,
strain_name,
collection_by,
collection_datetime_UTC,
collection_date_UTC,
collection_local_time,
collection_fulcrum_latitude,
collection_fulcrum_longitude,
exif_gps_latitude,
exif_gps_longitude,
collection_latitude,
collection_longitude,
collection_lat_long_method,
collection_lat_long_method_diff,
fulcrum_altitude,
exif_gps_altitude,
collection_altitude,
collection_altitude_method,
collection_location,
collection_island,
collection_trail,
landscape,
sky_view,
ambient_humidity,
substrate,
substrate_notes,
substrate_other,
raw_ambient_temperature,
proc_ambient_temperature,
raw_substrate_temperature,
proc_substrate_temperature,
gridsect,
gridsect_index,
gridsect_radius,
grid_sect_direction,
sample_photo1,
sample_photo2,
sample_photo3,
best_exif_dop_photo,
best_sample_photo_caption,
isolation_by,
isolation_datetime_UTC,
isolation_date_UTC,
isolation_local_time,
isolation_latitude,
isolation_longitude,
worms_on_sample,
approximate_number_of_worms,
shipment_sent_date,
shipment_received_date,
proliferation_48,
proliferation_168,
proliferating,
lysis_date,
pcr_product_its2,
pcr_product_ssu,
general_notes,
manual_blast_notes,
possible_new_caeno_sp,
make_strain_name,
reason_strain_not_named,
flag_ambient_temperature,
flag_ambient_temperature_run,
flag_substrate_temperature,
flag_unusual_sample_photo_num,
flag_duplicated_c_label_field_sampling,
flag_duplicated_isolation_for_c_label,
flag_duplicated_s_label_isolation_s_labeled_plates,
flag_missing_s_label_isolation_s_labeled_plates,
flag_missing_isolation_record,
flag_unusual_s_label_genotyping,
flag_missing_s_label_genotyping,
flag_duplicated_s_label_genotyping,
flag_unusual_target_species_name)
}
else{
# load blast results
blast_results <- readr::read_tsv(blast)
message(glue::glue("loading blast results from {blast}"))
# Join genotyping sheet with collection and isolation data
out_dat <- fulc %>%
dplyr::full_join(geno)
}
return(out_dat)
}
glue::glue("{dir}","/data/processed/genotypes/", Sys.Date(), tail(strsplit(dir,"/")[[1]],1),".rds")
Sys.Date()
glue::glue("{dir}","/data/processed/genotypes/",Sys.Date(),"_",tail(strsplit(dir,"/")[[1]],1),".rds")
?Sys.Date
as.character(Sys.Date())
glue::glue("{dir}","/data/processed/genotypes/",as.character(Sys.Date()),"_",tail(strsplit(dir,"/")[[1]],1),".rds")
save(data = genotypeTypes, file = "~/Desktop/genotypeTypes.rda", version = 3)
library(easyfulcrum)
setwd("~/Desktop/Andersen")
library(easyfulcrum)
#first dataset has created purposeful errors
dir1 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created"
raw_data1 <- readFulcrum(dir1)
proc_data1 <- procFulcrum(raw_data1)
checkParameters(proc_data1)
View(proc_data1)
raw_data1 <- readFulcrum(dir1)
View(raw_data1)
library(easyfulcrum)
library(easyfulcrum)
setwd("~/Desktop/Andersen")
#first dataset has created purposeful errors
dir1 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created"
raw_data1 <- readFulcrum(dir1)
proc_data1 <- procFulcrum(raw_data1)
checkParameters(proc_data1)
flag1.1 <- checkParameters(proc_data1, return = TRUE)
#pass in fulcrum_id values corresponding to flagged rows
proc_data1_clean <- fixParameters(proc_data1,
substrate_temperature_ids = "fe28600b-c78a-4545-a525-28dfb3e5d84c",
ambient_temperature_ids = "e088d373-6f4a-48c3-b672-2f6a43747595",
ambient_temperature_run_ids =
c("fb975ace-0036-4a80-b073-8ff638f35786","c9313751-3f96-41f6-9d5e-b8dc994f5edb"))
checkParameters(proc_data1_clean)
join_data1 <- joinFulcrum(proc_data1)
checkJoin(join_data1)
flag1.2 <- checkJoin(join_data1, return = TRUE)
anno_data1 <- annotateFulcrum(join_data1)
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
proc_geno_data1 <- checkGenotypes(geno_data = geno_data1, fulc_data = anno_data1, return = FALSE)
flag1.3 <- checkGenotypes(geno_data = geno_data1, fulc_data = anno_data1, return = TRUE)
joingeno_data1 <- joinGenoFulc(geno = proc_geno_data1, fulc = anno_data1, dir = dir1)
final_data1 <- procPhotos(dir = dir1, data = joingeno_data1, max_dim = 500, overwrite = T)
joingeno_data1 <- joinGenoFulc(geno = proc_geno_data1, fulc = anno_data1, dir = dir1)
final_data1 <- procPhotos(dir = dir1, data = joingeno_data1, max_dim = 500, overwrite = T)
