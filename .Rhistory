"93de14a0-40ab-4793-8614-ab1512ab158c"))
join_fulc1 <- joinFulcrum(data = proc_fulc1)
flag1.2 <- checkJoin(data = join_fulc1, return_flags = TRUE)
anno_fulc1 <- annotateFulcrum(data = join_fulc1, dir = NULL)
# raw_geno1 <- readGenotypes(gsKey = c("1_6u4sk_Zj-Hm5d_058Lg8WYWLe7BZHGTWxXcH6EsDUI"))
raw_geno1 <- easyfulcrum::raw_geno1
head(raw_geno1)
proc_geno1 <- checkGenotypes(geno_data = raw_geno1, fulc_data = anno_fulc1,
return_geno = TRUE, return_flags = FALSE)
flag1.3 <- checkGenotypes(geno_data = raw_geno1, fulc_data = anno_fulc1,
return_geno = FALSE, return_flags = TRUE)
join_genofulc1 <- joinGenoFulc(geno = proc_geno1, fulc = anno_fulc1, dir = NULL)
#This chunk of code will move the photos required for this trial run into the appropriate folder for raw photos, according to what `dir1` is specified.
#You can also find these photos for manual download at: https://github.com/AndersenLab/easyfulcrum/tree/master/vignettes/2020JanuaryHawaii_photos
# library(googledrive)
# final_directory <- paste(dir1, "data/raw/fulcrum/photos", sep = "/")
# temp_dir <- tempdir()
# photos <- googledrive::drive_ls(as_id("11T6qzszJ_yK3yRyy4eqBfplZuai20y-g"))
# photos$temp_location <- paste(temp_dir,photos$name, sep = "/")
# photos$final_location <- paste(final_directory,photos$name, sep = "/")
#
# for(i in 1:nrow(photos)){
#   googledrive::drive_download(as_id(photos$id[i]),
#                             path =photos$temp_location[i],
#                             overwrite = TRUE)
#   fs::file_copy(photos$temp_location[i], photos$final_location[i], overwrite = TRUE)
# }
# final_data1 <- procPhotos(dir = dir1, data = join_genofulc1,
#                           max_dim = 500, overwrite = T,
#                           CeNDR = TRUE)
final_data1 <- easyfulcrum::final_data1
head(final_data1)
# flag1.4 <- makeSpSheet(data = final_data1,
#                     target_sp = "Caenorhabditis briggsae", dir = dir1)
generateReport(data = final_data1, dir = dir1)
devtools::check()
?file.copy()
library(easyfulcrum)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(easyfulcrum)
makeDirStructure(startdir = "~/Desktop/",
projectdirname = "2020JanuaryHawaii")
dir1 <- "~/Desktop/2020JanuaryHawaii"
raw_fulc1 <- readFulcrum(dir = dir1)
names(raw_fulc1)
proc_fulc1 <- procFulcrum(data = raw_fulc1)
flag1.1 <- checkTemperatures(data = proc_fulc1, return_flags = TRUE)
proc_fulc1_clean <- fixTemperatures(data = proc_fulc1,
substrate_temperature_ids = "a7db618d-44cc-4b4a-bc67-871306029274",
ambient_temperature_ids = "b1f20ae4-c5c2-426f-894a-e1f46c2fa693",
ambient_temperature_run_ids=c("dda77efe-d73c-48e9-aefb-b508e613256b",
"93de14a0-40ab-4793-8614-ab1512ab158c"))
join_fulc1 <- joinFulcrum(data = proc_fulc1, select_vars = TRUE)
flag1.2 <- checkJoin(data = join_fulc1, return_flags = TRUE)
anno_fulc1 <- annotateFulcrum(data = join_fulc1, dir = NULL, select_vars = TRUE)
raw_geno1 <- readGenotypes(gsKey = c("1iSGkGbhoyg-uq_l83UbiNdI_g4xqEkTxf3Ap0J7JGto"))
head(raw_geno1)
proc_geno1 <- checkGenotypes(geno_data = raw_geno1, fulc_data = anno_fulc1,
return_geno = TRUE, return_flags = FALSE)
flag1.3 <- checkGenotypes(geno_data = raw_geno1, fulc_data = anno_fulc1,
return_geno = FALSE, return_flags = TRUE)
join_genofulc1 <- joinGenoFulc(geno = proc_geno1, fulc = anno_fulc1, dir = NULL)
final_data1 <- procPhotos(dir = dir1, data = join_genofulc1,
max_dim = 500, overwrite = T,
CeNDR = TRUE)
View(join_genofulc1)
raw_geno1 <- readGenotypes(gsKey = c("1WlnmujvHBc3s5jwCtRPcT3oHkRvpU-RXXIBmJOV8Qb0"))
head(raw_geno1)
join_genofulc1 <- joinGenoFulc(geno = proc_geno1, fulc = anno_fulc1, dir = NULL)
final_data1 <- procPhotos(dir = dir1, data = join_genofulc1,
max_dim = 500, overwrite = T,
CeNDR = TRUE)
raw_geno1 <- readGenotypes(gsKey = c("1WlnmujvHBc3s5jwCtRPcT3oHkRvpU-RXXIBmJOV8Qb0"))
proc_geno1 <- checkGenotypes(geno_data = raw_geno1, fulc_data = anno_fulc1,
return_geno = TRUE, return_flags = FALSE)
join_genofulc1 <- joinGenoFulc(geno = proc_geno1, fulc = anno_fulc1, dir = NULL)
final_data1 <- procPhotos(dir = dir1, data = join_genofulc1,
max_dim = 500, overwrite = T,
CeNDR = TRUE)
# final_data1 <- easyfulcrum::final_data1
head(final_data1)
?joinGenoFulc
raw_geno1 <- readGenotypes(gsKey = c("1WlnmujvHBc3s5jwCtRPcT3oHkRvpU-RXXIBmJOV8Qb0"))
proc_geno1 <- checkGenotypes(geno_data = raw_geno1, fulc_data = anno_fulc1,
return_geno = TRUE, return_flags = FALSE)
raw_geno1 <- readGenotypes(gsKey = c("1WlnmujvHBc3s5jwCtRPcT3oHkRvpU-RXXIBmJOV8Qb0"))
proc_geno1 <- checkGenotypes(geno_data = raw_geno1, fulc_data = anno_fulc1,
return_geno = TRUE, return_flags = FALSE)
raw_geno1 <- readGenotypes(gsKey = c("1WlnmujvHBc3s5jwCtRPcT3oHkRvpU-RXXIBmJOV8Qb0"))
proc_geno1 <- checkGenotypes(geno_data = raw_geno1, fulc_data = anno_fulc1,
return_geno = TRUE, return_flags = FALSE)
raw_geno1 <- readGenotypes(gsKey = c("1WlnmujvHBc3s5jwCtRPcT3oHkRvpU-RXXIBmJOV8Qb0"))
proc_geno1 <- checkGenotypes(geno_data = raw_geno1, fulc_data = anno_fulc1,
return_geno = TRUE, return_flags = FALSE)
flag1.4 <- makeSpSheet(data = final_data1,
target_sp = "Caenorhabditis briggsae", dir = dir1)
# file.copy("../R/sampleReport.Rmd", paste(dir1,"scripts",sep = "/"))
#
# rmarkdown::render(paste(dir1,"scripts","sampleReport.Rmd",sep = "/"),
#                   output_dir = paste(dir1,"reports",sep = "/"),
#                   output_format	= "html_document")
generateReport(data = final_data1, dir = dir1)
# run these to document and check functions
devtools::document()
devtools::check()
# tools::buildVignettes(dir = ".", tangle=TRUE)
devtools::build_vignettes()
#to build package website
usethis::use_pkgdown()
pkgdown::build_site()
library(easyfulcrum)
devtools::check()
devtools::check()
devtools::check()
#to build package website
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
#to build package website
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
join_genofulc <- joinGenoFulc(geno = proc_geno, fulc = anno_fulc, dir = NULL, select_vars = TRUE)
library(easyfulcrum)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(easyfulcrum)
makeDirStructure(startdir = "~/Desktop",
projectdirname = "2020JanuaryHawaii")
loadExampleFiles(startdir = "~/Desktop",
projectdirname = "2020JanuaryHawaii")
dir <- "~/Desktop/2020JanuaryHawaii"
raw_fulc <- readFulcrum(dir = dir)
proc_fulc <- procFulcrum(data = raw_fulc)
flag1.1 <- checkTemperatures(data = proc_fulc, return_flags = TRUE)
proc_fulc_clean <- fixTemperatures(data = proc_fulc,
substrate_temperature_ids = "a7db618d-44cc-4b4a-bc67-871306029274",
ambient_temperature_ids = "b1f20ae4-c5c2-426f-894a-e1f46c2fa693",
ambient_temperature_run_ids=c("dda77efe-d73c-48e9-aefb-b508e613256b",
"93de14a0-40ab-4793-8614-ab1512ab158c"))
join_fulc <- joinFulcrum(data = proc_fulc, select_vars = TRUE)
flag1.2 <- checkJoin(data = join_fulc, return_flags = TRUE)
anno_fulc <- annotateFulcrum(data = join_fulc, dir = NULL, select_vars = TRUE)
raw_geno <- readGenotypes(gsKey = c("1iSGkGbhoyg-uq_l83UbiNdI_g4xqEkTxf3Ap0J7JGto"))
head(raw_geno)
proc_geno <- checkGenotypes(geno_data = raw_geno, fulc_data = anno_fulc,
return_geno = TRUE, return_flags = FALSE)
flag1.3 <- checkGenotypes(geno_data = raw_geno, fulc_data = anno_fulc,
return_geno = FALSE, return_flags = TRUE)
raw_geno <- readGenotypes(gsKey = c("1WlnmujvHBc3s5jwCtRPcT3oHkRvpU-RXXIBmJOV8Qb0"))
proc_geno <- checkGenotypes(geno_data = raw_geno, fulc_data = anno_fulc,
return_geno = TRUE, return_flags = FALSE)
join_genofulc <- joinGenoFulc(geno = proc_geno, fulc = anno_fulc, dir = NULL, select_vars = TRUE)
unique(join_genofulc$project)
pub_url = "https://storage.googleapis.com/elegansvariation.org/photos/"
data = join_genofulc
project_url <- glue::glue("{pub_url}{unique(data$project)}/")
project_url
usethis::use_pkgdown()
pkgdown::build_site()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(easyfulcrum)
makeDirStructure(startdir = "~/Desktop",
projectdirname = "2020JanuaryHawaii")
loadExampleFiles(startdir = "~/Desktop",
projectdirname = "2020JanuaryHawaii")
dir <- "~/Desktop/2020JanuaryHawaii"
raw_fulc <- readFulcrum(dir = dir)
proc_fulc <- procFulcrum(data = raw_fulc)
flag1.1 <- checkTemperatures(data = proc_fulc, return_flags = TRUE)
proc_fulc_clean <- fixTemperatures(data = proc_fulc,
substrate_temperature_ids = "a7db618d-44cc-4b4a-bc67-871306029274",
ambient_temperature_ids = "b1f20ae4-c5c2-426f-894a-e1f46c2fa693",
ambient_temperature_run_ids=c("dda77efe-d73c-48e9-aefb-b508e613256b",
"93de14a0-40ab-4793-8614-ab1512ab158c"))
join_fulc <- joinFulcrum(data = proc_fulc, select_vars = TRUE)
flag1.2 <- checkJoin(data = join_fulc, return_flags = TRUE)
anno_fulc <- annotateFulcrum(data = join_fulc, dir = NULL, select_vars = TRUE)
raw_geno <- readGenotypes(gsKey = c("1iSGkGbhoyg-uq_l83UbiNdI_g4xqEkTxf3Ap0J7JGto"))
head(raw_geno)
proc_geno <- checkGenotypes(geno_data = raw_geno, fulc_data = anno_fulc,
return_geno = TRUE, return_flags = FALSE)
flag1.3 <- checkGenotypes(geno_data = raw_geno, fulc_data = anno_fulc,
return_geno = FALSE, return_flags = TRUE)
raw_geno <- readGenotypes(gsKey = c("1WlnmujvHBc3s5jwCtRPcT3oHkRvpU-RXXIBmJOV8Qb0"))
proc_geno <- checkGenotypes(geno_data = raw_geno, fulc_data = anno_fulc,
return_geno = TRUE, return_flags = FALSE)
join_genofulc <- joinGenoFulc(geno = proc_geno, fulc = anno_fulc, dir = NULL, select_vars = TRUE)
final_data <- procPhotos(dir = dir, data = join_genofulc,
max_dim = 500, overwrite = TRUE,
pub_url = "https://storage.googleapis.com/collection_photos/",
CeNDR = TRUE)
View(final_data)
View(final_data$sample_photo1_processed_url)
final_data$sample_photo1_processed_url
flag1.4 <- makeSpSheet(data = final_data, target_sp = "Caenorhabditis briggsae", dir = dir)
generateReport(data = final_data, dir = dir)
final_data
df <- final_data
sf <- lubridate::stamp("Tuesday, September 30, 1997")
# pull information on project
projects <- pull(df%>%dplyr::distinct(project)%>%dplyr::filter(!is.na(project)))
collectors <- pull(df%>%dplyr::distinct(collection_by)%>%dplyr::filter(!is.na(collection_by)))
isolators <- pull(df%>%dplyr::distinct(isolation_by)%>%dplyr::filter(!is.na(isolation_by)))
collection_dates <- pull(df%>%dplyr::distinct(collection_date_UTC)%>%
dplyr::filter(!is.na(collection_date_UTC))) %>% ymd() %>% sf()
isolation_dates <- pull(df%>%dplyr::distinct(isolation_date_UTC)%>%
dplyr::filter(!is.na(isolation_date_UTC))) %>% mdy() %>% sf()
# make personnel dataframe
personnel_projects <- data.frame(projects)
personnel_collectors <- data.frame(collectors)
personnel_isolators <- data.frame(isolators)
personnel_collection_dates <- data.frame(collection_dates)
personnel_isolation_dates <- data.frame(isolation_dates)
# print nice tables
DT::datatable(personnel_projects, colnames = "easyFulcrum project name:",
rownames = FALSE, filter = "none", options = list(dom = 't',ordering=F))
DT::datatable(personnel_collectors, colnames = "Participants in collection:",
rownames = FALSE, filter = "none", options = list(dom = 't'))
DT::datatable(personnel_isolators, colnames = "Participants in strain isolation:",
rownames = FALSE, filter = "none", options = list(dom = 't'))
DT::datatable(personnel_collection_dates, colnames = "Dates of collection:",
rownames = FALSE, filter = "none", options = list(dom = 't'))
DT::datatable(personnel_isolation_dates, colnames = "Dates of isolation:",
rownames = FALSE, filter = "none", options = list(dom = 't'))
# load packages
library(tidyverse)
library(lubridate)
library(cowplot)
library(leaflet)
library(dplyr)
library(knitr)
library(DT)
#setting working directory
knitr::opts_knit$set(root.dir = '..')
map_target_species <- function(df, color_use) {
icos <- iconList(
red = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/red.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
),
orange = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/orange.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
),
blue = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/blue.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
),
black = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/black.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
)
)
df <- dplyr::filter(df, !is.na(df[[color_use]])) %>%
dplyr::mutate(substrate=ifelse(is.na(substrate), "", substrate)) %>%
dplyr::arrange(species_id)
#print(df)
# "https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}.png"
#"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}"
attach(df)
leaflet::leaflet(data = df, width = "100%", options = list(zoomControl = T)) %>%
addProviderTiles("Stamen.Terrain") %>%
leaflet::addMarkers(~collection_longitude,
~collection_latitude,
popup = glue::glue("<h2>{c_label}</h2><hr />
<strong>Collected by:</strong> {collection_by}<br />
<strong>Latitidue, Longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)},
{format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>Collection location:</strong> {collection_location}<br />
<strong>Collection island:</strong> {collection_island}<br />
<strong>Collection trail:</strong> {collection_trail}<br />
<strong>Substrate:</strong> {substrate}<br />
<strong>C. elegans:</strong> {`C. elegans count`}
<strong>C. briggsae:</strong> {`C. briggsae count`}
<strong>C. tropicalis:</strong> {`C. tropicalis count`}<br />
<img style='width: 150px;' src='{pub_url}'></a>"),
popupOptions(maxWidth = 500),
icon = icos[ df[[color_use]] ] )
#htmlwidgets::saveWidget(m, tempfile(), selfcontained = FALSE)
#webshot::webshot("temp.html", file = "map.png",
#        cliprect = "viewport", vwidth = 1000, vheight = 1000)
}
knitr::knit_hooks$set(
warning = function(x, options) {
paste('\n\n<div class="alert alert-warning">',
gsub('##', '\n', gsub('^##\ Warning:', '**Warning**', x)),
'</div>', sep = '\n')
},
message = function(x, options) {
paste('\n\n<div class="alert alert-info">',
gsub('##', '\n', x),
'</div>', sep = '\n')
}
)
df <- final_data
sf <- lubridate::stamp("Tuesday, September 30, 1997")
# pull information on project
projects <- pull(df%>%dplyr::distinct(project)%>%dplyr::filter(!is.na(project)))
collectors <- pull(df%>%dplyr::distinct(collection_by)%>%dplyr::filter(!is.na(collection_by)))
isolators <- pull(df%>%dplyr::distinct(isolation_by)%>%dplyr::filter(!is.na(isolation_by)))
collection_dates <- pull(df%>%dplyr::distinct(collection_date_UTC)%>%
dplyr::filter(!is.na(collection_date_UTC))) %>% ymd() %>% sf()
isolation_dates <- pull(df%>%dplyr::distinct(isolation_date_UTC)%>%
dplyr::filter(!is.na(isolation_date_UTC))) %>% mdy() %>% sf()
# make personnel dataframe
personnel_projects <- data.frame(projects)
personnel_collectors <- data.frame(collectors)
personnel_isolators <- data.frame(isolators)
personnel_collection_dates <- data.frame(collection_dates)
personnel_isolation_dates <- data.frame(isolation_dates)
# print nice tables
DT::datatable(personnel_projects, colnames = "easyFulcrum project name:",
rownames = FALSE, filter = "none", options = list(dom = 't',ordering=F))
DT::datatable(personnel_collectors, colnames = "Participants in collection:",
rownames = FALSE, filter = "none", options = list(dom = 't'))
DT::datatable(personnel_isolators, colnames = "Participants in strain isolation:",
rownames = FALSE, filter = "none", options = list(dom = 't'))
DT::datatable(personnel_collection_dates, colnames = "Dates of collection:",
rownames = FALSE, filter = "none", options = list(dom = 't'))
DT::datatable(personnel_isolation_dates, colnames = "Dates of isolation:",
rownames = FALSE, filter = "none", options = list(dom = 't'))
# temporary table to collect enumerations on certain quantities of interest
collection_counts_1 <- df %>%
dplyr::filter(!is.na(c_label)) %>%
dplyr::mutate(class =
ifelse(grepl("^Caeno",species_id),species_id,
ifelse(!is.na(species_id),"other-Caenorhabditis",
ifelse((pcr_product_ssu == 1 & pcr_product_its2 == 0),"non-Caenorhabditis",
ifelse((pcr_product_ssu == 0 & pcr_product_its2 == 0),"Unknown nematode",
ifelse((pcr_product_its2 = 1 & is.na(species_id)),"its2 genotype missing",NA)))))) %>%
dplyr::mutate(collection_class = forcats::as_factor(class),
collection_class = forcats::fct_relevel(collection_class,
"C. elegans",
"C. tropicalis",
"C. briggsae",
"other-Caenorhabditis",
"non-Caenorhabditis",
"unknown nematode",
"no nematode")) %>%
dplyr::arrange(collection_class) %>%
dplyr::distinct(c_label, .keep_all = TRUE) %>%
dplyr::mutate(`total number of distinct collections` = n()) %>%
dplyr::add_count(worms_on_sample) %>%
dplyr::rename(worms_on_sample_counts = n) %>%
dplyr::add_count(collection_class) %>%
dplyr::rename(collection_class_counts = n) %>%
dplyr::select(c_label,worms_on_sample, collection_class,
`total number of distinct collections`,
worms_on_sample_counts,
collection_class_counts)
collection_distinct <- pull(collection_counts_1%>%dplyr::distinct(`total number of distinct collections`)%>%dplyr::filter(!is.na(`total number of distinct collections`)))
collection_worms_on_sample <- collection_counts_1%>%
dplyr::distinct(worms_on_sample,worms_on_sample_counts)
collection_species_id <- collection_counts_1%>%
dplyr::distinct(collection_class,collection_class_counts)
collection_worms_on_sample <- data.frame(collection_worms_on_sample)
collection_worms_on_sample$worms_on_sample[is.na(collection_worms_on_sample$worms_on_sample)] <- "unknown/NA"
collection_species_id <- data.frame(collection_species_id)
collection_species_id$collection_class <- fct_explicit_na(collection_species_id$collection_class, "unknown/NA")
message(paste("Total number of distinct collections:",
collection_distinct, sep = " "))
DT::datatable(collection_worms_on_sample, colnames = c("worms on sample","number of collections"),
rownames = FALSE, filter = "none", options = list(dom = 't'))
DT::datatable(collection_species_id, colnames = c("collection class","number of collections"),
rownames = FALSE, filter = "none", options = list(dom = 't'))
collections_df <- df %>%
dplyr::select(c_label,s_label,species_id,proc_ambient_temperature,ambient_humidity,
proc_substrate_temperature,collection_altitude, substrate,
landscape, collection_by)
DT::datatable(collections_df, rownames = FALSE, colnames = c("C-label", "S-label",
"SpeciesID", "AmbientTemp",
"AmbientHumidity",
"SubstrateTemp", "Altitude",
"Substrate", "Landscape",
"CollectedBy"),
filter = "none", options = list(dom = 'ftrp', scrollX = '200px'))
target_df <- df %>%
dplyr::group_by(c_label, species_id) %>%
dplyr::mutate(species_count = n()) %>%
dplyr::mutate(`C. elegans count` = ifelse(species_id == "Caenorhabditis elegans" & !is.na(species_id), species_count, 0),
`C. briggsae count` = ifelse(species_id == "Caenorhabditis briggsae" & !is.na(species_id), species_count, 0),
`C. tropicalis count` = ifelse(species_id == "Caenorhabditis tropicalis" & !is.na(species_id), species_count, 0)) %>%
dplyr::ungroup() %>%
dplyr::distinct(c_label, species_id, .keep_all =T) %>%
dplyr::arrange(c_label, desc(species_count)) %>%
dplyr::group_by(c_label) %>%
dplyr::mutate(`C. elegans count` = sum(`C. elegans count`),
`C. briggsae count` = sum(`C. briggsae count`),
`C. tropicalis count` = sum(`C. tropicalis count`)) %>%
dplyr::ungroup() %>%
dplyr::distinct(c_label, .keep_all =T) %>%
dplyr::mutate(color = case_when(worms_on_sample == "Yes" ~ "red",
worms_on_sample == "No" ~ "blue",
worms_on_sample == "Tracks" ~ "orange",
is.na(worms_on_sample) ~ "black")) %>%
dplyr::mutate(pub_url = sample_photo1_processed_url)
View(target_df)
target_map <-  map_target_species(target_df,"color")
View(target_map)
target_map
map_target_species <- function(df, color_use) {
icos <- iconList(
red = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/red.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
),
orange = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/orange.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
),
blue = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/blue.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
),
black = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/black.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
)
)
df <- dplyr::filter(df, !is.na(df[[color_use]])) %>%
dplyr::mutate(substrate=ifelse(is.na(substrate), "", substrate)) %>%
dplyr::arrange(species_id)
#print(df)
# "https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}.png"
#"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}"
attach(df)
leaflet::leaflet(data = df, width = "100%", options = list(zoomControl = T)) %>%
addProviderTiles("Stamen.Terrain") %>%
leaflet::addMarkers(~collection_longitude,
~collection_latitude,
popup = glue::glue("<h2>{c_label}</h2><hr />
<strong>Collected by:</strong> {collection_by}<br />
<strong>Latitidue, Longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)},
{format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>Collection location:</strong> {collection_location}<br />
<strong>Collection island:</strong> {collection_island}<br />
<strong>Collection trail:</strong> {collection_trail}<br />
<strong>Substrate:</strong> {substrate}<br />
<strong>C. elegans:</strong> {`C. elegans count`}
<strong>C. briggsae:</strong> {`C. briggsae count`}
<strong>C. tropicalis:</strong> {`C. tropicalis count`}<br />
<img style='width: 150px;' src='{sample_photo1_processed_url}'></a>"),
popupOptions(maxWidth = 500),
icon = icos[ df[[color_use]] ] )
#htmlwidgets::saveWidget(m, tempfile(), selfcontained = FALSE)
#webshot::webshot("temp.html", file = "map.png",
#        cliprect = "viewport", vwidth = 1000, vheight = 1000)
}
knitr::knit_hooks$set(
warning = function(x, options) {
paste('\n\n<div class="alert alert-warning">',
gsub('##', '\n', gsub('^##\ Warning:', '**Warning**', x)),
'</div>', sep = '\n')
},
message = function(x, options) {
paste('\n\n<div class="alert alert-info">',
gsub('##', '\n', x),
'</div>', sep = '\n')
}
)
target_df <- df %>%
dplyr::group_by(c_label, species_id) %>%
dplyr::mutate(species_count = n()) %>%
dplyr::mutate(`C. elegans count` = ifelse(species_id == "Caenorhabditis elegans" & !is.na(species_id), species_count, 0),
`C. briggsae count` = ifelse(species_id == "Caenorhabditis briggsae" & !is.na(species_id), species_count, 0),
`C. tropicalis count` = ifelse(species_id == "Caenorhabditis tropicalis" & !is.na(species_id), species_count, 0)) %>%
dplyr::ungroup() %>%
dplyr::distinct(c_label, species_id, .keep_all =T) %>%
dplyr::arrange(c_label, desc(species_count)) %>%
dplyr::group_by(c_label) %>%
dplyr::mutate(`C. elegans count` = sum(`C. elegans count`),
`C. briggsae count` = sum(`C. briggsae count`),
`C. tropicalis count` = sum(`C. tropicalis count`)) %>%
dplyr::ungroup() %>%
dplyr::distinct(c_label, .keep_all =T) %>%
dplyr::mutate(color = case_when(worms_on_sample == "Yes" ~ "red",
worms_on_sample == "No" ~ "blue",
worms_on_sample == "Tracks" ~ "orange",
is.na(worms_on_sample) ~ "black")) %>%
dplyr::mutate(pub_url = sample_photo1_processed_url)
target_map <-  map_target_species(target_df,"color")
target_map
usethis::use_pkgdown()
pkgdown::build_site()
