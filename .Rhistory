t.test(try_low_df$NES, try_high_df$NES, alternative = "two.sided", var.equal = FALSE)
extractNES <- function(df, name = "Cluster4_50"){
return(df[df$pathway == name,]$NES)
}
try <- lapply(output, extractNES)
names_low <- rownames(df[df$`Gleason bin` == "low",])
try_low <- try[names(try) %in% names_low]
names_high <- rownames(df[df$`Gleason bin` == "high",])
try_high <- try[names(try) %in% names_high]
try_high_df <- as.data.frame(t(as.data.frame(try_high)))
colnames(try_high_df) <- "NES"
try_high_df$Gleason_bin <- "high"
try_low_df <- as.data.frame(t(as.data.frame(try_low)))
colnames(try_low_df) <- "NES"
try_low_df$Gleason_bin <- "low"
final_df <- rbind(try_high_df, try_low_df)
p <- ggplot(final_df, aes(x=Gleason_bin, y=NES)) +
geom_violin()+
geom_dotplot(binaxis='y', stackdir='center', dotsize=1)
p
t.test(try_low_df$NES, try_high_df$NES, alternative = "two.sided", var.equal = FALSE)
extractNES <- function(df, name = "Cluster4_50"){
return(df[df$pathway == name,]$NES)
}
try <- lapply(output, extractNES)
names_low <- rownames(df[df$`Gleason bin` == "low",])
try_low <- try[names(try) %in% names_low]
names_high <- rownames(df[df$`Gleason bin` == "high",])
try_high <- try[names(try) %in% names_high]
try_high_df <- as.data.frame(t(as.data.frame(try_high)))
colnames(try_high_df) <- "NES"
try_high_df$Gleason_bin <- "high"
try_low_df <- as.data.frame(t(as.data.frame(try_low)))
colnames(try_low_df) <- "NES"
try_low_df$Gleason_bin <- "low"
final_df <- rbind(try_high_df, try_low_df)
p <- ggplot(final_df, aes(x=Gleason_bin, y=NES)) +
geom_violin()+
geom_dotplot(binaxis='y', stackdir='center', dotsize=1)
p
t.test(try_low_df$NES, try_high_df$NES, alternative = "two.sided", var.equal = FALSE)
#read in gmt files
pathwaysFactors <- read.gmt("Factors_20_50.gmt")
pathwaysClusters <- read.gmt("Clusters_20_50.gmt")
#standardize matrix
mat <- assay(vsd)
mat_scaled <- t(scale(t(mat)))
conversion <- as.vector(mapIds(org.Hs.eg.db, keys = rownames(mat_scaled), keytype = "ENSEMBL", column="SYMBOL"))
rownames(mat_scaled) <- conversion
i <- 1
column <- as.vector(mat_scaled[,i])
gseaClusters[[i]] <- fgsea(pathways = pathwaysClusters,
stats = column)
column <- as.vector(mat_scaled[,i])
names(column) <- rownames(mat_scaled)
gseaClusters[[i]] <- fgsea(pathways = pathwaysClusters,
stats = column)
gseaClusters <- list()
column <- as.vector(mat_scaled[,i])
names(column) <- rownames(mat_scaled)
gseaClusters[[i]] <- fgsea(pathways = pathwaysClusters,
stats = column)
gseaClusters <- list()
for(i in 1:ncol(mat_scaled)){
column <- as.vector(mat_scaled[,i])
names(column) <- rownames(mat_scaled)
gseaClusters[[i]] <- fgsea(pathways = pathwaysClusters,
stats = column,
eps = 0.0)
}
names(gseaClusters) <- colnames(mat_scaled)
gseaClusters <- list()
column <- as.vector(mat_scaled[,i])
names(column) <- rownames(mat_scaled)
gseaClusters[[i]] <- fgsea(pathways = pathwaysClusters,
stats = column,
eps = 0.0)
anyDuplicated(names(pathwaysClusters))
anyDuplicated(names(column))
View(column)
column
duplicated(names(column))
column[duplicated(names(column))]
as.vector(mapIds(org.Hs.eg.db, keys = rownames(mat_scaled), keytype = "ENSEMBL", column="SYMBOL"))
mat <- assay(vsd)
mat_scaled <- t(scale(t(mat)))
conversion <- as.vector(mapIds(org.Hs.eg.db, keys = rownames(mat_scaled), keytype = "ENSEMBL", column="SYMBOL"))
rownames(mat_scaled) <- conversion
dim(mat_scaled)
ensembl_switch <- function(vec){
human_ids <- mouse_to_human(vec)
return(as.vector(mapIds(org.Hs.eg.db, keys = human_ids, keytype = "SYMBOL", column="ENSEMBL")))
}
setwd("~/Desktop/Abate-Shen/SleepingBeauty/git/sleeping-beauty-analysis")
source("../vaxtools/R/utils.R")
source("../vaxtools/R/cross-species-utils.R")
setwd("~/Desktop/Abate-Shen/SleepingBeauty/git/sleeping-beauty-analysis")
source("../vaxtools/R/utils.R")
source("../vaxtools/R/cross-species-utils.R")
ensembl_switch <- function(vec){
human_ids <- mouse_to_human(vec)
return(as.vector(mapIds(org.Hs.eg.db, keys = human_ids, keytype = "SYMBOL", column="ENSEMBL")))
}
clusters <- list("META_16" = ensembl_switch(meta_16),
"Cluster0_20" = ensembl_switch(cluster0_genes[1:20]),
"Cluster0_50" = ensembl_switch(cluster0_genes[1:50]),
"Cluster1_20" = ensembl_switch(cluster1_genes[1:20]),
"Cluster1_50" = ensembl_switch(cluster1_genes[1:50]),
"Cluster2_20" = ensembl_switch(cluster2_genes[1:20]),
"Cluster2_50" = ensembl_switch(cluster2_genes[1:50]),
"Cluster3_20" = ensembl_switch(cluster3_genes[1:20]),
"Cluster3_50" = ensembl_switch(cluster3_genes[1:50]),
"Cluster4_20" = ensembl_switch(cluster4_genes[1:20]),
"Cluster4_50" = ensembl_switch(cluster4_genes[1:50]))
#for reference
meta_16 <- c("Ccne2", "Mcm4", "Wdhd1", "Atad2", "Ercc6l", "Rad51ap1", "Rad21",
"Racgap1", "Wdr12", "Lmnb1", "Mad2l1", "Azin1", "Srpk1", "Taf2", "Top2a", "Tmpo")
clusters <- list("META_16" = ensembl_switch(meta_16),
"Cluster0_20" = ensembl_switch(cluster0_genes[1:20]),
"Cluster0_50" = ensembl_switch(cluster0_genes[1:50]),
"Cluster1_20" = ensembl_switch(cluster1_genes[1:20]),
"Cluster1_50" = ensembl_switch(cluster1_genes[1:50]),
"Cluster2_20" = ensembl_switch(cluster2_genes[1:20]),
"Cluster2_50" = ensembl_switch(cluster2_genes[1:50]),
"Cluster3_20" = ensembl_switch(cluster3_genes[1:20]),
"Cluster3_50" = ensembl_switch(cluster3_genes[1:50]),
"Cluster4_20" = ensembl_switch(cluster4_genes[1:20]),
"Cluster4_50" = ensembl_switch(cluster4_genes[1:50]))
meta_16 <- c("Ccne2", "Mcm4", "Wdhd1", "Atad2", "Ercc6l", "Rad51ap1", "Rad21",
"Racgap1", "Wdr12", "Lmnb1", "Mad2l1", "Azin1", "Srpk1", "Taf2", "Top2a", "Tmpo")
top_cluster <- function(cluster_df, cluster_no, stop = 1000){
cluster_df <- cluster_df %>% arrange(fdr)
threshold_20 <- cluster_df$fdr[21]
threshold_50 <- cluster_df$fdr[51]
threshold_100 <- cluster_df$fdr[101]
lower <- min(cluster_df$fdr)
upper <- max(cluster_df[1:stop,]$fdr)
ggplot(cluster_df[1:stop,], aes(x=fdr)) +
geom_histogram(bins = stop) +
geom_vline(aes(xintercept=threshold_20),
color="blue", size=.5) +
geom_vline(aes(xintercept=threshold_50),
color="red", size=.5) +
geom_vline(aes(xintercept=threshold_100),
color="green", size=.5) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
coord_cartesian(xlim=c(lower,upper)) +
ggtitle(cluster_no)
ggsave(file.path(reports.dir,paste(cluster_no,"hist.pdf", sep = "_")), height = 4)
return(cluster_df$gene)
}
#read in cluster data
cluster0 <- read.table("gene_lists/CA78910.markers.dcorrSP.0.nCells_128.nRest_220.up.tsv", header = TRUE, sep = "\t")
cluster1 <- read.table("gene_lists/CA78910.markers.dcorrSP.1.nCells_75.nRest_273.up.tsv", header = TRUE, sep = "\t")
cluster2 <- read.table("gene_lists/CA78910.markers.dcorrSP.2.nCells_74.nRest_274.up.tsv", header = TRUE, sep = "\t")
cluster3 <- read.table("gene_lists/CA78910.markers.dcorrSP.3.nCells_56.nRest_292.up.tsv", header = TRUE, sep = "\t")
cluster4 <- read.table("gene_lists/CA78910.markers.dcorrSP.4.nCells_15.nRest_333.up.tsv", header = TRUE, sep = "\t")
setwd("~/Desktop/Abate-Shen/CTC/SU2C_TCGA")
reports.dir <- "results"
#read in cluster data
cluster0 <- read.table("gene_lists/CA78910.markers.dcorrSP.0.nCells_128.nRest_220.up.tsv", header = TRUE, sep = "\t")
cluster1 <- read.table("gene_lists/CA78910.markers.dcorrSP.1.nCells_75.nRest_273.up.tsv", header = TRUE, sep = "\t")
cluster2 <- read.table("gene_lists/CA78910.markers.dcorrSP.2.nCells_74.nRest_274.up.tsv", header = TRUE, sep = "\t")
cluster3 <- read.table("gene_lists/CA78910.markers.dcorrSP.3.nCells_56.nRest_292.up.tsv", header = TRUE, sep = "\t")
cluster4 <- read.table("gene_lists/CA78910.markers.dcorrSP.4.nCells_15.nRest_333.up.tsv", header = TRUE, sep = "\t")
#extract genes from data tables
cluster0_genes <- top_cluster(cluster0, "cluster_0")
cluster1_genes <- top_cluster(cluster1, "cluster_1", stop = 350)
cluster2_genes <- top_cluster(cluster2, "cluster_2")
cluster3_genes <- top_cluster(cluster3, "cluster_3")
cluster4_genes <- top_cluster(cluster4, "cluster_4", stop = 900)
#read in factor data
factors <- read.table("gene_lists/CA78910.gene_score_scHPF.txt", header = FALSE)
colnames(factors) <- c("ens","gene","factor1","factor2","factor3","factor4","factor5",
"factor6","factor7","factor8","factor9","factor10","factor11",
"factor12","factor13","factor14")
#clean factors by top scores and generate appropriate histograms of top 20,50,100 genes
top_factor <- function(factors, factor_no){
factor_red <- factors %>%
arrange(desc(get(factor_no))) %>%
dplyr::select(c("ens","gene", score = all_of(factor_no)))
threshold_20 <- factor_red$score[21]
threshold_50 <- factor_red$score[51]
threshold_100 <- factor_red$score[101]
#lower <- min(factor_red$score)
#upper <- max(factor_red$score)
ggplot(factor_red, aes(x=score)) +
geom_histogram(bins = 1000) +
geom_vline(aes(xintercept=threshold_20),
color="blue", size=.5) +
geom_vline(aes(xintercept=threshold_50),
color="red", size=.5) +
geom_vline(aes(xintercept=threshold_100),
color="green", size=.5) +
ylim(0,200) +
ggtitle(factor_no)
ggsave(file.path(reports.dir,paste(factor_no,"hist.pdf", sep = "_")), height = 4)
return(factor_red$gene)
}
factor1_genes <- top_factor(factors, "factor1")
factor2_genes <- top_factor(factors, "factor2")
factor3_genes <- top_factor(factors, "factor3")
factor4_genes <- top_factor(factors, "factor4")
factor5_genes <- top_factor(factors, "factor5")
factor6_genes <- top_factor(factors, "factor6")
factor7_genes <- top_factor(factors, "factor7")
factor8_genes <- top_factor(factors, "factor8")
factor9_genes <- top_factor(factors, "factor9")
factor10_genes <- top_factor(factors, "factor10")
factor11_genes <- top_factor(factors, "factor11")
factor12_genes <- top_factor(factors, "factor12")
factor13_genes <- top_factor(factors, "factor13")
factor14_genes <- top_factor(factors, "factor14")
#citation: LeviRmisc/R/writeGMT.R
writeGMT <- function #Create a gmt (gene matrix transposed) file
### Createss a gmt (gene matrix transposed) file such as those
### provided by mSigDB or geneSigDB, from an R list object.
### Function by Levi Waldron.
(object,
### R list object that will be converted to GMT file.  Each element
### should contain a vector of gene names, and the names of the
### elements will used for the gene set names
fname
### Output file name for .gmt file
){
if (class(object) != "list") stop("object should be of class 'list'")
if(file.exists(fname)) unlink(fname)
for (iElement in 1:length(object)){
write.table(t(c(make.names(rep(names(object)[iElement],2)),object[[iElement]])),
sep="\t",quote=FALSE,
file=fname,append=TRUE,col.names=FALSE,row.names=FALSE)
}
### Called for the effect of writing a .gmt file
}
clusters <- list("META_16" = ensembl_switch(meta_16),
"Cluster0_20" = ensembl_switch(cluster0_genes[1:20]),
"Cluster0_50" = ensembl_switch(cluster0_genes[1:50]),
"Cluster1_20" = ensembl_switch(cluster1_genes[1:20]),
"Cluster1_50" = ensembl_switch(cluster1_genes[1:50]),
"Cluster2_20" = ensembl_switch(cluster2_genes[1:20]),
"Cluster2_50" = ensembl_switch(cluster2_genes[1:50]),
"Cluster3_20" = ensembl_switch(cluster3_genes[1:20]),
"Cluster3_50" = ensembl_switch(cluster3_genes[1:50]),
"Cluster4_20" = ensembl_switch(cluster4_genes[1:20]),
"Cluster4_50" = ensembl_switch(cluster4_genes[1:50]))
View(clusters)
writeGMT(clusters, "Clusters_20_50.gmt")
pathwaysClusters <- read.gmt("Clusters_20_50.gmt")
mat <- assay(vsd)
mat_scaled <- t(scale(t(mat)))
conversion <- as.vector(mapIds(org.Hs.eg.db, keys = rownames(mat_scaled), keytype = "ENSEMBL", column="SYMBOL"))
rownames(mat_scaled) <- conversion
mat <- assay(vsd)
mat_scaled <- t(scale(t(mat)))
i
i <- 1
gseaClusters <- list()
column <- as.vector(mat_scaled[,i])
names(column) <- rownames(mat_scaled)
gseaClusters[[i]] <- fgsea(pathways = pathwaysClusters,
stats = column,
eps = 0.0)
for(i in 1:ncol(mat_scaled)){
column <- as.vector(mat_scaled[,i])
names(column) <- rownames(mat_scaled)
gseaClusters[[i]] <- fgsea(pathways = pathwaysClusters,
stats = column,
eps = 0.0)
}
names(gseaClusters) <- colnames(mat_scaled)
extractNES <- function(df, name = "Cluster2_50"){
return(df[df$pathway == name,]$NES)
}
try <- lapply(output, extractNES)
names_low <- rownames(df[df$`Gleason bin` == "low",])
try_low <- try[names(try) %in% names_low]
names_high <- rownames(df[df$`Gleason bin` == "high",])
try_high <- try[names(try) %in% names_high]
try_high_df <- as.data.frame(t(as.data.frame(try_high)))
colnames(try_high_df) <- "NES"
try_high_df$Gleason_bin <- "high"
try_low_df <- as.data.frame(t(as.data.frame(try_low)))
colnames(try_low_df) <- "NES"
try_low_df$Gleason_bin <- "low"
final_df <- rbind(try_high_df, try_low_df)
p <- ggplot(final_df, aes(x=Gleason_bin, y=NES)) +
geom_violin()+
geom_dotplot(binaxis='y', stackdir='center', dotsize=1)
p
t.test(try_low_df$NES, try_high_df$NES, alternative = "two.sided", var.equal = FALSE)
factors <- list("META_16" = ensembl_switch(meta_16),
"Factor1_20" = ensembl_switch(factor1_genes[1:20]),
"Factor1_50" = ensembl_switch(factor1_genes[1:50]),
"Factor2_20" = ensembl_switch(factor2_genes[1:20]),
"Factor2_50" = ensembl_switch(factor2_genes[1:50]),
"Factor3_20" = ensembl_switch(factor3_genes[1:20]),
"Factor3_50" = ensembl_switch(factor3_genes[1:50]),
"Factor4_20" = ensembl_switch(factor4_genes[1:20]),
"Factor4_50" = ensembl_switch(factor4_genes[1:50]),
"Factor5_20" = ensembl_switch(factor5_genes[1:20]),
"Factor5_50" = ensembl_switch(factor5_genes[1:50]),
"Factor6_20" = ensembl_switch(factor6_genes[1:20]),
"Factor6_50" = ensembl_switch(factor6_genes[1:50]),
"Factor7_20" = ensembl_switch(factor7_genes[1:20]),
"Factor7_50" = ensembl_switch(factor7_genes[1:50]),
"Factor8_20" = ensembl_switch(factor8_genes[1:20]),
"Factor8_50" = ensembl_switch(factor8_genes[1:50]),
"Factor9_20" = ensembl_switch(factor9_genes[1:20]),
"Factor9_50" = ensembl_switch(factor9_genes[1:50]),
"Factor10_20" = ensembl_switch(factor10_genes[1:20]),
"Factor10_50" = ensembl_switch(factor10_genes[1:50]),
"Factor11_20" = ensembl_switch(factor11_genes[1:20]),
"Factor11_50" = ensembl_switch(factor11_genes[1:50]),
"Factor12_20" = ensembl_switch(factor12_genes[1:20]),
"Factor12_50" = ensembl_switch(factor12_genes[1:50]),
"Factor13_20" = ensembl_switch(factor13_genes[1:20]),
"Factor13_50" = ensembl_switch(factor13_genes[1:50]),
"Factor14_20" = ensembl_switch(factor14_genes[1:20]),
"Factor14_50" = ensembl_switch(factor14_genes[1:50]))
writeGMT(factors, "Factors_20_50.gmt")
writeGMT(clusters, "Clusters_20_50.gmt")
gseaFactors <- list()
for(i in 1:ncol(mat_scaled)){
column <- as.vector(mat_scaled[,i])
names(column) <- rownames(mat_scaled)
gseaFactors[[i]] <- fgsea(pathways = pathwaysFactors,
stats = column,
eps = 0.0)
}
names(gseaFactors) <- colnames(mat_scaled)
p<- ggplot(extracted_pathway_final_df, aes(x=NES, y=Gleason_bin, fill=Gleason_bin)) +
geom_violin(trim = FALSE) +
stat_summary(fun.data=mean_sdl, mult=1, geom="pointrange", color="black")
p
violin_outputs <- function(listofGSEAresults, pathwayofinterest = "Cluster2_50"){
extractedpathway <- lapply(output, extractNES, name = pathwayofinterest)
extractedpathway_low <- extractedpathway[names(extractedpathway) %in% names_GSlow]
extractedpathway_high <- extractedpathway[names(extractedpathway) %in% names_GShigh]
extractedpathway_high_df <- as.data.frame(t(as.data.frame(extractedpathway_high)))
colnames(extractedpathway_high_df) <- "NES"
extractedpathway_high_df$Gleason_bin <- "high"
extractedpathway_low_df <- as.data.frame(t(as.data.frame(extractedpathway_low)))
colnames(extractedpathway_low_df) <- "NES"
extractedpathway_low_df$Gleason_bin <- "low"
extracted_pathway_final_df <- rbind(extractedpathway_high_df, extractedpathway_low_df)
p<- ggplot(extracted_pathway_final_df, aes(x=NES, y=Gleason_bin, fill=Gleason_bin)) +
geom_violin(trim = FALSE) +
stat_summary(fun.data=mean_sdl, mult=1, geom="pointrange", color="black")
print(p)
print(t.test(extractedpathway_low_df$NES, extractedpathway_high_df$NES, alternative = "two.sided", var.equal = FALSE))
}
violin_outputs(gseaClusters)
#save names of samples with high and low gleason score
names_GSlow <- rownames(df[df$`Gleason bin` == "low",])
names_GShigh <- rownames(df[df$`Gleason bin` == "high",])
violin_outputs(gseaClusters)
install.packages("Hmisc")
violin_outputs(gseaClusters)
violin_outputs(gseaClusters)
violin_outputs <- function(listofGSEAresults, pathwayofinterest = "Cluster2_50"){
extractedpathway <- lapply(output, extractNES, name = pathwayofinterest)
extractedpathway_low <- extractedpathway[names(extractedpathway) %in% names_GSlow]
extractedpathway_high <- extractedpathway[names(extractedpathway) %in% names_GShigh]
extractedpathway_high_df <- as.data.frame(t(as.data.frame(extractedpathway_high)))
colnames(extractedpathway_high_df) <- "NES"
extractedpathway_high_df$Gleason_bin <- "high"
extractedpathway_low_df <- as.data.frame(t(as.data.frame(extractedpathway_low)))
colnames(extractedpathway_low_df) <- "NES"
extractedpathway_low_df$Gleason_bin <- "low"
extracted_pathway_final_df <- rbind(extractedpathway_high_df, extractedpathway_low_df)
p<- ggplot(extracted_pathway_final_df, aes(y=NES, x=Gleason_bin, fill=Gleason_bin)) +
geom_violin(trim = FALSE) +
stat_summary(fun.data=mean_sdl, mult=1, geom="pointrange", color="black")
print(p)
print(t.test(extractedpathway_low_df$NES, extractedpathway_high_df$NES, alternative = "two.sided", var.equal = FALSE))
}
violin_outputs(gseaClusters)
?stat_summary()
violin_outputs <- function(listofGSEAresults, pathwayofinterest = "Cluster2_50"){
extractedpathway <- lapply(output, extractNES, name = pathwayofinterest)
extractedpathway_low <- extractedpathway[names(extractedpathway) %in% names_GSlow]
extractedpathway_high <- extractedpathway[names(extractedpathway) %in% names_GShigh]
extractedpathway_high_df <- as.data.frame(t(as.data.frame(extractedpathway_high)))
colnames(extractedpathway_high_df) <- "NES"
extractedpathway_high_df$Gleason_bin <- "high"
extractedpathway_low_df <- as.data.frame(t(as.data.frame(extractedpathway_low)))
colnames(extractedpathway_low_df) <- "NES"
extractedpathway_low_df$Gleason_bin <- "low"
extracted_pathway_final_df <- rbind(extractedpathway_high_df, extractedpathway_low_df)
p<- ggplot(extracted_pathway_final_df, aes(y=NES, x=Gleason_bin, fill=Gleason_bin)) +
geom_violin(trim = FALSE) +
stat_summary(fun.data=mean_se, geom="pointrange", color="black")
print(p)
print(t.test(extractedpathway_low_df$NES, extractedpathway_high_df$NES, alternative = "two.sided", var.equal = FALSE))
}
violin_outputs(gseaClusters)
violin_outputs <- function(listofGSEAresults, pathwayofinterest = "Cluster2_50"){
extractedpathway <- lapply(output, extractNES, name = pathwayofinterest)
extractedpathway_low <- extractedpathway[names(extractedpathway) %in% names_GSlow]
extractedpathway_high <- extractedpathway[names(extractedpathway) %in% names_GShigh]
extractedpathway_high_df <- as.data.frame(t(as.data.frame(extractedpathway_high)))
colnames(extractedpathway_high_df) <- "NES"
extractedpathway_high_df$Gleason_bin <- "high"
extractedpathway_low_df <- as.data.frame(t(as.data.frame(extractedpathway_low)))
colnames(extractedpathway_low_df) <- "NES"
extractedpathway_low_df$Gleason_bin <- "low"
extracted_pathway_final_df <- rbind(extractedpathway_high_df, extractedpathway_low_df)
p<- ggplot(extracted_pathway_final_df, aes(y=NES, x=Gleason_bin, fill=Gleason_bin)) +
geom_violin(trim = FALSE) +
stat_summary(fun.data=mean_cl_normal, geom="pointrange", color="black")
print(p)
print(t.test(extractedpathway_low_df$NES, extractedpathway_high_df$NES, alternative = "two.sided", var.equal = FALSE))
}
violin_outputs(gseaClusters)
?geom_violin()
violin_outputs <- function(listofGSEAresults, pathwayofinterest = "Cluster2_50"){
extractedpathway <- lapply(output, extractNES, name = pathwayofinterest)
extractedpathway_low <- extractedpathway[names(extractedpathway) %in% names_GSlow]
extractedpathway_high <- extractedpathway[names(extractedpathway) %in% names_GShigh]
extractedpathway_high_df <- as.data.frame(t(as.data.frame(extractedpathway_high)))
colnames(extractedpathway_high_df) <- "NES"
extractedpathway_high_df$Gleason_bin <- "high"
extractedpathway_low_df <- as.data.frame(t(as.data.frame(extractedpathway_low)))
colnames(extractedpathway_low_df) <- "NES"
extractedpathway_low_df$Gleason_bin <- "low"
extracted_pathway_final_df <- rbind(extractedpathway_high_df, extractedpathway_low_df)
p<- ggplot(extracted_pathway_final_df, aes(y=NES, x=Gleason_bin, fill=Gleason_bin)) +
geom_violin(trim = TRUE) +
stat_summary(fun.data=mean_cl_normal, geom="pointrange", color="black")
print(p)
print(t.test(extractedpathway_low_df$NES, extractedpathway_high_df$NES, alternative = "two.sided", var.equal = FALSE))
}
violin_outputs(gseaClusters)
violin_outputs <- function(listofGSEAresults, pathwayofinterest = "Cluster2_50"){
extractedpathway <- lapply(output, extractNES, name = pathwayofinterest)
extractedpathway_low <- extractedpathway[names(extractedpathway) %in% names_GSlow]
extractedpathway_high <- extractedpathway[names(extractedpathway) %in% names_GShigh]
extractedpathway_high_df <- as.data.frame(t(as.data.frame(extractedpathway_high)))
colnames(extractedpathway_high_df) <- "NES"
extractedpathway_high_df$Gleason_bin <- "high"
extractedpathway_low_df <- as.data.frame(t(as.data.frame(extractedpathway_low)))
colnames(extractedpathway_low_df) <- "NES"
extractedpathway_low_df$Gleason_bin <- "low"
extracted_pathway_final_df <- rbind(extractedpathway_high_df, extractedpathway_low_df)
p<- ggplot(extracted_pathway_final_df, aes(y=NES, x=Gleason_bin, fill=Gleason_bin)) +
geom_violin(trim = FALSE, scale = "count") +
stat_summary(fun.data=mean_cl_normal, geom="pointrange", color="black")
print(p)
print(t.test(extractedpathway_low_df$NES, extractedpathway_high_df$NES, alternative = "two.sided", var.equal = FALSE))
}
violin_outputs(gseaClusters)
violin_outputs <- function(listofGSEAresults, pathwayofinterest = "Cluster2_50"){
extractedpathway <- lapply(output, extractNES, name = pathwayofinterest)
extractedpathway_low <- extractedpathway[names(extractedpathway) %in% names_GSlow]
extractedpathway_high <- extractedpathway[names(extractedpathway) %in% names_GShigh]
extractedpathway_high_df <- as.data.frame(t(as.data.frame(extractedpathway_high)))
colnames(extractedpathway_high_df) <- "NES"
extractedpathway_high_df$Gleason_bin <- "high"
extractedpathway_low_df <- as.data.frame(t(as.data.frame(extractedpathway_low)))
colnames(extractedpathway_low_df) <- "NES"
extractedpathway_low_df$Gleason_bin <- "low"
extracted_pathway_final_df <- rbind(extractedpathway_high_df, extractedpathway_low_df)
p<- ggplot(extracted_pathway_final_df, aes(y=NES, x=Gleason_bin, fill=Gleason_bin)) +
geom_violin(trim = FALSE, scale = "count", adjust = 1/2) +
stat_summary(fun.data=mean_cl_normal, geom="pointrange", color="black")
print(p)
print(t.test(extractedpathway_low_df$NES, extractedpathway_high_df$NES, alternative = "two.sided", var.equal = FALSE))
}
violin_outputs(gseaClusters)
violin_outputs <- function(listofGSEAresults, pathwayofinterest = "Cluster2_50"){
extractedpathway <- lapply(output, extractNES, name = pathwayofinterest)
extractedpathway_low <- extractedpathway[names(extractedpathway) %in% names_GSlow]
extractedpathway_high <- extractedpathway[names(extractedpathway) %in% names_GShigh]
extractedpathway_high_df <- as.data.frame(t(as.data.frame(extractedpathway_high)))
colnames(extractedpathway_high_df) <- "NES"
extractedpathway_high_df$Gleason_bin <- "high"
extractedpathway_low_df <- as.data.frame(t(as.data.frame(extractedpathway_low)))
colnames(extractedpathway_low_df) <- "NES"
extractedpathway_low_df$Gleason_bin <- "low"
extracted_pathway_final_df <- rbind(extractedpathway_high_df, extractedpathway_low_df)
p<- ggplot(extracted_pathway_final_df, aes(y=NES, x=Gleason_bin, fill=Gleason_bin)) +
geom_violin(trim = FALSE, scale = "scale", adjust = 1/2) +
stat_summary(fun.data=mean_cl_normal, geom="pointrange", color="black")
print(p)
print(t.test(extractedpathway_low_df$NES, extractedpathway_high_df$NES, alternative = "two.sided", var.equal = FALSE))
}
summary(extractedpathway_low_df$NES)
library(psych)
install.packages("pysch")
install.packages("pastecs")
violin_outputs <- function(listofGSEAresults, pathwayofinterest = "Cluster2_50"){
extractedpathway <- lapply(output, extractNES, name = pathwayofinterest)
extractedpathway_low <- extractedpathway[names(extractedpathway) %in% names_GSlow]
extractedpathway_high <- extractedpathway[names(extractedpathway) %in% names_GShigh]
extractedpathway_high_df <- as.data.frame(t(as.data.frame(extractedpathway_high)))
colnames(extractedpathway_high_df) <- "NES"
extractedpathway_high_df$Gleason_bin <- "high"
extractedpathway_low_df <- as.data.frame(t(as.data.frame(extractedpathway_low)))
colnames(extractedpathway_low_df) <- "NES"
extractedpathway_low_df$Gleason_bin <- "low"
extracted_pathway_final_df <- rbind(extractedpathway_high_df, extractedpathway_low_df)
p<- ggplot(extracted_pathway_final_df, aes(y=NES, x=Gleason_bin, fill=Gleason_bin)) +
geom_violin(trim = FALSE, scale = "scale", adjust = 1/2) +
stat_summary(fun.data=mean_cl_normal, geom="pointrange", color="black")
print(p)
print(stat.desc(extractedpathway_low_df$NES))
print(stat.desc(extractedpathway_high_df$NES))
print(t.test(extractedpathway_low_df$NES, extractedpathway_high_df$NES, alternative = "two.sided", var.equal = FALSE))
}
violin_outputs(gseaClusters)
violin_outputs(gseaClusters)
