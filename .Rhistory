~collection_latitude,
popup = glue::glue("<h2>{strain_name}</h2><hr />
<strong>collection uploaded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>substrate:</strong> {substrate}<br />
<strong>C. elegans:</strong> {`C. elegans count`}
<strong>C. briggsae:</strong> {`C. briggsae count`}
<strong>C. tropicalis:</strong> {`C. tropicalis count`}<br />
<img style='width: 150px;' src='https://picsum.photos/200/300'></a>"),
popupOptions(maxWidth = 500),
icon = icos[ df[[color_use]] ] )
leaflet::leaflet(data = df, width = "100%", options = list(zoomControl = T)) %>%
addProviderTiles("Stamen.Terrain") %>%
leaflet::addMarkers(~collection_longitude,
~collection_latitude,
popup = glue::glue("<h2>{strain_name}</h2><hr />
<strong>collection uploaded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>substrate:</strong> {substrate}<br />
<strong>C. elegans:</strong> {`C. elegans count`}
<strong>C. briggsae:</strong> {`C. briggsae count`}
<strong>C. tropicalis:</strong> {`C. tropicalis count`}<br />
<img style='width: 10px;' src='https://picsum.photos/200/300'></a>"),
popupOptions(maxWidth = 500),
icon = icos[ df[[color_use]] ] )
dir <- glue::glue("{dir1}","/data/processed/fulcrum/")
dir
dir <- glue::glue("{dir1}","'/data/processed/fulcrum/")
dir
glue::glue("<h2>{strain_name}</h2><hr />
<strong>collection uploaded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>substrate:</strong> {substrate}<br />
<strong>C. elegans:</strong> {`C. elegans count`}
<strong>C. briggsae:</strong> {`C. briggsae count`}
<strong>C. tropicalis:</strong> {`C. tropicalis count`}<br />
<img style='width: 10px;' src={dir}{sample_photo1_processed_file_name}></a>")
test <- glue::glue("<h2>{strain_name}</h2><hr />
<strong>collection uploaded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>substrate:</strong> {substrate}<br />
<strong>C. elegans:</strong> {`C. elegans count`}
<strong>C. briggsae:</strong> {`C. briggsae count`}
<strong>C. tropicalis:</strong> {`C. tropicalis count`}<br />
<img style='width: 10px;' src={dir}{sample_photo1_processed_file_name}></a>")
test
class(test)
str(test)
leaflet::leaflet(data = df, width = "100%", options = list(zoomControl = T)) %>%
addProviderTiles("Stamen.Terrain") %>%
leaflet::addMarkers(~collection_longitude,
~collection_latitude,
popup = glue::glue("<h2>{strain_name}</h2><hr />
<strong>collection uploaded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>substrate:</strong> {substrate}<br />
<strong>C. elegans:</strong> {`C. elegans count`}
<strong>C. briggsae:</strong> {`C. briggsae count`}
<strong>C. tropicalis:</strong> {`C. tropicalis count`}<br />
<img style='width: 10px;' img src={dir}{sample_photo1_processed_file_name}></a>"),
popupOptions(maxWidth = 500),
icon = icos[ df[[color_use]] ] )
leaflet::leaflet(data = df, width = "100%", options = list(zoomControl = T)) %>%
addProviderTiles("Stamen.Terrain") %>%
leaflet::addMarkers(~collection_longitude,
~collection_latitude,
popup = glue::glue("<h2>{strain_name}</h2><hr />
<strong>collection uploaded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>substrate:</strong> {substrate}<br />
<strong>C. elegans:</strong> {`C. elegans count`}
<strong>C. briggsae:</strong> {`C. briggsae count`}
<strong>C. tropicalis:</strong> {`C. tropicalis count`}<br />
<img style='width: 10px;' img src={'}{dir}{sample_photo1_processed_file_name}{'}></a>"),
popupOptions(maxWidth = 500),
icon = icos[ df[[color_use]] ] )
popup = glue::glue("<h2>{strain_name}</h2><hr />
<strong>collection uploaded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>substrate:</strong> {substrate}<br />
<strong>C. elegans:</strong> {`C. elegans count`}
<strong>C. briggsae:</strong> {`C. briggsae count`}
<strong>C. tropicalis:</strong> {`C. tropicalis count`}<br />
<img style='width: 10px;' img src={'}{dir}{sample_photo1_processed_file_name}{'}></a>")
glue::glue("<h2>{strain_name}</h2><hr />
<strong>collection uploaded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>substrate:</strong> {substrate}<br />
<strong>C. elegans:</strong> {`C. elegans count`}
<strong>C. briggsae:</strong> {`C. briggsae count`}
<strong>C. tropicalis:</strong> {`C. tropicalis count`}<br />
<img style='width: 10px;' img src={'}{dir}{sample_photo1_processed_file_name}{'}></a>")
glue::glue("<h2>{strain_name}</h2><hr />
<strong>collection uploaded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>substrate:</strong> {substrate}<br />
<strong>C. elegans:</strong> {`C. elegans count`}
<strong>C. briggsae:</strong> {`C. briggsae count`}
<strong>C. tropicalis:</strong> {`C. tropicalis count`}<br />
<img style='width: 10px;' img src={\'}{dir}{sample_photo1_processed_file_name}{\'}></a>")
<img style='width: 10px;' img src={'}{dir}{sample_photo1_processed_file_name}{'}></a>")
popup = glue::glue("<h2>{strain_name}</h2><hr />
<strong>collection uploaded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>substrate:</strong> {substrate}<br />
<strong>C. elegans:</strong> {`C. elegans count`}
<strong>C. briggsae:</strong> {`C. briggsae count`}
<strong>C. tropicalis:</strong> {`C. tropicalis count`}<br />
<img style='width: 10px;' img src={'}{dir}{sample_photo1_processed_file_name}{'}></a>")
glue::glue("<h2>{strain_name}</h2><hr />
<strong>collection uploaded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>substrate:</strong> {substrate}<br />
<strong>C. elegans:</strong> {`C. elegans count`}
<strong>C. briggsae:</strong> {`C. briggsae count`}
<strong>C. tropicalis:</strong> {`C. tropicalis count`}<br />
<img style='width: 10px;' img src={\'}{dir}{sample_photo1_processed_file_name}{\'}></a>")
glue::glue("<h2>{strain_name}</h2><hr />
<strong>collection uploaded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>substrate:</strong> {substrate}<br />
<strong>C. elegans:</strong> {`C. elegans count`}
<strong>C. briggsae:</strong> {`C. briggsae count`}
<strong>C. tropicalis:</strong> {`C. tropicalis count`}<br />
<img style='width: 10px;' img src='{dir}{sample_photo1_processed_file_name}'></a>")
dir <- glue::glue("{dir1}","/data/processed/fulcrum/")
dir
glue::glue("<h2>{strain_name}</h2><hr />
<strong>collection uploaded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>substrate:</strong> {substrate}<br />
<strong>C. elegans:</strong> {`C. elegans count`}
<strong>C. briggsae:</strong> {`C. briggsae count`}
<strong>C. tropicalis:</strong> {`C. tropicalis count`}<br />
<img style='width: 10px;' img src='{dir}{sample_photo1_processed_file_name}'></a>")
leaflet::leaflet(data = df, width = "100%", options = list(zoomControl = T)) %>%
addProviderTiles("Stamen.Terrain") %>%
leaflet::addMarkers(~collection_longitude,
~collection_latitude,
popup = glue::glue("<h2>{strain_name}</h2><hr />
<strong>collection uploaded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>substrate:</strong> {substrate}<br />
<strong>C. elegans:</strong> {`C. elegans count`}
<strong>C. briggsae:</strong> {`C. briggsae count`}
<strong>C. tropicalis:</strong> {`C. tropicalis count`}<br />
<img style='width: 10px;' img src='{dir}{sample_photo1_processed_file_name}'></a>"),
popupOptions(maxWidth = 500),
icon = icos[ df[[color_use]] ] )
leaflet::leaflet(data = df, width = "100%", options = list(zoomControl = T)) %>%
addProviderTiles("Stamen.Terrain") %>%
leaflet::addMarkers(~collection_longitude,
~collection_latitude,
popup = glue::glue("<h2>{strain_name}</h2><hr />
<strong>collection uploaded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>substrate:</strong> {substrate}<br />
<strong>C. elegans:</strong> {`C. elegans count`}
<strong>C. briggsae:</strong> {`C. briggsae count`}
<strong>C. tropicalis:</strong> {`C. tropicalis count`}<br />
<img style='width: 10px;' img src=''{dir}{sample_photo1_processed_file_name}''></a>"),
popupOptions(maxWidth = 500),
icon = icos[ df[[color_use]] ] )
leaflet::leaflet(data = df, width = "100%", options = list(zoomControl = T)) %>%
addProviderTiles("Stamen.Terrain") %>%
leaflet::addMarkers(~collection_longitude,
~collection_latitude,
popup = glue::glue("<h2>{strain_name}</h2><hr />
<strong>collection uploaded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>substrate:</strong> {substrate}<br />
<strong>C. elegans:</strong> {`C. elegans count`}
<strong>C. briggsae:</strong> {`C. briggsae count`}
<strong>C. tropicalis:</strong> {`C. tropicalis count`}<br />
<img style='width: 10px;' img src=''{dir}{c_label}{.svg}''></a>"),
popupOptions(maxWidth = 500),
icon = icos[ df[[color_use]] ] )
leaflet::leaflet(data = df, width = "100%", options = list(zoomControl = T)) %>%
addProviderTiles("Stamen.Terrain") %>%
leaflet::addMarkers(~collection_longitude,
~collection_latitude,
popup = glue::glue("<h2>{strain_name}</h2><hr />
<strong>collection uploaded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>substrate:</strong> {substrate}<br />
<strong>C. elegans:</strong> {`C. elegans count`}
<strong>C. briggsae:</strong> {`C. briggsae count`}
<strong>C. tropicalis:</strong> {`C. tropicalis count`}<br />
<img style='width: 10px;' img src=''{dir}{c_label}{'.svg'}''></a>"),
popupOptions(maxWidth = 500),
icon = icos[ df[[color_use]] ] )
glue::glue("<h2>{strain_name}</h2><hr />
<strong>collection uploaded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>substrate:</strong> {substrate}<br />
<strong>C. elegans:</strong> {`C. elegans count`}
<strong>C. briggsae:</strong> {`C. briggsae count`}
<strong>C. tropicalis:</strong> {`C. tropicalis count`}<br />
<img style='width: 10px;' img src=''{dir}{c_label}{'.svg'}''></a>")
leaflet::leaflet(data = df, width = "100%", options = list(zoomControl = T)) %>%
addProviderTiles("Stamen.Terrain") %>%
leaflet::addMarkers(~collection_longitude,
~collection_latitude,
popup = glue::glue("<h2>{strain_name}</h2><hr />
<strong>collection uploaded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>substrate:</strong> {substrate}<br />
<strong>C. elegans:</strong> {`C. elegans count`}
<strong>C. briggsae:</strong> {`C. briggsae count`}
<strong>C. tropicalis:</strong> {`C. tropicalis count`}<br />
<img style='width: 10px;' img src='{dir}{c_label}{'.svg'}'></a>"),
popupOptions(maxWidth = 500),
icon = icos[ df[[color_use]] ] )
leaflet::leaflet(data = df, width = "100%", options = list(zoomControl = T)) %>%
addProviderTiles("Stamen.Terrain") %>%
leaflet::addMarkers(~collection_longitude,
~collection_latitude,
popup = glue::glue("<h2>{strain_name}</h2><hr />
<strong>collection uploaded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>substrate:</strong> {substrate}<br />
<strong>C. elegans:</strong> {`C. elegans count`}
<strong>C. briggsae:</strong> {`C. briggsae count`}
<strong>C. tropicalis:</strong> {`C. tropicalis count`}<br />
<img style='width: 10px;' img src={dir}{c_label}{'.svg'}></a>"),
popupOptions(maxWidth = 500),
icon = icos[ df[[color_use]] ] )
# Target species map function
# Map_collection function for reviewing collection locations
map_target_species <- function(df, color_use) {
icos <- iconList(
red = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/red.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
),
orange = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/orange.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
),
blue = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/blue.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
)
)
df <- dplyr::filter(df, !is.na(df[[color_use]])) %>%
dplyr::mutate(substrate=ifelse(is.na(substrate), "", substrate)) %>%
dplyr::arrange(species_id)
#print(df)
# "https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}.png"
#"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}"
attach(df)
leaflet::leaflet(data = df, width = "100%", options = list(zoomControl = T)) %>%
addProviderTiles("Stamen.Terrain") %>%
leaflet::addMarkers(~collection_longitude,
~collection_latitude,
popup = glue::glue("<h2>{strain_name}</h2><hr />
<strong>collection uploaded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>substrate:</strong> {substrate}<br />
<strong>C. elegans:</strong> {`C. elegans count`}
<strong>C. briggsae:</strong> {`C. briggsae count`}
<strong>C. tropicalis:</strong> {`C. tropicalis count`}<br /></a>"),
popupOptions(maxWidth = 500),
icon = icos[ df[[color_use]] ] )
#htmlwidgets::saveWidget(m, tempfile(), selfcontained = FALSE)
#webshot::webshot("temp.html", file = "map.png",
#        cliprect = "viewport", vwidth = 1000, vheight = 1000)
}
# Make df for diagnostic plotting
target_df <- df %>%
dplyr::filter(!is.na(c_label)) %>%
dplyr::filter(species_id %in% c("Caenorhabditis elegans", "Caenorhabditis briggsae", "Caenorhabditis tropicalis")) %>%
dplyr::group_by(c_label, species_id) %>%
dplyr::mutate(species_count = n()) %>%
dplyr::mutate(`C. elegans count` = ifelse(species_id == "Caenorhabditis elegans", species_count, 0),
`C. briggsae count` = ifelse(species_id == "Caenorhabditis briggsae", species_count, 0),
`C. tropicalis count` = ifelse(species_id == "Caenorhabditis tropicalis", species_count, 0)) %>%
dplyr::ungroup() %>%
dplyr::distinct(c_label, species_id, .keep_all =T) %>%
dplyr::arrange(c_label, desc(species_count)) %>%
dplyr::group_by(c_label) %>%
dplyr::mutate(`C. elegans count` = sum(`C. elegans count`),
`C. briggsae count` = sum(`C. briggsae count`),
`C. tropicalis count` = sum(`C. tropicalis count`)) %>%
dplyr::ungroup() %>%
dplyr::distinct(c_label, .keep_all =T)
# map collection for diagnostic
target_map <-  map_target_species(target_df %>% dplyr::mutate(color = case_when(species_id == "Caenorhabditis elegans" ~ "red",
species_id == "Caenorhabditis briggsae" ~ "blue",
species_id == "Caenorhabditis tropicalis" ~ "orange")), "color")
target_map
save(final_data1, file = "~/Desktop/final_data1.rda", version = 3)
final_data1 <- load("~/Desktop/final_data1.rda")
# load fulcrum data
final_data1 <- load("~/Desktop/final_data1.rda")
df <- final_data1
df%>%dplyr::distinct(collection_by)%>%dplyr::filter(!is.na(collection_by))
View(df)
final_data1 <- load("~/Desktop/final_data1.rda")
final_data1
# load fulcrum data
saveRDS(final_data1, file = "~/Desktop/final_data1.rds", version = 3)
# load fulcrum data
#saveRDS(final_data1, file = "~/Desktop/final_data1.rds", version = 3)
final_data1 <- readRDS("~/Desktop/final_data1.rds")
df <- final_data1
df
final_data1
final_data1 <- procPhotos(dir = dir1, data = join_genofulc1, max_dim = 500, overwrite = T, CeNDR = TRUE)
saveRDS(final_data1, file = "~/Desktop/final_data1.rds", version = 3)
final_data1
rm(df)
# load fulcrum data
#saveRDS(final_data1, file = "~/Desktop/final_data1.rds", version = 3)
final_data1 <- readRDS("~/Desktop/final_data1.rds")
df <- final_data1
df
install.packages("devtools")
devtools::install_github("AndersenLab/easyfulcrum")
install.packages("devtools")
str(easyfulcrum::island)
dim(easyfulcrum::island)
?annotateFulcrum
test
# install.packages("devtools")
# devtools::install_github("AndersenLab/easyfulcrum")
library(easyfulcrum)
setwd("~/Desktop")
test <- makeSpSheet(data = join_genofulc1, target_sp = "Caenorhabditis Briggsae")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# install.packages("devtools")
# devtools::install_github("AndersenLab/easyfulcrum")
library(easyfulcrum)
setwd("~/Desktop")
makeDirStructure(startdir = "~/Desktop/",
projectdirname = "2020JanuaryHawaii")
dir1 <- "~/Desktop/2020JanuaryHawaii"
# raw_fulc1 <- readFulcrum(dir = dir1)
names(easyfulcrum::raw_fulc1)
proc_fulc1 <- procFulcrum(data = raw_fulc1)
flag1.1 <- checkTemperatures(data = proc_fulc1, return_flags = TRUE)
proc_fulc1_clean <- fixTemperatures(data = proc_fulc1,
substrate_temperature_ids = "a7db618d-44cc-4b4a-bc67-871306029274",
ambient_temperature_ids = "b1f20ae4-c5c2-426f-894a-e1f46c2fa693",
ambient_temperature_run_ids=c("dda77efe-d73c-48e9-aefb-b508e613256b",
"93de14a0-40ab-4793-8614-ab1512ab158c"))
join_fulc1 <- joinFulcrum(data = proc_fulc1)
flag1.2 <- checkJoin(data = join_fulc1, return_flags = TRUE)
anno_fulc1 <- annotateFulcrum(data = join_fulc1, dir = NULL)
# raw_geno1 <- readGenotypes(gsKey = c("1_6u4sk_Zj-Hm5d_058Lg8WYWLe7BZHGTWxXcH6EsDUI"))
head(easyfulcrum::raw_geno1)
proc_geno1 <- checkGenotypes(geno_data = raw_geno1, fulc_data = anno_fulc1,
return_geno = TRUE, return_flags = FALSE)
flag1.3 <- checkGenotypes(geno_data = raw_geno1, fulc_data = anno_fulc1,
return_geno = FALSE, return_flags = TRUE)
join_genofulc1 <- joinGenoFulc(geno = proc_geno1, fulc = anno_fulc1, dir = dir1)
#This chunk of code will move the photos required for this trial run into the appropriate folder for raw photos, according to what `dir1` is specified.
#You can also find these photos for manual download at: https://github.com/AndersenLab/easyfulcrum/tree/master/vignettes/2020JanuaryHawaii_photos
library(googledrive)
final_directory <- paste(dir1, "data/raw/fulcrum/photos", sep = "/")
temp_dir <- tempdir()
photos <- googledrive::drive_ls(as_id("11T6qzszJ_yK3yRyy4eqBfplZuai20y-g"))
photos$temp_location <- paste(temp_dir,photos$name, sep = "/")
photos$final_location <- paste(final_directory,photos$name, sep = "/")
for(i in 1:nrow(photos)){
googledrive::drive_download(as_id(photos$id[i]),
path =photos$temp_location[i],
overwrite = TRUE)
fs::file_copy(photos$temp_location[i], photos$final_location[i], overwrite = TRUE)
}
final_data1 <- procPhotos(dir = dir1, data = join_genofulc1, max_dim = 500, overwrite = T, CeNDR = TRUE)
test <- makeSpSheet(data = join_genofulc1, target_sp = "Caenorhabditis Briggsae")
test
View(test)
?makeSpSheet()
library(easyfulcrum)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# install.packages("devtools")
# devtools::install_github("AndersenLab/easyfulcrum")
library(easyfulcrum)
setwd("~/Desktop")
makeDirStructure(startdir = "~/Desktop/",
projectdirname = "2020JanuaryHawaii")
dir1 <- "~/Desktop/2020JanuaryHawaii"
# raw_fulc1 <- readFulcrum(dir = dir1)
names(easyfulcrum::raw_fulc1)
proc_fulc1 <- procFulcrum(data = raw_fulc1)
flag1.1 <- checkTemperatures(data = proc_fulc1, return_flags = TRUE)
proc_fulc1_clean <- fixTemperatures(data = proc_fulc1,
substrate_temperature_ids = "a7db618d-44cc-4b4a-bc67-871306029274",
ambient_temperature_ids = "b1f20ae4-c5c2-426f-894a-e1f46c2fa693",
ambient_temperature_run_ids=c("dda77efe-d73c-48e9-aefb-b508e613256b",
"93de14a0-40ab-4793-8614-ab1512ab158c"))
join_fulc1 <- joinFulcrum(data = proc_fulc1)
flag1.2 <- checkJoin(data = join_fulc1, return_flags = TRUE)
anno_fulc1 <- annotateFulcrum(data = join_fulc1, dir = NULL)
# raw_geno1 <- readGenotypes(gsKey = c("1_6u4sk_Zj-Hm5d_058Lg8WYWLe7BZHGTWxXcH6EsDUI"))
head(easyfulcrum::raw_geno1)
proc_geno1 <- checkGenotypes(geno_data = raw_geno1, fulc_data = anno_fulc1,
return_geno = TRUE, return_flags = FALSE)
flag1.3 <- checkGenotypes(geno_data = raw_geno1, fulc_data = anno_fulc1,
return_geno = FALSE, return_flags = TRUE)
join_genofulc1 <- joinGenoFulc(geno = proc_geno1, fulc = anno_fulc1, dir = dir1)
#This chunk of code will move the photos required for this trial run into the appropriate folder for raw photos, according to what `dir1` is specified.
#You can also find these photos for manual download at: https://github.com/AndersenLab/easyfulcrum/tree/master/vignettes/2020JanuaryHawaii_photos
library(googledrive)
final_directory <- paste(dir1, "data/raw/fulcrum/photos", sep = "/")
temp_dir <- tempdir()
photos <- googledrive::drive_ls(as_id("11T6qzszJ_yK3yRyy4eqBfplZuai20y-g"))
photos$temp_location <- paste(temp_dir,photos$name, sep = "/")
photos$final_location <- paste(final_directory,photos$name, sep = "/")
for(i in 1:nrow(photos)){
googledrive::drive_download(as_id(photos$id[i]),
path =photos$temp_location[i],
overwrite = TRUE)
fs::file_copy(photos$temp_location[i], photos$final_location[i], overwrite = TRUE)
}
final_data1 <- procPhotos(dir = dir1, data = join_genofulc1, max_dim = 500, overwrite = T, CeNDR = TRUE)
test <- makeSpSheet(data = join_genofulc1,
target_sp = "Caenorhabditis Briggsae", dir = dir1)
data <- join_genofulc1
target_sp <- "Caenorhabditis briggsae"
dir <- dir1
# select and rename data
dir <- glue::glue("{dir}","/data/reports")
dir
sp_data <- data %>%
dplyr::filter(!is.na(strain_name)) %>%
dplyr::distinct(strain_name, .keep_all = TRUE) %>%
dplyr::select(project,
species_id,
strain_name,
previous_names = s_label,
collection_latitude,
collection_longitude,
landscape,
collection_location,
collection_island,
collection_trail,
substrate,
substrate_notes,
substrate_other,
proc_substrate_temperature,
proc_ambient_temperature,
ambient_humidity,
collection_by,
isolation_by,
collection_date_UTC) %>%
dplyr::mutate(species_id_method = "ITS2",
isotype = NA_character_,
release = as.numeric(NA),
source_lab = stringr::str_extract(strain_name, pattern = "^[A-Z]{2,4}"),
associated_organism = NA_character_,
inbreeding_state = NA_character_,
sampling_date_comments = NA_character_,
notes = glue::glue("Fulcrum collection {project}"),
set = as.numeric(NA),
issues = NA_character_,
issue_notes = NA_character_,
isotype_ref_strain = NA_character_,
wgs_seq = NA_character_,
substrate_comments = glue::glue("{substrate_notes}{substrate_other}", .na = "", .sep = ","),
locality_description = glue::glue("{collection_location}, {collection_island}, {collection_trail}"),
locality_description = stringr::str_replace_all(locality_description, pattern = "NA, |, NA", replacement = "")) %>%
dplyr::select(species = species_id,
species_id_method,
strain = strain_name,
isotype,
previous_names,
release,
source_lab,
latitude = collection_latitude,
longitude = collection_longitude,
landscape,
locality_description,
substrate,
substrate_comments,
substrate_temp = proc_substrate_temperature,
ambient_temp = proc_ambient_temperature,
ambient_humidity = ambient_humidity,
associated_organism,
inbreeding_state,
sampled_by = collection_by,
isolated_by = isolation_by,
sampling_date = collection_date_UTC,
sampling_date_comments,
notes,
set,
issues,
issue_notes,
isotype_ref_strain,
wgs_seq)
sp_data
glue::glue("{dir}","spSheet.csv")
dir <- dir1
dir
glue::glue("{dir}","/reports/spSheet.csv")
library(easyfulcrum)
test
getwd()
