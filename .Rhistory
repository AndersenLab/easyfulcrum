#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_colour_grey()
ggsave("results/PCA_merged.pdf")
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_colour_grey()
ggsave("results/PCA_merged.pdf")
#PCA plot
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_colour_grey() + theme_bw()
ggsave("results/PCA_merged.pdf")
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_colour_grey(start = 0.4) + theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_colour_grey(start = 0.6) + theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_colour_grey(start = 0.1) + theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_colour_grey(start = 0.1, end = .6) + theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
#PCA plot
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_colour_grey(start = 0.2, end = 0.8) + theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggsave("results/PCA_merged1.pdf")
#PCA plot
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_colour_grey(start = 0.1, end = 0.9) + theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
#PCA plot
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_colour_grey(start = 0.4, end = 0.8) + theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
#PCA plot
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_colour_grey(start = 0.2, end = 0.6) + theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggsave("results/PCA_merged2.pdf")
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() +  scale_color_viridis(discrete = TRUE, option = "D") + theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggsave("results/PCA_merged1.pdf")
library("ggsci")
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_color_jco() + theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggsave("results/PCA_merged2.pdf")
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_colour_manual(values=cbp1) + theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggsave("results/PCA_merged3.pdf")
cbp1 <- c("#999999", "#E69F00", "#56B4E9", "#009E73",
"#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_colour_manual(values=cbp1) + theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggsave("results/PCA_merged3.pdf")
#PCA plot
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_color_manual(values = c("#00AFBB", "#E7B800", "#FC4E07")) + theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggsave("results/PCA_merged4.pdf")
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_color_brewer(palette = "Dark2") + theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggsave("results/PCA_merged4.pdf")
library(easyfulcrum)
# install.packages("devtools")
# devtools::install_github("AndersenLab/easyfulcrum")
library(easyfulcrum)
setwd("~/Desktop")
makeDirStructure(startdir = "~/Desktop/",
projectdirname = "2020FebruaryAustralia")
# note for Tim + Erik: after running this you should add the photos to the appropriate subfolder
# install.packages("devtools")
# devtools::install_github("AndersenLab/easyfulcrum")
library(easyfulcrum)
setwd("~/Desktop")
makeDirStructure(startdir = "~/Desktop/",
projectdirname = "2020FebruaryAustralia")
# note for Tim + Erik: after running this you should add the photos to the appropriate subfolder
dir1 <- "~/Desktop/2020FebruaryAustralia"
# raw_data1 <- readFulcrum(dir = dir1)
names(raw_data1)
proc_data1 <- procFulcrum(data = raw_data1)
#checkParameters(data = proc_data1)
flag1.1 <- checkParameters(data = proc_data1, return = TRUE)
flag1.1
proc_data1_clean <- fixParameters(data = proc_data1,
substrate_temperature_ids = "fe28600b-c78a-4545-a525-28dfb3e5d84c",
ambient_temperature_ids = "e088d373-6f4a-48c3-b672-2f6a43747595",
ambient_temperature_run_ids =c("fb975ace-0036-4a80-b073-8ff638f35786",
"c9313751-3f96-41f6-9d5e-b8dc994f5edb"))
checkParameters(data = proc_data1_clean)
join_data1 <- joinFulcrum(data = proc_data1)
#checkJoin(data = join_data1)
flag1.2 <- checkJoin(data = join_data1, return = TRUE)
View(flag1.2)
anno_data1 <- annotateFulcrum(data = join_data1)
#geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
head(geno_data1)
proc_geno_data1 <- checkGenotypes(geno_data = geno_data1, fulc_data = anno_data1, return = FALSE)
joingeno_data1 <- joinGenoFulc(geno = proc_geno_data1, fulc = anno_data1, dir = dir1)
test <- makeSpSheet(data = joingeno_data1, target_sp = "Caenorhabditis tropicalis")
install.packages("tidyverse")
install.packages("rebus")
install.packages("lutz")
install.packages("googlesheets4")
install.packages("imager")
install.packages("imager")
install.packages("tiff")
version()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# install.packages("devtools")
# devtools::install_github("AndersenLab/easyfulcrum")
library(easyfulcrum)
setwd("~/Desktop")
dir1 <- "~/Desktop/2020JanuaryHawaii"
raw_fulc1 <- readFulcrum(dir = dir1)
#names(easyfulcrum::raw_fulc1)
proc_fulc1 <- procFulcrum(data = raw_fulc1)
#checkParameters(data = proc_fulc1)
flag1.1 <- checkTemperatures(data = proc_fulc1, return_flags = TRUE)
proc_fulc1_clean <- fixTemperatures(data = proc_fulc1,
substrate_temperature_ids = "fe28600b-c78a-4545-a525-28dfb3e5d84c",
ambient_temperature_ids = "e088d373-6f4a-48c3-b672-2f6a43747595",
ambient_temperature_run_ids =c("fb975ace-0036-4a80-b073-8ff638f35786",
"c9313751-3f96-41f6-9d5e-b8dc994f5edb"))
checkTemperatures(data = proc_fulc1_clean)
join_fulc1 <- joinFulcrum(data = proc_fulc1)
#checkJoin(data = join_data1)
flag1.2 <- checkJoin(data = join_fulc1, return_flags = TRUE)
head(easyfulcrum::island)
head(easyfulcrum::location)
head(easyfulcrum::trails)
anno_fulc1 <- annotateFulcrum(data = join_fulc1)
raw_geno1 <- readGenotypes(gsKey = c("1_6u4sk_Zj-Hm5d_058Lg8WYWLe7BZHGTWxXcH6EsDUI"))
# head(easyfulcrum::raw_geno1)
proc_geno1 <- checkGenotypes(geno_data = raw_geno1, fulc_data = anno_fulc1,
return_geno = TRUE, return_flags = FALSE)
flag1.3 <- checkGenotypes(geno_data = raw_geno1, fulc_data = anno_fulc1,
return_geno = FALSE, return_flags = TRUE)
final_data1 <- procPhotos(dir = dir1, data = join_genofulc1, max_dim = 500, overwrite = T, CeNDR = TRUE)
join_genofulc1 <- joinGenoFulc(geno = proc_geno1, fulc = anno_fulc1, dir = dir1)
final_data1 <- procPhotos(dir = dir1, data = join_genofulc1, max_dim = 500, overwrite = T, CeNDR = TRUE)
test <- makeSpSheet(data = join_genofulc1, target_sp = "Caenorhabditis Briggsae")
# load packages
library(tidyverse)
library(ggmap)
library(memoise)
library(lubridate)
library(cowplot)
library(pals)
library(grid)
library(gridExtra)
library(scales)
library(kableExtra)
library(leaflet)
library(htmlwidgets)
library(htmltools)
#setting working directory
knitr::opts_knit$set(root.dir = '..')
test
final_data1
# load fulcrum data
df <- final_data1
# pull names of personnel
collectors <- pull(df%>%dplyr::distinct(collection_by)%>%dplyr::filter(!is.na(collection_by)))
isolators <- pull(df%>%dplyr::distinct(isolation_by)%>%dplyr::filter(!is.na(isolation_by)))
# make personnel dataframe
personnel_collectors <- data.frame(collectors)
personnel_isolators <- data.frame(isolators)
# print nice tables
knitr::kable(personnel_collectors)
knitr::kable(personnel_isolators)
personnel_collectors
personnel_isolators
# Find counts
collection_counts_1 <- df %>%
dplyr::distinct(c_label, .keep_all = TRUE) %>%
#dplyr::mutate(`total number of distinct collections` = n()) %>%
dplyr::filter(!is.na(c_label)) %>%
dplyr::mutate(`total number of distinct collections` = n()) %>%
dplyr::add_count(worms_on_sample) %>%
dplyr::rename(worms_on_sample_counts = n) %>%
dplyr::select(worms_on_sample, `total number of distinct collections`:worms_on_sample_counts) %>%
dplyr::distinct(worms_on_sample, .keep_all = T)
# find more counts
`total number of distinct collections` <- pull(collection_counts_1 %>% distinct(`total number of distinct collections`))
#`total number of distinct collections NAs removed` <- pull(collection_counts_1 %>% distinct(`total number of distinct collections NAs removed`))
`collections with nematodes` <- pull(collection_counts_1 %>% dplyr::filter(worms_on_sample == "Yes") %>% distinct(`worms_on_sample_counts`))
`collections with tracks only` <- pull(collection_counts_1 %>% dplyr::filter(worms_on_sample == "Tracks") %>% distinct(`worms_on_sample_counts`))
`collections without nematodes`<- pull(collection_counts_1 %>% dplyr::filter(worms_on_sample == "No") %>% distinct(`worms_on_sample_counts`))
#`collections without paired isolation data`<- pull(collection_counts_1 %>% dplyr::filter(worms_on_sample == "?") %>% distinct(`worms_on_sample_counts`))
#`collections with NA for colleciton id` <- pull(df %>% dplyr::filter(is.na(c_label)) %>% dplyr::mutate(n = n()) %>% dplyr::distinct(n))
# find duplicate c_labels
# `collections with duplicated ids` <-  df %>%
#   dplyr::filter(!is.na(c_label)) %>%
#   dplyr::distinct(c_label, isolation_datetime_UTC, .keep_all = T) %>%
#   dplyr::group_by(c_label) %>%
#   dplyr::mutate(n = n()) %>%
#   dplyr::ungroup() %>%
#   dplyr::mutate(duplicated = ifelse(n > 1, 1, 0)) %>%
#   dplyr::mutate(num_duplicated = sum(duplicated)) %>%
#   dplyr::distinct(num_duplicated) %>%
#   pull(num_duplicated)
# Find counts for location and altitude methods
collection_counts_2 <-  df %>%
dplyr::filter(!is.na(c_label)) %>%
dplyr::distinct(c_label, .keep_all =T) %>%
dplyr::add_count(collection_lat_long_method) %>%
dplyr::rename(`location method n` = n) %>%
dplyr::add_count(collection_altitude_method) %>%
dplyr::rename(`altitude method n` = n) %>%
dplyr::select(collection_lat_long_method, `location method n`, collection_altitude_method, `altitude method n`)
`collections with location method 'photo'` <- collection_counts_2 %>% dplyr::filter(collection_lat_long_method == "photo") %>%
dplyr::distinct(`location method n`) %>% pull(unique(`location method n`))
`collection percentage with loc method 'photo'` <- (`collections with location method 'photo'` / `total number of distinct collections`)
`collections with location method 'fulcrum'` <- collection_counts_2 %>% dplyr::filter(collection_lat_long_method == "fulcrum") %>%
dplyr::distinct(`location method n`) %>% pull(unique(`location method n`))
`collection percentage with loc method 'fulcrum'` <- (`collections with location method 'fulcrum'` / `total number of distinct collections`)
`collections with altitude method 'photo'` <- collection_counts_2 %>% dplyr::filter(collection_altitude_method == "photo") %>%
dplyr::distinct(`altitude method n`) %>% pull(unique(`altitude method n`))
`collection percentage with altitude method 'photo'` <- (`collections with altitude method 'photo'` / `total number of distinct collections`)
`collections with altitude method 'fulcrum'` <- collection_counts_2 %>% dplyr::filter(collection_altitude_method == "fulcrum") %>%
dplyr::distinct(`altitude method n`) %>% pull(unique(`altitude method n`))
`collection percentage with altitude method 'fulcrum'` <- (`collections with altitude method 'fulcrum'` / `total number of distinct collections`)
# build data frame to display
collection_counts <- tibble(`total number of distinct collections`,
#`total number of distinct collections NAs removed`,
`collections with nematodes`,
`collections with tracks only`,
`collections without nematodes`) %>%
dplyr::mutate(`collection percentage with nematodes` = (`collections with nematodes`/`total number of distinct collections`),
`collection percentage with tracks only` = (`collections with tracks only`/`total number of distinct collections`),
`collection percentage with no worms` = (`collections without nematodes`/`total number of distinct collections`)) %>%
dplyr::bind_cols(list(#`collections with duplicated ids`,
#`collections with NA for colleciton id`,
#`collections without paired isolation data`,
`collections with location method 'photo'`,
`collections with location method 'fulcrum'`,
`collection percentage with loc method 'photo'`,
`collection percentage with loc method 'fulcrum'`,
`collections with altitude method 'photo'`,
`collections with altitude method 'fulcrum'`,
`collection percentage with altitude method 'photo'`,
`collection percentage with altitude method 'fulcrum'`)) %>%
dplyr::rename(#`collections with duplicated ids` = V1,
#`collections with NA for colleciton id` = V2,
#`collections without paired isolation data` = V3,
`collections with location method 'photo'` = V1,
`collections with location method 'fulcrum'` = V2,
`collection percentage with loc method 'photo'` = V3,
`collection percentage with loc method 'fulcrum'` = V4,
`collections with altitude method 'photo'` = V5,
`collections with altitude method 'fulcrum'` = V6,
`collection percentage with altitude method 'photo'` = V7,
`collection percentage with altitude method 'fulcrum'` = V8) %>%
tidyr::gather(`collection report`, value) %>%
dplyr::mutate(value = as.numeric(value)) %>%
# if percentage in type then display as percentage
dplyr::mutate(value = ifelse(str_detect(`collection report`, pattern = "percentage"), percent(value, scale = 100, accuracy = .1, trim = T), as.integer(value)))
collection_counts <- tibble(`total number of distinct collections`,
#`total number of distinct collections NAs removed`,
`collections with nematodes`,
`collections with tracks only`,
`collections without nematodes`)
View(collection_counts)
# build data frame to display
collection_counts <- tibble(`total number of distinct collections`,
#`total number of distinct collections NAs removed`,
`collections with nematodes`,
`collections with tracks only`,
`collections without nematodes`) %>%
dplyr::mutate(`collection percentage with nematodes` = (`collections with nematodes`/`total number of distinct collections`),
`collection percentage with tracks only` = (`collections with tracks only`/`total number of distinct collections`),
`collection percentage with no worms` = (`collections without nematodes`/`total number of distinct collections`))
collection_counts <- tibble(`total number of distinct collections`,
#`total number of distinct collections NAs removed`,
`collections with nematodes`,
`collections with tracks only`,
`collections without nematodes`) %>%
dplyr::mutate(`collection percentage with nematodes` = (`collections with nematodes`/`total number of distinct collections`),
`collection percentage with tracks only` = (`collections with tracks only`/`total number of distinct collections`),
`collection percentage with no worms` = (`collections without nematodes`/`total number of distinct collections`)) %>%
dplyr::bind_cols(list(#`collections with duplicated ids`,
#`collections with NA for colleciton id`,
#`collections without paired isolation data`,
`collections with location method 'photo'`,
`collections with location method 'fulcrum'`,
`collection percentage with loc method 'photo'`,
`collection percentage with loc method 'fulcrum'`,
`collections with altitude method 'photo'`,
`collections with altitude method 'fulcrum'`,
`collection percentage with altitude method 'photo'`,
`collection percentage with altitude method 'fulcrum'`))
collection_counts <- tibble(`total number of distinct collections`,
#`total number of distinct collections NAs removed`,
`collections with nematodes`,
`collections with tracks only`,
`collections without nematodes`) %>%
dplyr::mutate(`collection percentage with nematodes` = (`collections with nematodes`/`total number of distinct collections`),
`collection percentage with tracks only` = (`collections with tracks only`/`total number of distinct collections`),
`collection percentage with no worms` = (`collections without nematodes`/`total number of distinct collections`))
dplyr::bind_cols(list(#`collections with duplicated ids`,
#`collections with NA for colleciton id`,
#`collections without paired isolation data`,
`collections with location method 'photo'`,
`collections with location method 'fulcrum'`,
`collection percentage with loc method 'photo'`,
`collection percentage with loc method 'fulcrum'`,
`collections with altitude method 'photo'`,
`collections with altitude method 'fulcrum'`,
`collection percentage with altitude method 'photo'`,
`collection percentage with altitude method 'fulcrum'`))
list(#`collections with duplicated ids`,
#`collections with NA for colleciton id`,
#`collections without paired isolation data`,
`collections with location method 'photo'`,
`collections with location method 'fulcrum'`,
`collection percentage with loc method 'photo'`,
`collection percentage with loc method 'fulcrum'`,
`collections with altitude method 'photo'`,
`collections with altitude method 'fulcrum'`,
`collection percentage with altitude method 'photo'`,
`collection percentage with altitude method 'fulcrum'`)
collection_counts <- tibble(`total number of distinct collections`,
#`total number of distinct collections NAs removed`,
`collections with nematodes`,
`collections with tracks only`,
`collections without nematodes`) %>%
dplyr::mutate(`collection percentage with nematodes` = (`collections with nematodes`/`total number of distinct collections`),
`collection percentage with tracks only` = (`collections with tracks only`/`total number of distinct collections`),
`collection percentage with no worms` = (`collections without nematodes`/`total number of distinct collections`)) %>%
dplyr::bind_cols(list(#`collections with duplicated ids`,
#`collections with NA for colleciton id`,
#`collections without paired isolation data`,
`collections with location method 'photo'`,
`collections with location method 'fulcrum'`,
`collection percentage with loc method 'photo'`,
`collection percentage with loc method 'fulcrum'`,
`collections with altitude method 'photo'`,
`collections with altitude method 'fulcrum'`,
`collection percentage with altitude method 'photo'`,
`collection percentage with altitude method 'fulcrum'`))
`collections with location method 'photo'`
bind_cols(list(#`collections with duplicated ids`,
#`collections with NA for colleciton id`,
#`collections without paired isolation data`,
`collections with location method 'photo'`,
`collections with location method 'photo'`,
`collection percentage with loc method 'photo'`,
`collection percentage with loc method 'fulcrum'`,
`collections with altitude method 'photo'`,
`collections with altitude method 'fulcrum'`,
`collection percentage with altitude method 'photo'`,
`collection percentage with altitude method 'fulcrum'`))
list(#`collections with duplicated ids`,
#`collections with NA for colleciton id`,
#`collections without paired isolation data`,
`collections with location method 'photo'`,
`collections with location method 'photo'`,
`collection percentage with loc method 'photo'`,
`collection percentage with loc method 'fulcrum'`,
`collections with altitude method 'photo'`,
`collections with altitude method 'fulcrum'`,
`collection percentage with altitude method 'photo'`,
`collection percentage with altitude method 'fulcrum'`)
unlist(list(#`collections with duplicated ids`,
#`collections with NA for colleciton id`,
#`collections without paired isolation data`,
`collections with location method 'photo'`,
`collections with location method 'photo'`,
`collection percentage with loc method 'photo'`,
`collection percentage with loc method 'fulcrum'`,
`collections with altitude method 'photo'`,
`collections with altitude method 'fulcrum'`,
`collection percentage with altitude method 'photo'`,
`collection percentage with altitude method 'fulcrum'`))
list(#`collections with duplicated ids`,
#`collections with NA for colleciton id`,
#`collections without paired isolation data`,
`collections with location method 'photo'`,
`collections with location method 'photo'`,
`collection percentage with loc method 'photo'`,
`collection percentage with loc method 'fulcrum'`,
`collections with altitude method 'photo'`,
`collections with altitude method 'fulcrum'`,
`collection percentage with altitude method 'photo'`,
`collection percentage with altitude method 'fulcrum'`)
`collection percentage with altitude method 'fulcrum'`
collection_counts_2 <-  df %>%
dplyr::filter(!is.na(c_label)) %>%
dplyr::distinct(c_label, .keep_all =T) %>%
dplyr::add_count(collection_lat_long_method) %>%
dplyr::rename(`location method n` = n) %>%
dplyr::add_count(collection_altitude_method) %>%
dplyr::rename(`altitude method n` = n) %>%
dplyr::select(collection_lat_long_method, `location method n`, collection_altitude_method, `altitude method n`)
collection_counts_2
View(collection_counts_2)
`collections with location method 'photo'`
`collections with location method 'fulcrum'` <- collection_counts_2 %>% dplyr::filter(collection_lat_long_method == "fulcrum") %>%
dplyr::distinct(`location method n`) %>% pull(unique(`location method n`))
`collection percentage with loc method 'fulcrum'` <- (`collections with location method 'fulcrum'` / `total number of distinct collections`)
`collections with location method 'fulcrum'`
collection_counts_2 %>% dplyr::filter(collection_lat_long_method == "fulcrum")
collection_counts_2 %>% dplyr::filter(collection_lat_long_method == "fulcrum") %>%
dplyr::distinct(`location method n`)
`collections with location method 'fulcrum'` <- collection_counts_2 %>% dplyr::filter(collection_lat_long_method == "fulcrum") %>%
dplyr::distinct(`location method n`)
`collections with location method 'fulcrum'`
`collections with location method 'photo'` <- collection_counts_2 %>% dplyr::filter(collection_lat_long_method == "photo") %>%
dplyr::distinct(`location method n`)
`collections with location method 'photo'`
collection_counts_2 %>% dplyr::filter(collection_lat_long_method == "fulcrum") %>%
dplyr::distinct(`location method n`)
`collections with location method 'fulcrum'` <- collection_counts_2 %>% dplyr::filter(collection_lat_long_method == "fulcrum") %>%
dplyr::distinct(`location method n`)
`collections with location method 'fulcrum'`
?distinct
`collections with location method 'fulcrum'` <- collection_counts_2 %>% dplyr::filter(collection_lat_long_method == "fulcrum")
?distinct
`collections with location method 'fulcrum'`
`total number of distinct collections`
collection_counts_1
View(collection_counts_1)
