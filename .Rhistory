#altitude_methods_range,
landscape,
sky_view,
substrate,
substrate_other,
substrate_notes,
sample_photo_url,
gridsect,
gridsect_index,
grid_sect_direction,
gridsect_radius,
isolation_by,
isolation_datetime_UTC,
isolation_date_UTC,
isolation_local_time,
isolation_latitude,
isolation_longitude,
worms_on_sample,
proliferation_48,
proliferation_168,
proliferating,
approximate_number_of_worms,
shipment_number,
pcr_product_its2,
pcr_product_ssu,
general_notes,
manual_blast_notes,
possible_new_caeno_sp,
make_strain_name,
reason_strain_not_named)
}
# load blast results
blast_results <- read_tsv(blast)
print(paste0("loading blast results from", blast))
# Join genotyping sheet with collection and isolation data
out_dat <- fulc %>%
dplyr::full_join(geno) %>%
# Rename variables
dplyr::rename(project_fulc = project,
collection_id = c_label,
isolation_id = s_label) %>%
# Reorder variables
dplyr::select(project_geno,
project_fulc,
collection_id,
isolation_id,
species_id,
ECA_dirty,
ECA_clean,
collection_by,
collection_datetime_UTC,
collection_date_UTC,
collection_local_time,
collection_island,
collection_location,
collection_trail,
collection_latitude,
collection_longitude,
collection_fulcrum_latitude,
collection_fulcrum_longitude,
collection_lat_long_method,
collection_lat_long_method_diff,
ambient_temperature,
flag_ambient_temperature_run,
ambient_humidity,
substrate_temperature,
altitude,
altitude_method,
#altitude_methods_range,
landscape,
sky_view,
substrate,
substrate_other,
substrate_notes,
sample_photo_url,
gridsect,
gridsect_index,
grid_sect_direction,
gridsect_radius,
isolation_by,
isolation_datetime_UTC,
isolation_date_UTC,
isolation_local_time,
isolation_latitude,
isolation_longitude,
worms_on_sample,
proliferation_48,
proliferation_168,
proliferating,
approximate_number_of_worms,
shipment_number,
pcr_product_its2,
pcr_product_ssu,
general_notes,
manual_blast_notes,
possible_new_caeno_sp,
make_strain_name,
reason_strain_not_named)
}
# test joinFulcGeno function to join genotype data to fulcrum data
project_data <- joinFulcGeno(fulc = aus2020feb, geno = genotype_data3)
# test joinFulcGeno function to join genotype data to fulcrum data
project_data <- joinFulcGeno(fulc = aus2020feb, geno = genotype_data3, blast = NULL)
joinFulcGeno <- function(fulc, geno, blast = NULL) {
if(is.null(blast)){
# Join genotyping sheet with collection and isolation data
# Join genotyping sheet with collection and isolation data
out_dat <- fulc %>%
dplyr::full_join(geno) %>%
# Rename variables
dplyr::rename(project_fulc = project,
collection_id = c_label,
isolation_id = s_label) %>%
# Reorder variables
dplyr::select(project_geno,
project_fulc,
collection_id,
isolation_id,
species_id,
ECA_dirty,
ECA_clean,
collection_by,
collection_datetime_UTC,
collection_date_UTC,
collection_local_time,
collection_island,
collection_location,
collection_trail,
collection_latitude,
collection_longitude,
collection_fulcrum_latitude,
collection_fulcrum_longitude,
collection_lat_long_method,
collection_lat_long_method_diff,
ambient_temperature,
flag_ambient_temperature_run,
ambient_humidity,
substrate_temperature,
altitude,
altitude_method,
#altitude_methods_range,
landscape,
sky_view,
substrate,
substrate_other,
substrate_notes,
sample_photo_url,
gridsect,
gridsect_index,
grid_sect_direction,
gridsect_radius,
isolation_by,
isolation_datetime_UTC,
isolation_date_UTC,
isolation_local_time,
isolation_latitude,
isolation_longitude,
worms_on_sample,
proliferation_48,
proliferation_168,
proliferating,
approximate_number_of_worms,
shipment_number,
pcr_product_its2,
pcr_product_ssu,
general_notes,
manual_blast_notes,
possible_new_caeno_sp,
make_strain_name,
reason_strain_not_named)
}
# load blast results
# blast_results <- read_tsv(blast)
# print(paste0("loading blast results from", blast))
# Join genotyping sheet with collection and isolation data
out_dat <- fulc %>%
dplyr::full_join(geno) %>%
# Rename variables
dplyr::rename(project_fulc = project,
collection_id = c_label,
isolation_id = s_label) %>%
# Reorder variables
dplyr::select(project_geno,
project_fulc,
collection_id,
isolation_id,
species_id,
ECA_dirty,
ECA_clean,
collection_by,
collection_datetime_UTC,
collection_date_UTC,
collection_local_time,
collection_island,
collection_location,
collection_trail,
collection_latitude,
collection_longitude,
collection_fulcrum_latitude,
collection_fulcrum_longitude,
collection_lat_long_method,
collection_lat_long_method_diff,
ambient_temperature,
flag_ambient_temperature_run,
ambient_humidity,
substrate_temperature,
altitude,
altitude_method,
#altitude_methods_range,
landscape,
sky_view,
substrate,
substrate_other,
substrate_notes,
sample_photo_url,
gridsect,
gridsect_index,
grid_sect_direction,
gridsect_radius,
isolation_by,
isolation_datetime_UTC,
isolation_date_UTC,
isolation_local_time,
isolation_latitude,
isolation_longitude,
worms_on_sample,
proliferation_48,
proliferation_168,
proliferating,
approximate_number_of_worms,
shipment_number,
pcr_product_its2,
pcr_product_ssu,
general_notes,
manual_blast_notes,
possible_new_caeno_sp,
make_strain_name,
reason_strain_not_named)
}
# test joinFulcGeno function to join genotype data to fulcrum data
project_data <- joinFulcGeno(fulc = aus2020feb, geno = genotype_data3, blast = NULL)
library(easyfulcrum)
# testing functions
library(tidyverse)
# setup test directory for multi project Fulcrum export
test_dir1 <- "~/Dropbox/AndersenLab/LabFolders/Tim/projects/wild_isolates/data/fulcrum/20200515_fulcrum_data"
# test functions from multi project Fulcrum export
loadFulcrum(test_dir1)
fulcrum_data1 <- procFulcrum(test_dir1)
# setup test directories for single project Fulcrum exports
test_dir2 <- "~/repos/20191201_Hawaii/data/fulcrum"
test_dir3 <- "~/repos/2020FebruaryAustralia/data/fulcrum"
loadFulcrum(test_dir2) # dec hawaii
loadFulcrum(test_dir3) # feb australia
# test procFulcrum function to load and process Fulcrum data
hi2019dec <- procFulcrum(test_dir2)
aus2020feb <- procFulcrum(test_dir3)
# read in genotype data for 2 single projects with loadGenotypes function
genotype_data23 <- loadGenotypes(gsKey = c("1jLmludjZX8_jy1RQ_DPMQ3k-3eZ30GtCAW6LEj_YSVw", "14xvEXbKVej7gnPPaHtCcEHDc6xLbRPfN9ESLXOSLw58")) %>%
dplyr::mutate(project_geno = ifelse(project_geno == "test1", "2019DecemberHawaii",
ifelse(project_geno == "test2", "2020FebruarayAustralia", NA)))
genotype_data3 <- loadGenotypes(gsKey = c("14xvEXbKVej7gnPPaHtCcEHDc6xLbRPfN9ESLXOSLw58")) %>%
dplyr::mutate(project_geno = ifelse(project_geno == "test2", "2020FebruarayAustralia", NA))
genotype_data3 <- loadGenotypes(gsKey = c("14xvEXbKVej7gnPPaHtCcEHDc6xLbRPfN9ESLXOSLw58")) %>%
dplyr::mutate(project_geno = ifelse(project_geno == "test2", "2020FebruarayAustralia", NA))
genotype_data3 <- loadGenotypes(gsKey = c("14xvEXbKVej7gnPPaHtCcEHDc6xLbRPfN9ESLXOSLw58")) %>%
dplyr::mutate(project_geno = ifelse(project_geno == "test2", "2020FebruarayAustralia", NA))
# test joinFulcGeno function to join genotype data to fulcrum data
project_data <- joinFulcGeno(fulc = aus2020feb, geno = genotype_data3)
library(easyfulcrum)
# setup test directory for multi project Fulcrum export
test_dir1 <- "~/Dropbox/AndersenLab/LabFolders/Tim/projects/wild_isolates/data/fulcrum/20200515_fulcrum_data"
# test functions from multi project Fulcrum export
loadFulcrum(test_dir1)
fulcrum_data1 <- procFulcrum(test_dir1)
# setup test directories for single project Fulcrum exports
test_dir2 <- "~/repos/20191201_Hawaii/data/fulcrum"
test_dir3 <- "~/repos/2020FebruaryAustralia/data/fulcrum"
loadFulcrum(test_dir2) # dec hawaii
loadFulcrum(test_dir3) # feb australia
# test procFulcrum function to load and process Fulcrum data
hi2019dec <- procFulcrum(test_dir2)
aus2020feb <- procFulcrum(test_dir3)
# read in genotype data for 2 single projects with loadGenotypes function
genotype_data23 <- loadGenotypes(gsKey = c("1jLmludjZX8_jy1RQ_DPMQ3k-3eZ30GtCAW6LEj_YSVw", "14xvEXbKVej7gnPPaHtCcEHDc6xLbRPfN9ESLXOSLw58")) %>%
dplyr::mutate(project_geno = ifelse(project_geno == "test1", "2019DecemberHawaii",
ifelse(project_geno == "test2", "2020FebruarayAustralia", NA)))
genotype_data3 <- loadGenotypes(gsKey = c("14xvEXbKVej7gnPPaHtCcEHDc6xLbRPfN9ESLXOSLw58")) %>%
dplyr::mutate(project_geno = ifelse(project_geno == "test2", "2020FebruarayAustralia", NA))
# test joinFulcGeno function to join genotype data to fulcrum data
project_data <- joinFulcGeno(fulc = aus2020feb, geno = genotype_data3)
# test joinFulcGeno function to join genotype data to fulcrum data
project_data <- joinFulcGeno(fulc = aus2020feb, geno = genotype_data3)
# testing functions
library(tidyverse)
# test joinFulcGeno function to join genotype data to fulcrum data
project_data <- joinFulcGeno(fulc = aus2020feb, geno = genotype_data3)
# test joinFulcGeno function to join genotype data to fulcrum data
project_data <- joinFulcGeno(fulc = aus2020feb, geno = genotype_data3)
project_data <- joinFulcGeno(fulc = aus2020feb, geno = genotype_data3)
library(easyfulcrum)
# testing functions
library(tidyverse)
# setup test directory for multi project Fulcrum export
test_dir1 <- "~/Dropbox/AndersenLab/LabFolders/Tim/projects/wild_isolates/data/fulcrum/20200515_fulcrum_data"
# test functions from multi project Fulcrum export
loadFulcrum(test_dir1)
fulcrum_data1 <- procFulcrum(test_dir1)
# setup test directories for single project Fulcrum exports
test_dir2 <- "~/repos/20191201_Hawaii/data/fulcrum"
test_dir3 <- "~/repos/2020FebruaryAustralia/data/fulcrum"
loadFulcrum(test_dir2) # dec hawaii
loadFulcrum(test_dir3) # feb australia
# test procFulcrum function to load and process Fulcrum data
hi2019dec <- procFulcrum(test_dir2)
aus2020feb <- procFulcrum(test_dir3)
genotype_data3 <- loadGenotypes(gsKey = c("14xvEXbKVej7gnPPaHtCcEHDc6xLbRPfN9ESLXOSLw58")) %>%
dplyr::mutate(project_geno = ifelse(project_geno == "test2", "2020FebruarayAustralia", NA))
# test joinFulcGeno function to join genotype data to fulcrum data
project_data <- joinFulcGeno(fulc = aus2020feb, geno = genotype_data3)
joinFulcGeno <- function(fulc, geno, blast = NULL) {
if(is.null(blast)){
# Join genotyping sheet with collection and isolation data
# Join genotyping sheet with collection and isolation data
out_dat <- fulc %>%
dplyr::full_join(geno) %>%
# Rename variables
dplyr::rename(project_fulc = project,
collection_id = c_label,
isolation_id = s_label) %>%
# Reorder variables
dplyr::select(project_geno,
project_fulc,
collection_id,
isolation_id,
species_id,
ECA_dirty,
ECA_clean,
collection_by,
collection_datetime_UTC,
collection_date_UTC,
collection_local_time,
collection_island,
collection_location,
collection_trail,
collection_latitude,
collection_longitude,
collection_fulcrum_latitude,
collection_fulcrum_longitude,
collection_lat_long_method,
collection_lat_long_method_diff,
ambient_temperature,
flag_ambient_temperature_run,
ambient_humidity,
substrate_temperature,
altitude,
altitude_method,
#altitude_methods_range,
landscape,
sky_view,
substrate,
substrate_other,
substrate_notes,
sample_photo_url,
gridsect,
gridsect_index,
grid_sect_direction,
gridsect_radius,
isolation_by,
isolation_datetime_UTC,
isolation_date_UTC,
isolation_local_time,
isolation_latitude,
isolation_longitude,
worms_on_sample,
proliferation_48,
proliferation_168,
proliferating,
approximate_number_of_worms,
shipment_number,
pcr_product_its2,
pcr_product_ssu,
general_notes,
manual_blast_notes,
possible_new_caeno_sp,
make_strain_name,
reason_strain_not_named)
}
else{
# load blast results
blast_results <- read_tsv(blast)
print(paste0("loading blast results from", blast))
# Join genotyping sheet with collection and isolation data
out_dat <- fulc %>%
dplyr::full_join(geno) %>%
# Rename variables
dplyr::rename(project_fulc = project,
collection_id = c_label,
isolation_id = s_label) %>%
# Reorder variables
dplyr::select(project_geno,
project_fulc,
collection_id,
isolation_id,
species_id,
ECA_dirty,
ECA_clean,
collection_by,
collection_datetime_UTC,
collection_date_UTC,
collection_local_time,
collection_island,
collection_location,
collection_trail,
collection_latitude,
collection_longitude,
collection_fulcrum_latitude,
collection_fulcrum_longitude,
collection_lat_long_method,
collection_lat_long_method_diff,
ambient_temperature,
flag_ambient_temperature_run,
ambient_humidity,
substrate_temperature,
altitude,
altitude_method,
#altitude_methods_range,
landscape,
sky_view,
substrate,
substrate_other,
substrate_notes,
sample_photo_url,
gridsect,
gridsect_index,
grid_sect_direction,
gridsect_radius,
isolation_by,
isolation_datetime_UTC,
isolation_date_UTC,
isolation_local_time,
isolation_latitude,
isolation_longitude,
worms_on_sample,
proliferation_48,
proliferation_168,
proliferating,
approximate_number_of_worms,
shipment_number,
pcr_product_its2,
pcr_product_ssu,
general_notes,
manual_blast_notes,
possible_new_caeno_sp,
make_strain_name,
reason_strain_not_named)
}
return(out_dat)
}
# test joinFulcGeno function to join genotype data to fulcrum data
project_data <- joinFulcGeno(fulc = aus2020feb, geno = genotype_data3)
View(project_data)
# setup test directory for multi project Fulcrum export
test_dir1 <- "~/Dropbox/AndersenLab/LabFolders/Tim/projects/wild_isolates/data/fulcrum/20200515_fulcrum_data"
# test functions from multi project Fulcrum export
loadFulcrum(test_dir1)
fulcrum_data1 <- procFulcrum(test_dir1)
# setup test directories for single project Fulcrum exports
test_dir2 <- "~/repos/20191201_Hawaii/data/fulcrum"
test_dir3 <- "~/repos/2020FebruaryAustralia/data/fulcrum"
loadFulcrum(test_dir2) # dec hawaii
loadFulcrum(test_dir3) # feb australia
# test procFulcrum function to load and process Fulcrum data
hi2019dec <- procFulcrum(test_dir2)
aus2020feb <- procFulcrum(test_dir3)
# read in genotype data for 2 single projects with loadGenotypes function
genotype_data23 <- loadGenotypes(gsKey = c("1jLmludjZX8_jy1RQ_DPMQ3k-3eZ30GtCAW6LEj_YSVw", "14xvEXbKVej7gnPPaHtCcEHDc6xLbRPfN9ESLXOSLw58")) %>%
dplyr::mutate(project_geno = ifelse(project_geno == "test1", "2019DecemberHawaii",
ifelse(project_geno == "test2", "2020FebruarayAustralia", NA)))
genotype_data3 <- loadGenotypes(gsKey = c("14xvEXbKVej7gnPPaHtCcEHDc6xLbRPfN9ESLXOSLw58")) %>%
dplyr::mutate(project_geno = ifelse(project_geno == "test2", "2020FebruarayAustralia", NA))
# test joinFulcGeno function to join genotype data to fulcrum data
project_data <- joinFulcGeno(fulc = aus2020feb, geno = genotype_data3)
devtools::document()
library(easyfulcrum)
devtools::load_all()
# setup test directory for multi project Fulcrum export
test_dir1 <- "~/Dropbox/AndersenLab/LabFolders/Tim/projects/wild_isolates/data/fulcrum/20200515_fulcrum_data"
# test functions from multi project Fulcrum export
loadFulcrum(test_dir1)
fulcrum_data1 <- procFulcrum(test_dir1)
# setup test directories for single project Fulcrum exports
test_dir2 <- "~/repos/20191201_Hawaii/data/fulcrum"
test_dir3 <- "~/repos/2020FebruaryAustralia/data/fulcrum"
loadFulcrum(test_dir2) # dec hawaii
loadFulcrum(test_dir3) # feb australia
# test procFulcrum function to load and process Fulcrum data
hi2019dec <- procFulcrum(test_dir2)
aus2020feb <- procFulcrum(test_dir3)
genotype_data3 <- loadGenotypes(gsKey = c("14xvEXbKVej7gnPPaHtCcEHDc6xLbRPfN9ESLXOSLw58")) %>%
dplyr::mutate(project_geno = ifelse(project_geno == "test2", "2020FebruarayAustralia", NA))
# test joinFulcGeno function to join genotype data to fulcrum data
project_data <- joinFulcGeno(fulc = aus2020feb, geno = genotype_data3)
test <- aus2020feb %>%
dplyr::full_join(genotype_data3, by = c("s_label"))
# test joinFulcGeno function to join genotype data to fulcrum data
project_data3 <- joinFulcGeno(fulc = aus2020feb, geno = genotype_data3)
loadFulcrum(test_dir3) # feb australia
# setup test directories for single project Fulcrum exports
test_dir2 <- "~/repos/20191201_Hawaii/data/fulcrum"
test_dir3 <- "~/repos/2020FebruaryAustralia/data/fulcrum"
loadFulcrum(test_dir3) # feb australia
