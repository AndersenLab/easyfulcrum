else{
# load blast results
blast_results <- readr::read_tsv(blast)
message(glue::glue("loading blast results from {blast}"))
# Join genotyping sheet with collection and isolation data
out_dat <- fulc %>%
dplyr::full_join(geno)
}
return(out_dat)
}
#' procPhotos
#'
#' \code{procPhotos} copies raw sample photos from the Fulcrum export and renames them to strain_name for use with CeNDR. The function also resizes images.
#'
#' @param dir The path to the base fulcrum directory, raw/fulcrum/photos should contain the photos for the project
#' @param data a data frame output from the \code{joinGenoFulc} function.
#' @param max_dim This value sets the maximum dimension of the resized images in pixels. The default value is 500.
#' @param overwrite Logical, passed to fs::file_copy. If TRUE then existing files with similar names will be written over. Default is FALSE.
#' @param CeNDR Logical, determines whether to write CeNDR criteria qualifying photos to a subdirectory
#' @return A folder named processed_photos in the data/processed/fulcrum directory. The folder contains full size sample photos renamed with strain names.
#' A thumbnails subfolder is also returned within the processed_photos folder. This folder contains resized images. A dataframe identical to input \code{data}
#' with md5 hash values and file names for all photos, also saved as an rds file in data/processed/fulcrum directory.
#' If \code{CeNDR} is set to TRUE other subfolders will be made with those images.
#' @importFrom rebus ALPHA one_or_more %R% DGT WRD optional
#' @importFrom imager load.image resize save.image
#' @export
#'
procPhotos <- function(dir, data, max_dim = 500, overwrite = FALSE, CeNDR = FALSE, pub_url = "https://storage.googleapis.com/elegansvariation.org/photos/isolation/fulcrum/") {
# edit pub_url to take into account project name and subfolder
project_url <- glue::glue("{pub_url}",tail(strsplit(dir,"/")[[1]],1),"/sampling_thumbs/")
# edit dir to be appropriate for path to photos
dir_photos <- glue::glue("{dir}","/data/raw/fulcrum/photos")
# make processed dir path
processed_dir <- stringr::str_replace(dir_photos, pattern = "raw/fulcrum/photos", replacement = "processed/fulcrum")
# find file names for photos where CeNDR criteria is satisfied, create folder of these images and thumbnails
if(CeNDR){
to_change <- data %>%
dplyr::filter(!is.na(strain_name)) %>%
dplyr::filter(species_id %in% c("C. elegans","C. briggsae","C. tropicalis","Caenorhabditis elegans","Caenorhabditis briggsae","Caenorhabditis tropicalis")) %>%
dplyr::mutate(orig_file_name = glue::glue("{dir_photos}/{sample_photo1}.jpg"),
new_file_name = glue::glue("{processed_dir}/CeNDR/{strain_name}.jpg"),
thumb_file_name = glue::glue("{processed_dir}/CeNDR/thumbnails/{strain_name}.jpg")) %>%
dplyr::mutate(orig_file_name2 = glue::glue("{dir_photos}/{sample_photo2}.jpg"),
new_file_name2 = glue::glue("{processed_dir}/CeNDR/{strain_name}_2.jpg"),
thumb_file_name2 = glue::glue("{processed_dir}/CeNDR/thumbnails/{strain_name}_2.jpg")) %>%
dplyr::mutate(orig_file_name3 = glue::glue("{dir_photos}/{sample_photo3}.jpg"),
new_file_name3 = glue::glue("{processed_dir}/CeNDR/{strain_name}_3.jpg"),
thumb_file_name3 = glue::glue("{processed_dir}/CeNDR/thumbnails/{strain_name}_3.jpg")) %>%
dplyr::select(strain_name, species_id, c_label, sample_photo1, sample_photo2, sample_photo3, orig_file_name:thumb_file_name3)
to_change1 <- to_change %>%
dplyr::filter(!is.na(sample_photo1))
to_change2 <- to_change %>%
dplyr::filter(!is.na(sample_photo2))
to_change3 <- to_change %>%
dplyr::filter(!is.na(sample_photo3))
# make processed subdirectory in dir and a thumbnails directory below that
fs::dir_create(glue::glue("{processed_dir}/CeNDR"))
fs::dir_create(glue::glue("{processed_dir}/CeNDR/thumbnails"))
# copy files to new directory and rename
fs::file_copy(to_change1$orig_file_name, to_change1$new_file_name, overwrite = overwrite)
fs::file_copy(to_change2$orig_file_name2, to_change2$new_file_name2, overwrite = overwrite)
fs::file_copy(to_change3$orig_file_name3, to_change3$new_file_name3, overwrite = overwrite)
# loop through renamed images to make thumbnails
for(i in unique(to_change1$new_file_name)) {
# Make message
message(glue::glue("Processing collection photo:{to_change1 %>% dplyr::filter(new_file_name == i) %>% dplyr::pull(orig_file_name)}"))
# setup image in R
img <- imager::load.image(i)
# get raw img dimesions
raw_max_dim <- max(dim(img))
percentage <- 100*(max_dim/raw_max_dim)
# resize to make thumbnail
thumb <- imager::resize(img, -percentage, -percentage) # need negative for resize function
# write the file
imager::save.image(thumb, file = glue::glue("{to_change1 %>% dplyr::filter(new_file_name == i) %>% dplyr::pull(thumb_file_name)}"))
}
for(i in unique(to_change2$new_file_name2)) {
# Make message
message(glue::glue("Processing collection photo:{to_change2 %>% dplyr::filter(new_file_name2 == i) %>% dplyr::pull(orig_file_name2)}"))
# setup image in R
img <- imager::load.image(i)
# get raw img dimesions
raw_max_dim <- max(dim(img))
percentage <- 100*(max_dim/raw_max_dim)
# resize to make thumbnail
thumb <- imager::resize(img, -percentage, -percentage) # need negative for resize function
# write the file
imager::save.image(thumb, file = glue::glue("{to_change %>% dplyr::filter(new_file_name2 == i) %>% dplyr::pull(thumb_file_name2)}"))
}
for(i in unique(to_change3$new_file_name3)) {
# Make message
message(glue::glue("Processing collection photo:{to_change3 %>% dplyr::filter(new_file_name3 == i) %>% dplyr::pull(orig_file_name3)}"))
# setup image in R
img <- imager::load.image(i)
# get raw img dimesions
raw_max_dim <- max(dim(img))
percentage <- 100*(max_dim/raw_max_dim)
# resize to make thumbnail
thumb <- imager::resize(img, -percentage, -percentage) # need negative for resize function
# write the file
imager::save.image(thumb, file = glue::glue("{to_change %>% dplyr::filter(new_file_name3 == i) %>% dplyr::pull(thumb_file_name3)}"))
}
}
# copy all images create folder of these images and thumbnails
to_change <- data %>%
dplyr::filter(!is.na(c_label)) %>%
dplyr::distinct(c_label, .keep_all = TRUE) %>%
dplyr::mutate(orig_file_name = glue::glue("{dir_photos}/{sample_photo1}.jpg"),
new_file_name = glue::glue("{processed_dir}/{c_label}.jpg"),
thumb_file_name = glue::glue("{processed_dir}/thumbnails/{c_label}.jpg")) %>%
dplyr::mutate(orig_file_name2 = glue::glue("{dir_photos}/{sample_photo2}.jpg"),
new_file_name2 = glue::glue("{processed_dir}/{c_label}_2.jpg"),
thumb_file_name2 = glue::glue("{processed_dir}/thumbnails/{c_label}_2.jpg")) %>%
dplyr::mutate(orig_file_name3 = glue::glue("{dir_photos}/{sample_photo3}.jpg"),
new_file_name3 = glue::glue("{processed_dir}/{c_label}_3.jpg"),
thumb_file_name3 = glue::glue("{processed_dir}/thumbnails/{c_label}_3.jpg")) %>%
dplyr::select(strain_name, species_id, c_label, sample_photo1, sample_photo2, sample_photo3, orig_file_name:thumb_file_name3)
to_change1 <- to_change %>%
dplyr::filter(!is.na(sample_photo1))
to_change2 <- to_change %>%
dplyr::filter(!is.na(sample_photo2))
to_change3 <- to_change %>%
dplyr::filter(!is.na(sample_photo3))
# make a thumbnails directory below main folder
fs::dir_create(glue::glue("{processed_dir}/thumbnails"))
# copy files to new directory and rename
fs::file_copy(to_change1$orig_file_name, to_change1$new_file_name, overwrite = overwrite)
fs::file_copy(to_change2$orig_file_name2, to_change2$new_file_name2, overwrite = overwrite)
fs::file_copy(to_change3$orig_file_name3, to_change3$new_file_name3, overwrite = overwrite)
# loop through renamed images to make thumbnails
for(i in unique(to_change1$new_file_name)) {
# Make message
message(glue::glue("Processing collection photo:{to_change1 %>% dplyr::filter(new_file_name == i) %>% dplyr::pull(orig_file_name)}"))
# setup image in R
img <- imager::load.image(i)
# get raw img dimesions
raw_max_dim <- max(dim(img))
percentage <- 100*(max_dim/raw_max_dim)
# resize to make thumbnail
thumb <- imager::resize(img, -percentage, -percentage) # need negative for resize function
# write the file
imager::save.image(thumb, file = glue::glue("{to_change1 %>% dplyr::filter(new_file_name == i) %>% dplyr::pull(thumb_file_name)}"))
}
for(i in unique(to_change2$new_file_name2)) {
# Make message
message(glue::glue("Processing collection photo:{to_change2 %>% dplyr::filter(new_file_name2 == i) %>% dplyr::pull(orig_file_name2)}"))
# setup image in R
img <- imager::load.image(i)
# get raw img dimesions
raw_max_dim <- max(dim(img))
percentage <- 100*(max_dim/raw_max_dim)
# resize to make thumbnail
thumb <- imager::resize(img, -percentage, -percentage) # need negative for resize function
# write the file
imager::save.image(thumb, file = glue::glue("{to_change %>% dplyr::filter(new_file_name2 == i) %>% dplyr::pull(thumb_file_name2)}"))
}
for(i in unique(to_change3$new_file_name3)) {
# Make message
message(glue::glue("Processing collection photo:{to_change3 %>% dplyr::filter(new_file_name3 == i) %>% dplyr::pull(orig_file_name3)}"))
# setup image in R
img <- imager::load.image(i)
# get raw img dimesions
raw_max_dim <- max(dim(img))
percentage <- 100*(max_dim/raw_max_dim)
# resize to make thumbnail
thumb <- imager::resize(img, -percentage, -percentage) # need negative for resize function
# write the file
imager::save.image(thumb, file = glue::glue("{to_change %>% dplyr::filter(new_file_name3 == i) %>% dplyr::pull(thumb_file_name3)}"))
}
# make a md5 hash for sample photos and thubnails integrity
message("Writing md5 hash for raw images and adding to data frame.")
raw_hash <- dplyr::as_tibble(as.list(tools::md5sum(fs::dir_ls(glue::glue("{dir_photos}"), type = "file")))) %>%
tidyr::gather(key = raw_file, value = sample_photo_raw_photo_hash) %>%
dplyr::mutate(sample_photo_raw_file_name = stringr::str_extract(raw_file, pattern = ".{36}" %R% ".jpg"),
sample_photo = stringr::str_replace(sample_photo_raw_file_name, pattern = ".jpg", replacement = "")) %>%
dplyr::select(-raw_file)
# get hash 1
raw_hash1 <- raw_hash %>%
dplyr::filter(sample_photo %in% data$sample_photo1)
# get hash 2
raw_hash2 <- raw_hash %>%
dplyr::filter(sample_photo %in% data$sample_photo2)
# get hash 3
raw_hash3 <- raw_hash %>%
dplyr::filter(sample_photo %in% data$sample_photo3)
message("Writing md5 hash for thumbnail images and adding to data frame.")
thumb_hash <- dplyr::as_tibble(as.list(tools::md5sum(fs::dir_ls(glue::glue("{processed_dir}/thumbnails"))))) %>%
tidyr::gather(key = thumb_file, value = sample_photo_resized_hash) %>%
dplyr::mutate(sample_photo_resized_file_name = stringr::str_extract(thumb_file, pattern = ALPHA %R% optional("-") %R% one_or_more(DGT) %R% optional("_") %R% one_or_more(DGT) %R% ".jpg"),
c_label = stringr::str_extract(sample_photo_resized_file_name, pattern = ALPHA %R% optional("-") %R% one_or_more(DGT)),
sample_photo_processed_file_name = sample_photo_resized_file_name)
# get hash 1
thumb_hash1 <- thumb_hash %>%
dplyr::filter(c_label %in% to_change1$c_label)
# get hash 2
thumb_hash2 <- thumb_hash %>%
dplyr::filter(c_label %in% to_change2$c_label)
# get hash 3
thumb_hash3 <- thumb_hash %>%
dplyr::filter(c_label %in% to_change3$c_label)
# join hash to data frame
data_out <- data %>%
dplyr::left_join(dplyr::select(raw_hash1, sample_photo1_hash = sample_photo_raw_photo_hash,
sample_photo1_raw_file_name = sample_photo_raw_file_name, sample_photo), by = c("sample_photo1" = "sample_photo")) %>%
dplyr::left_join(dplyr::select(raw_hash2, sample_photo2_hash = sample_photo_raw_photo_hash,
sample_photo2_raw_file_name = sample_photo_raw_file_name, sample_photo), by = c("sample_photo2" = "sample_photo")) %>%
dplyr::left_join(dplyr::select(raw_hash3, sample_photo3_hash = sample_photo_raw_photo_hash,
sample_photo3_raw_file_name = sample_photo_raw_file_name, sample_photo), by = c("sample_photo3" = "sample_photo")) %>%
dplyr::left_join(dplyr::select(thumb_hash1, sample_photo1_resized_hash = sample_photo_resized_hash,
sample_photo1_processed_file_name = sample_photo_processed_file_name,
sample_photo1_resized_file_name = sample_photo_resized_file_name, c_label), by = c("c_label" = "c_label")) %>%
dplyr::left_join(dplyr::select(thumb_hash2, sample_photo2_resized_hash = sample_photo_resized_hash,
sample_photo2_processed_file_name = sample_photo_processed_file_name,
sample_photo2_resized_file_name = sample_photo_resized_file_name, c_label), by = c("c_label" = "c_label")) %>%
dplyr::left_join(dplyr::select(thumb_hash3, sample_photo3_resized_hash = sample_photo_resized_hash,
sample_photo3_processed_file_name = sample_photo_processed_file_name,
sample_photo3_resized_file_name = sample_photo_resized_file_name, c_label), by = c("c_label" = "c_label"))  %>%
dplyr::mutate(sample_photo1_processed_url = ifelse(!is.na(sample_photo1_processed_file_name), glue::glue("{project_url}","{sample_photo1_processed_file_name}"), NA),
sample_photo2_processed_url = ifelse(!is.na(sample_photo2_processed_file_name), glue::glue("{project_url}","{sample_photo2_processed_file_name}"), NA),
sample_photo3_processed_url = ifelse(!is.na(sample_photo3_processed_file_name), glue::glue("{project_url}","{sample_photo3_processed_file_name}"), NA)) %>%
dplyr::select(project:sample_photo1, sample_photo1_raw_file_name, sample_photo1_processed_file_name, sample_photo1_hash, sample_photo1_resized_file_name, sample_photo1_resized_hash,
sample_photo2, sample_photo2_raw_file_name, sample_photo2_processed_file_name, sample_photo2_hash, sample_photo2_resized_file_name, sample_photo2_resized_hash,
sample_photo3, sample_photo3_raw_file_name, sample_photo3_processed_file_name, sample_photo3_hash, sample_photo3_resized_file_name, sample_photo3_resized_hash,
everything())
# return
message("DONE")
if(is.character(dir)){
saveRDS(object = data_out,
file = glue::glue("{dir}","/data/processed/fulcrum/",
as.character(Sys.Date()),"_",
tail(strsplit(dir,"/")[[1]],1),"fulcrum.rds"), version = 3)}
return(data_out)
}
join_genofulc1 <- joinGenoFulc(geno = proc_geno1, fulc = anno_fulc1, dir = dir1)
#This chunk of code will move the photos required for this trial run into the appropriate folder for raw photos, according to what `dir1` is specified.
#You can also find these photos for manual download at: https://github.com/AndersenLab/easyfulcrum/tree/master/vignettes/2020JanuaryHawaii_photos
library(googledrive)
final_directory <- paste(dir1, "data/raw/fulcrum/photos", sep = "/")
temp_dir <- tempdir()
photos <- googledrive::drive_ls(as_id("11T6qzszJ_yK3yRyy4eqBfplZuai20y-g"))
photos$temp_location <- paste(temp_dir,photos$name, sep = "/")
photos$final_location <- paste(final_directory,photos$name, sep = "/")
for(i in 1:nrow(photos)){
googledrive::drive_download(as_id(photos$id[i]),
path =photos$temp_location[i],
overwrite = TRUE)
fs::file_copy(photos$temp_location[i], photos$final_location[i], overwrite = TRUE)
}
final_data1 <- procPhotos(dir = dir1, data = join_genofulc1, max_dim = 500, overwrite = T, CeNDR = TRUE)
# final_data1 <- readRDS("~/Desktop/final_data1.rds")
# df <- final_data1
df <- readRDS("/Users/matteodibernardo/Desktop/2020JanuaryHawaii/data/processed/fulcrum/2021-02-28_2020JanuaryHawaiifulcrum.rds")
df <- readRDS("~/Desktop/2020JanuaryHawaii/data/processed/fulcrum/2021-02-28_2020JanuaryHawaiifulcrum.rds")
rmarkdown::render("../R/sampleReport.Rmd",
output_dir = paste(dir1,"reports",sep = "/"),
output_format	= "html_document")
# final_data1 <- readRDS("~/Desktop/final_data1.rds")
# df <- final_data1
df <- readRDS("~/Desktop/2020JanuaryHawaii/data/processed/fulcrum/
2021-02-28_2020JanuaryHawaiifulcrum.rds")
# final_data1 <- readRDS("~/Desktop/final_data1.rds")
# df <- final_data1
df <- readRDS("~/Desktop/2020JanuaryHawaii/data/processed/fulcrum/2021-02-28_2020JanuaryHawaiifulcrum.rds")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# install.packages("devtools")
# devtools::install_github("AndersenLab/easyfulcrum")
library(easyfulcrum)
setwd("~/Desktop")
makeDirStructure(startdir = "~/Desktop/",
projectdirname = "2020JanuaryHawaii")
dir1 <- "~/Desktop/2020JanuaryHawaii"
# raw_fulc1 <- readFulcrum(dir = dir1)
names(easyfulcrum::raw_fulc1)
proc_fulc1 <- procFulcrum(data = raw_fulc1)
flag1.1 <- checkTemperatures(data = proc_fulc1, return_flags = TRUE)
proc_fulc1_clean <- fixTemperatures(data = proc_fulc1,
substrate_temperature_ids = "a7db618d-44cc-4b4a-bc67-871306029274",
ambient_temperature_ids = "b1f20ae4-c5c2-426f-894a-e1f46c2fa693",
ambient_temperature_run_ids=c("dda77efe-d73c-48e9-aefb-b508e613256b",
"93de14a0-40ab-4793-8614-ab1512ab158c"))
join_fulc1 <- joinFulcrum(data = proc_fulc1)
flag1.2 <- checkJoin(data = join_fulc1, return_flags = TRUE)
anno_fulc1 <- annotateFulcrum(data = join_fulc1, dir = NULL)
# raw_geno1 <- readGenotypes(gsKey = c("1_6u4sk_Zj-Hm5d_058Lg8WYWLe7BZHGTWxXcH6EsDUI"))
head(easyfulcrum::raw_geno1)
proc_geno1 <- checkGenotypes(geno_data = easyfulcrum::raw_geno1, fulc_data = anno_fulc1,
return_geno = TRUE, return_flags = FALSE)
flag1.3 <- checkGenotypes(geno_data = raw_geno1, fulc_data = anno_fulc1,
return_geno = FALSE, return_flags = TRUE)
join_genofulc1 <- joinGenoFulc(geno = proc_geno1, fulc = anno_fulc1, dir = dir1)
#This chunk of code will move the photos required for this trial run into the appropriate folder for raw photos, according to what `dir1` is specified.
#You can also find these photos for manual download at: https://github.com/AndersenLab/easyfulcrum/tree/master/vignettes/2020JanuaryHawaii_photos
library(googledrive)
final_directory <- paste(dir1, "data/raw/fulcrum/photos", sep = "/")
temp_dir <- tempdir()
photos <- googledrive::drive_ls(as_id("11T6qzszJ_yK3yRyy4eqBfplZuai20y-g"))
photos$temp_location <- paste(temp_dir,photos$name, sep = "/")
photos$final_location <- paste(final_directory,photos$name, sep = "/")
for(i in 1:nrow(photos)){
googledrive::drive_download(as_id(photos$id[i]),
path =photos$temp_location[i],
overwrite = TRUE)
fs::file_copy(photos$temp_location[i], photos$final_location[i], overwrite = TRUE)
}
final_data1 <- procPhotos(dir = dir1, data = join_genofulc1, max_dim = 500, overwrite = T, CeNDR = TRUE)
flag1.4 <- makeSpSheet(data = join_genofulc1,
target_sp = "Caenorhabditis Briggsae", dir = dir1)
rmarkdown::render("../R/sampleReport.Rmd",
output_dir = paste(dir1,"reports",sep = "/"),
output_format	= "html_document")
library(easyfulcrum)
rmarkdown::render("../R/sampleReport.Rmd",
output_dir = paste(dir1,"reports",sep = "/"),
output_format	= "html_document")
# install.packages("devtools")
# devtools::install_github("AndersenLab/easyfulcrum")
library(easyfulcrum)
setwd("~/Desktop")
dir1 <- "~/Desktop/2020JanuaryHawaii"
# raw_fulc1 <- readFulcrum(dir = dir1)
names(easyfulcrum::raw_fulc1)
rmarkdown::render("../R/sampleReport.Rmd",
output_dir = paste(dir1,"reports",sep = "/"),
output_format	= "html_document")
df <- readRDS("~/Desktop/2020JanuaryHawaii/data/processed/fulcrum/2021-02-28_2020JanuaryHawaiifulcrum.rds")
rmarkdown::render("../R/sampleReport.Rmd",
output_dir = paste(dir1,"reports",sep = "/"),
output_format	= "html_document")
rmarkdown::render("../R/sampleReport.Rmd",
output_dir = paste(dir1,"reports",sep = "/"),
output_format	= "html_document")
df <- readRDS("/Users/matteodibernardo/Desktop/2020JanuaryHawaii/data/processed/fulcrum/2021-02-28_2020JanuaryHawaiifulcrum.rds")
rmarkdown::render("../R/sampleReport.Rmd",
output_dir = paste(dir1,"reports",sep = "/"),
output_format	= "html_document")
df <- readRDS("/Users/matteodibernardo/Desktop/2020JanuaryHawaii/data/processed/fulcrum/2021-02-28_2020JanuaryHawaiifulcrum.rds")
rmarkdown::render("../R/sampleReport.Rmd",
output_dir = paste(dir1,"reports",sep = "/"),
output_format	= "html_document")
df <- readRDS("/Users/matteodibernardo/Desktop/2020JanuaryHawaii/data/processed/fulcrum/2021-02-28_2020JanuaryHawaiifulcrum.RDS")
rmarkdown::render("../R/sampleReport.Rmd",
output_dir = paste(dir1,"reports",sep = "/"),
output_format	= "html_document")
rmarkdown::render("../R/sampleReport.Rmd",
output_dir = paste(dir1,"reports",sep = "/"),
output_format	= "html_document")
opts_knit$set
# final_data1 <- readRDS("~/Desktop/final_data1.rds")
# df <- final_data1
df1 <- readRDS("~/Desktop/2020JanuaryHawaii/data/processed/fulcrum/2021-02-28_2020JanuaryHawaiifulcrum.rds")
df2 <- readRDS("/Users/matteodibernardo/Desktop/2020JanuaryHawaii/data/processed/fulcrum/2021-02-28_2020JanuaryHawaiifulcrum.RDS")
rmarkdown::render("../R/sampleReport.Rmd",
output_dir = paste(dir1,"reports",sep = "/"),
output_format	= "html_document")
# final_data1 <- readRDS("~/Desktop/final_data1.rds")
# df <- final_data1
df1 <- readRDS("~/Desktop/2020JanuaryHawaii/data/processed/fulcrum/2021-02-28_2020JanuaryHawaiifulcrum.rds")
df2 <- readRDS("/Users/matteodibernardo/Desktop/2020JanuaryHawaii/data/processed/fulcrum/2021-02-28_2020JanuaryHawaiifulcrum.RDS")
?readRegistry
?readRDS
rmarkdown::render("../R/sampleReport.Rmd",
output_dir = paste(dir1,"reports",sep = "/"),
output_format	= "html_document")
dir1 <- "~/Desktop/2020JanuaryHawaii"
# raw_fulc1 <- readFulcrum(dir = dir1)
names(easyfulcrum::raw_fulc1)
rmarkdown::render("../R/sampleReport.Rmd",
output_dir = paste(dir1,"reports",sep = "/"),
output_format	= "html_document")
setwd("~/Desktop/Andersen/sampleReport")
# final_data1 <- readRDS("~/Desktop/final_data1.rds")
# df <- final_data1
setwd("~/Desktop/2020JanuaryHawaii/data/processed/fulcrum/")
df <- readRDS("2021-02-28_2020JanuaryHawaiifulcrum.rds")
# df2 <- readRDS("/Users/matteodibernardo/Desktop/2020JanuaryHawaii/data/processed/fulcrum/2021-02-28_2020JanuaryHawaiifulcrum.RDS")
rmarkdown::render("../R/sampleReport.Rmd",
output_dir = paste(dir1,"reports",sep = "/"),
output_format	= "html_document")
rmarkdown::render("../R/sampleReport.Rmd",
output_dir = paste(dir1,"reports",sep = "/"),
output_format	= "html_document")
rmarkdown::render("../R/sampleReport.Rmd",
output_dir = paste(dir1,"reports",sep = "/"),
output_format	= "html_document")
library(easyfulcrum)
library(easyfulcrum)
# load packages
library(tidyverse)
library(ggmap)
library(memoise)
library(lubridate)
library(cowplot)
library(pals)
library(grid)
library(gridExtra)
library(scales)
library(kableExtra)
library(leaflet)
library(htmlwidgets)
library(dplyr)
library(knitr)
library(DT)
library(htmltools)
#setting working directory
knitr::opts_knit$set(root.dir = '..')
# Target species map function
# Map_collection function for reviewing collection locations
map_target_species <- function(df, color_use) {
icos <- iconList(
red = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/red.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
),
orange = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/orange.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
),
blue = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/blue.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
),
black = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/black.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
)
)
df <- dplyr::filter(df, !is.na(df[[color_use]])) %>%
dplyr::mutate(substrate=ifelse(is.na(substrate), "", substrate)) %>%
dplyr::arrange(species_id)
#print(df)
# "https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}.png"
#"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}"
attach(df)
leaflet::leaflet(data = df, width = "100%", options = list(zoomControl = T)) %>%
addProviderTiles("Stamen.Terrain") %>%
leaflet::addMarkers(~collection_longitude,
~collection_latitude,
popup = glue::glue("<h2>{c_label}</h2><hr />
<strong>collection uploaded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)},
{format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>collection location:</strong> {collection_location}<br />
<strong>collection island:</strong> {collection_island}<br />
<strong>collection trail:</strong> {collection_trail}<br />
<strong>substrate:</strong> {substrate}<br />
<strong>C. elegans:</strong> {`C. elegans count`}
<strong>C. briggsae:</strong> {`C. briggsae count`}
<strong>C. tropicalis:</strong> {`C. tropicalis count`}<br />
<img style='width: 150px;' src='{pub_url}'></a>"),
popupOptions(maxWidth = 500),
icon = icos[ df[[color_use]] ] )
#htmlwidgets::saveWidget(m, tempfile(), selfcontained = FALSE)
#webshot::webshot("temp.html", file = "map.png",
#        cliprect = "viewport", vwidth = 1000, vheight = 1000)
}
knitr::knit_hooks$set(
warning = function(x, options) {
paste('\n\n<div class="alert alert-warning">',
gsub('##', '\n', gsub('^##\ Warning:', '**Warning**', x)),
'</div>', sep = '\n')
}
)
# setwd("~/Desktop/2020JanuaryHawaii/data/processed/fulcrum/")
# df <- readRDS("2021-02-28_2020JanuaryHawaiifulcrum.rds")
# final_data1 <- df
# save(final_data1, file = "~/Desktop/final_data1.rda", version = 3)
df <- final_data1
View(df)
tools::buildVignettes(dir = ".", tangle=TRUE)
# install.packages("devtools")
# devtools::install_github("AndersenLab/easyfulcrum")
library(easyfulcrum)
setwd("~/Desktop")
file.copy("../R/sampleReport.Rmd", paste(dir1,"scripts",sep = "/"))
rmarkdown::render("../R/sampleReport.Rmd",
output_dir = paste(dir1,"reports",sep = "/"),
output_format	= "html_document")
# install.packages("devtools")
# devtools::install_github("AndersenLab/easyfulcrum")
library(easyfulcrum)
setwd("~/Desktop")
file.copy("../R/sampleReport.Rmd", paste(dir1,"scripts",sep = "/"))
rmarkdown::render("../R/sampleReport.Rmd",
output_dir = paste(dir1,"reports",sep = "/"),
output_format	= "html_document")
tools::buildVignettes(dir = ".", tangle=TRUE)
dir1
tools::buildVignettes(dir = ".", tangle=TRUE)
dir.create("inst/doc")
file.copy(dir("vignettes", full.names=TRUE), "inst/doc", overwrite=TRUE)
library(easyfulcrum)
devtools::install_github("AndersenLab/easyfulcrum", ref = "revert-final_data1", force = TRUE, build_vignettes=TRUE)
options(gargle_quiet = FALSE)
devtools::install_github("AndersenLab/easyfulcrum", ref = "revert-final_data1", force = TRUE, build_vignettes=TRUE)
tools::buildVignettes(dir = ".", tangle=TRUE)
dir.create("inst/doc")
file.copy(dir("vignettes", full.names=TRUE), "inst/doc", overwrite=TRUE)
devtools::install_github("AndersenLab/easyfulcrum", ref = "revert-final_data1", force = TRUE, build_vignettes=TRUE)
devtools::install_github("AndersenLab/easyfulcrum", ref = "revert-final_data1", force = TRUE, build_vignettes=TRUE)
library(easyfulcrum)
browseVignettes(package = "easyfulcrum")
