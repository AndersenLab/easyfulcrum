print(paste("There are", nrow(s_label_not_in_fulcrum), "rows with s labels not found in the Fulcrum data, these s labels are:", sep = " "))
if(nrow(s_label_not_in_fulcrum) > 0){print(s_label_not_in_fulcrum$s_label)}
# Make a dataframe for s_labels in Fulcrum but not in the genotyping sheet
s_label_in_fulcrum_not_in_genotyping <- fulc_data %>%
dplyr::filter(!is.na(s_label)) %>%
dplyr::filter(!(s_label %in% geno_data$s_label))
print(paste("There are", nrow(s_label_in_fulcrum_not_in_genotyping), "s labels in the Fulcrum data but not in the genotyping data, these s labels are:", sep = " "))
if(nrow(s_label_in_fulcrum_not_in_genotyping) > 0){print(s_label_in_fulcrum_not_in_genotyping$s_label)}
message(">>> Checking genotyping process")
# show expected but missing proliferation data
proliferation_missing <- geno_data %>% dplyr::filter(flag_proliferation_missing == TRUE)
print(paste("There are", nrow(proliferation_missing), "rows missing expected proliferation data, these s labels are:", sep = " "))
if(nrow(proliferation_missing) > 0){print(proliferation_missing$s_label)}
# its2 check
its2_genotype_expected <- geno_data %>% dplyr::filter(flag_its2_genotype_expected == TRUE)
print(paste("There are", nrow(its2_genotype_expected), "rows missing expected its2 genotype, these s labels are:", sep = " "))
if(nrow(its2_genotype_expected) > 0){print(its2_genotype_expected$s_label)}
# species_id check
species_id_expected <- geno_data %>% dplyr::filter(flag_species_id_expected == TRUE)
print(paste("There are", nrow(species_id_expected), "rows missing expected species_id, these s labels are:", sep = " "))
if(nrow(species_id_expected) > 0){print(species_id_expected$s_label)}
# unusual target name
unusual_target_species_name <- geno_data %>% dplyr::filter(flag_unusual_target_species_name == TRUE)
print(paste("There are", nrow(unusual_target_species_name), "rows with unusual target species names, these names are:", sep = " "))
if(nrow(unusual_target_species_name) > 0){print(unusual_target_species_name$species_id)}
# expected strain_name
strain_name_expected <- geno_data %>% dplyr::filter(flag_strain_name_expected == TRUE)
print(paste("There are", nrow(strain_name_expected), "rows missing expected strain_name, these s labels are:", sep = " "))
if(nrow(strain_name_expected) > 0){print(strain_name_expected$s_label)}
# report s_label check
message(">>> Checking s labels")
# missing s_labels
missing_s_label_genotyping <- geno_data %>% dplyr::filter(flag_missing_s_label_genotyping == TRUE)
print(paste("There are", nrow(missing_s_label_genotyping), "rows with missing s labels, these s labels are:", sep = " "))
if(nrow(missing_s_label_genotyping) > 0){print(missing_s_label_genotyping$s_label)}
library(dplyr)
library(tidyverse)
# report s_label check
message(">>> Checking s labels")
# missing s_labels
missing_s_label_genotyping <- geno_data %>% dplyr::filter(flag_missing_s_label_genotyping == TRUE)
print(paste("There are", nrow(missing_s_label_genotyping), "rows with missing s labels, these s labels are:", sep = " "))
if(nrow(missing_s_label_genotyping) > 0){print(missing_s_label_genotyping$s_label)}
View(geno_data)
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
proc_geno_data1 <- procGenotypes(geno_data = geno_data1, fulc_data = anno_data1)
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
Q
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
debuggingState(on=FALSE)
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
:c
:f
f()
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
f()
Q
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
setwd("~/Desktop/Andersen")
#first dataset has created purposeful errors
dir1 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum"
dir2 <- "git/test_easyfulcrum/test_data/2020JanuaryHawaii/data/raw/fulcrum"
raw_data1 <- readFulcrum(dir1)
proc_data1 <- procFulcrum(raw_data1)
checkParameters(proc_data1)
flag1.1 <- checkParameters(proc_data1, return = TRUE)
#pass in fulcrum_id values corresponding to flagged rows
proc_data1_clean <- fixParameters(proc_data1,
substrate_temperature_ids = "fe28600b-c78a-4545-a525-28dfb3e5d84c",
ambient_temperature_ids = "e088d373-6f4a-48c3-b672-2f6a43747595",
ambient_temperature_run_ids =
c("fb975ace-0036-4a80-b073-8ff638f35786","c9313751-3f96-41f6-9d5e-b8dc994f5edb"))
checkParameters(proc_data1_clean)
join_data1 <- joinFulcrum(proc_data1)
checkJoin(join_data1)
flag1.2 <- checkJoin(join_data1, return = TRUE)
anno_data1 <- annotateFulcrum(join_data1)
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
library(easyfulcrum)
setwd("~/Desktop/Andersen")
#first dataset has created purposeful errors
dir1 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum"
dir2 <- "git/test_easyfulcrum/test_data/2020JanuaryHawaii/data/raw/fulcrum"
raw_data1 <- readFulcrum(dir1)
proc_data1 <- procFulcrum(raw_data1)
checkParameters(proc_data1)
flag1.1 <- checkParameters(proc_data1, return = TRUE)
#pass in fulcrum_id values corresponding to flagged rows
proc_data1_clean <- fixParameters(proc_data1,
substrate_temperature_ids = "fe28600b-c78a-4545-a525-28dfb3e5d84c",
ambient_temperature_ids = "e088d373-6f4a-48c3-b672-2f6a43747595",
ambient_temperature_run_ids =
c("fb975ace-0036-4a80-b073-8ff638f35786","c9313751-3f96-41f6-9d5e-b8dc994f5edb"))
checkParameters(proc_data1_clean)
join_data1 <- joinFulcrum(proc_data1)
checkJoin(join_data1)
flag1.2 <- checkJoin(join_data1, return = TRUE)
anno_data1 <- annotateFulcrum(join_data1)
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
proc_geno_data1 <- procGenotypes(geno_data = geno_data1, fulc_data = anno_data1)
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
flag1.3 <- checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1, return = TRUE)
View(flag1.3)
geno_data <- geno_data1
fulc_data <- anno_data1
usual_s_labels <- stringr::str_subset(geno_data$s_label, pattern = "S-" %R% DGT %R% DGT %R% DGT %R% DGT %R% optional(DGT) %R% optional(DGT))
library(dplyr)
usual_s_labels <- stringr::str_subset(geno_data$s_label, pattern = "S-" %R% DGT %R% DGT %R% DGT %R% DGT %R% optional(DGT) %R% optional(DGT))
optional(DGT)
library(stringr)
usual_s_labels <- stringr::str_subset(geno_data$s_label, pattern = "S-" %R% DGT %R% DGT %R% DGT %R% DGT %R% optional(DGT) %R% optional(DGT))
edit
edit(geno_data1)
write.csv(geno_data1,"geno_data1_to_fix.csv")
read.csv("geno_data1_to_fix.csv")
View(fulc_data)
geno_data1_test <- read.csv("geno_data1_to_fix.csv")
View(geno_data1_test)
?read.csv
geno_data1_test <- read.csv("geno_data1_to_fix.csv")
geno_data1_test <- read.csv("geno_data1_to_fix.csv")
proc_geno_data1 <- procGenotypes(geno_data = geno_data1_test, fulc_data = anno_data1)
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
geno_data1_test <- read.csv("geno_data1_to_fix.csv")
proc_geno_data1 <- procGenotypes(geno_data = geno_data1_test, fulc_data = anno_data1)
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
geno_data1_test <- read.csv("geno_data1_to_fix.csv")
proc_geno_data1 <- procGenotypes(geno_data = geno_data1_test, fulc_data = anno_data1)
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
usual_s_labels <- stringr::str_subset(geno_data$s_label, pattern = "S-" %R% DGT %R% DGT %R% DGT %R% DGT %R% optional(DGT) %R% optional(DGT))
usual_s_labels <- stringr::str_subset(geno_data$s_label, pattern = "S-" %R% DGT %R% DGT %R% DGT %R% DGT %R% optional(DGT) %R% optional(DGT))
library(rebus)
usual_s_labels <- stringr::str_subset(geno_data$s_label, pattern = "S-" %R% DGT %R% DGT %R% DGT %R% DGT %R% optional(DGT) %R% optional(DGT))
usual_s_labels
geno_data1_test <- read.csv("geno_data1_to_fix.csv")
proc_geno_data1 <- procGenotypes(geno_data = geno_data1_test, fulc_data = anno_data1)
geno_data <- geno_data1_test
usual_s_labels <- stringr::str_subset(geno_data$s_label, pattern = "S-" %R% DGT %R% DGT %R% DGT %R% DGT %R% optional(DGT) %R% optional(DGT))
usual_s_labels
geno_data1_test <- read.csv("geno_data1_to_fix.csv")
proc_geno_data1 <- procGenotypes(geno_data = geno_data1_test, fulc_data = anno_data1)
geno_data <- geno_data1_test
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
geno_data1_test <- read.csv("geno_data1_to_fix.csv")
proc_geno_data1 <- procGenotypes(geno_data = geno_data1_test, fulc_data = anno_data1)
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
library(easyfulcrum)
geno_data1_test <- read.csv("geno_data1_to_fix.csv")
proc_geno_data1 <- procGenotypes(geno_data = geno_data1_test, fulc_data = anno_data1)
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
library(easyfulcrum)
geno_data1_test <- read.csv("geno_data1_to_fix.csv")
proc_geno_data1 <- procGenotypes(geno_data = geno_data1_test, fulc_data = anno_data1)
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
flag1.3 <- checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1, return = TRUE)
View(flag1.3)
joingeno_data1 <- joinGenoFulc(geno = proc_geno_data1, fulc = anno_data1)
final_data1 <- procPhotos(dir = "test_collection/data/raw/fulcrum/photos", data = joingeno_data1, max_dim = 500, overwrite = T)
final_data1 <- procPhotos(dir = "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum/photos", data = joingeno_data1, max_dim = 500, overwrite = T)
View(final_data1
)
saveRDS(geno_data1_test, "2020FebruaryAustralia_errors_created_geno.rda")
View(proc_data1)
View(proc_data1)
View(join_data1)
names(join_data1)
View(proc_data1)
library(easyfulcrum)
setwd("~/Desktop/Andersen")
#first dataset has created purposeful errors
dir1 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum"
raw_data1 <- readFulcrum(dir1)
proc_data1 <- procFulcrum(raw_data1)
checkParameters(proc_data1)
join_data1 <- joinFulcrum(proc_data1)
checkJoin(join_data1)
View(join_data1)
library(easyfulcrum)
setwd("~/Desktop/Andersen")
#first dataset has created purposeful errors
dir1 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum"
raw_data1 <- readFulcrum(dir1)
proc_data1 <- procFulcrum(raw_data1)
checkParameters(proc_data1)
join_data1 <- joinFulcrum(proc_data1)
checkJoin(join_data1)
View(joinFulcrum())
View(join_data1)
View(join_data1)
names(join_data1)
library(easyfulcrum)
setwd("~/Desktop/Andersen")
#first dataset has created purposeful errors
dir1 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum"
dir2 <- "git/test_easyfulcrum/test_data/2020JanuaryHawaii/data/raw/fulcrum"
raw_data1 <- readFulcrum(dir1)
proc_data1 <- procFulcrum(raw_data1)
checkParameters(proc_data1)
checkParameters(proc_data1_clean)
join_data1 <- joinFulcrum(proc_data1)
checkJoin(join_data1)
library(easyfulcrum)
setwd("~/Desktop/Andersen")
#first dataset has created purposeful errors
dir1 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum"
dir2 <- "git/test_easyfulcrum/test_data/2020JanuaryHawaii/data/raw/fulcrum"
raw_data1 <- readFulcrum(dir1)
proc_data1 <- procFulcrum(raw_data1)
checkParameters(proc_data1)
join_data1 <- joinFulcrum(proc_data1)
checkJoin(join_data1)
View(proc_data1)
View(proc_data1[[1]])
View(proc_data1[[2]])
View(proc_data1[[3]])
View(proc_data1[[4]])
View(proc_data1[[5]])
names(proc_data1[[1]])
names(proc_data1[[2]])
names(proc_data1[[3]])
names(proc_data1[[4]])
names(proc_data1[[5]])
saveRDS(raw_data1, "2020FebruaryAustralia_errors_created_fulc.rda")
library(easyfulcrum)
setwd("~/Desktop/Andersen")
library(easyfulcrum)
#first dataset has created purposeful errors
dir1 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum"
raw_data1 <- readFulcrum(dir1)
proc_data1 <- procFulcrum(raw_data1)
checkParameters(proc_data1)
flag1.1 <- checkParameters(proc_data1, return = TRUE)
#pass in fulcrum_id values corresponding to flagged rows
proc_data1_clean <- fixParameters(proc_data1,
substrate_temperature_ids = "fe28600b-c78a-4545-a525-28dfb3e5d84c",
ambient_temperature_ids = "e088d373-6f4a-48c3-b672-2f6a43747595",
ambient_temperature_run_ids =
c("fb975ace-0036-4a80-b073-8ff638f35786","c9313751-3f96-41f6-9d5e-b8dc994f5edb"))
checkParameters(proc_data1_clean)
join_data1 <- joinFulcrum(proc_data1)
checkJoin(join_data1)
flag1.2 <- checkJoin(join_data1, return = TRUE)
anno_data1 <- annotateFulcrum(join_data1)
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
proc_geno_data1 <- procGenotypes(geno_data = geno_data1, fulc_data = anno_data1)
flag1.3 <- checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1, return = TRUE)
View(join_data1)
library(easyfulcrum)
setwd("~/Desktop/Andersen")
library(easyfulcrum)
#first dataset has created purposeful errors
dir1 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum"
dir2 <- "git/test_easyfulcrum/test_data/2020JanuaryHawaii/data/raw/fulcrum"
raw_data1 <- readFulcrum(dir1)
proc_data1 <- procFulcrum(raw_data1)
checkParameters(proc_data1)
flag1.1 <- checkParameters(proc_data1, return = TRUE)
#pass in fulcrum_id values corresponding to flagged rows
proc_data1_clean <- fixParameters(proc_data1,
substrate_temperature_ids = "fe28600b-c78a-4545-a525-28dfb3e5d84c",
ambient_temperature_ids = "e088d373-6f4a-48c3-b672-2f6a43747595",
ambient_temperature_run_ids =
c("fb975ace-0036-4a80-b073-8ff638f35786","c9313751-3f96-41f6-9d5e-b8dc994f5edb"))
checkParameters(proc_data1_clean)
join_data1 <- joinFulcrum(proc_data1)
checkJoin(join_data1)
flag1.2 <- checkJoin(join_data1, return = TRUE)
anno_data1 <- annotateFulcrum(join_data1)
View(anno_data1)
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
proc_geno_data1 <- procGenotypes(geno_data = geno_data1, fulc_data = anno_data1)
flag1.3 <- checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1, return = TRUE)
joingeno_data1 <- joinGenoFulc(geno = proc_geno_data1, fulc = anno_data1)
final_data1 <- procPhotos(dir = "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum/photos", data = joingeno_data1, max_dim = 500, overwrite = T)
test <- makeSpSheet(joingeno_data1)
setwd("~/Desktop/Andersen")
library(easyfulcrum)
#first dataset has created purposeful errors
dir1 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum"
dir2 <- "git/test_easyfulcrum/test_data/2020JanuaryHawaii/data/raw/fulcrum"
raw_data1 <- readFulcrum(dir1)
proc_data1 <- procFulcrum(raw_data1)
checkParameters(proc_data1)
flag1.1 <- checkParameters(proc_data1, return = TRUE)
#pass in fulcrum_id values corresponding to flagged rows
proc_data1_clean <- fixParameters(proc_data1,
substrate_temperature_ids = "fe28600b-c78a-4545-a525-28dfb3e5d84c",
ambient_temperature_ids = "e088d373-6f4a-48c3-b672-2f6a43747595",
ambient_temperature_run_ids =
c("fb975ace-0036-4a80-b073-8ff638f35786","c9313751-3f96-41f6-9d5e-b8dc994f5edb"))
checkParameters(proc_data1_clean)
join_data1 <- joinFulcrum(proc_data1)
checkJoin(join_data1)
flag1.2 <- checkJoin(join_data1, return = TRUE)
anno_data1 <- annotateFulcrum(join_data1)
load("/Users/matteodibernardo/Desktop/Andersen/2020FebruaryAustralia_errors_created_geno.rda")
View(geno_data1)
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
View(geno_data1)
geno_data1 <- read.csv("geno_data1_to_fix.csv")
proc_geno_data1 <- procGenotypes(geno_data = geno_data1, fulc_data = anno_data1)
joingeno_data1 <- joinGenoFulc(geno = proc_geno_data1, fulc = anno_data1)
flag1.3 <- checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1, return = TRUE)
setwd("~/Desktop/Abate-Shen/Prostate/Fall2020/Viper")
library(viper)
library(Biobase)
library(dplyr)
interactome <- readRDS("interactome-expmat-tpm_unPruned.rds")
columndata <- read.table("primary_merged.csv", sep=",",header = TRUE)
mice <- columndata[,1]
columndata <- columndata[,2:6]
rownames(columndata) <- mice
columndata$bonemets <- as.factor(columndata$bonemets)
setwd("~/Desktop/Abate-Shen/Prostate/Fall2020/raw_counts")
#make a vector of the file names
filenames <- character()
n <- length(mice)
for (i in 1:n){
filenames[i] <- paste(mice[i], ".counts.txt", sep = "")
}
#read in the data from runs 1 and 2
matrix1 <- read.table(filenames[1], sep="\t", header=TRUE)
for (i in 2:14){
vec <- read.table(filenames[i], sep="\t", header=TRUE)
matrix1 <- cbind(matrix1, vec[,2])
colnames(matrix1)[i+1] <- colnames(vec)[2]
}
#read in the data from run 3
matrix2 <- read.table(filenames[15], sep="\t", header=TRUE)
for (i in 16:30){
vec <- read.table(filenames[i], sep="\t", header=TRUE)
matrix2 <- cbind(matrix2, vec[,2])
colnames(matrix2)[(i+1)-14] <- colnames(vec)[2]
}
#read in the data from run 4
matrix3 <- read.table(filenames[31], sep="\t", header=TRUE)
for (i in 32:38){
vec <- read.table(filenames[i], sep="\t", header=TRUE)
matrix3 <- cbind(matrix3, vec[,2])
colnames(matrix3)[(i+1)-30] <- colnames(vec)[2]
}
setwd("~/Desktop/Abate-Shen/Prostate/Fall2020/Viper")
matrix <- matrix1 %>% inner_join(matrix2) %>% inner_join(matrix3)
genes <- matrix[,1]
matrix <- matrix[,2:ncol(matrix)]
rownames(matrix) <- genes
#remove CJ022
#columndata <- columndata[rownames(columndata) != "CJ022",]
columndata <- columndata %>% filter(model == "NPK" | model == "NPM" | model == "NPp53" | model == "NP")
matrix <- matrix[,colnames(matrix) %in% rownames(columndata)]
columndata <- AnnotatedDataFrame(columndata)
ES <- ExpressionSet(assayData = as.matrix(matrix), phenoData = columndata)
#NPK
signature <- rowTtest(ES, "model", "NPK", "NP")
signature <- (qnorm(signature$p.value/2, lower.tail = FALSE) *
sign(signature$statistic))[, 1]
nullmodel <- ttestNull(ES, "model", "NPK", "NP", per = 1000, repos = TRUE, verbose = FALSE)
my_sig <- as.matrix(signature)
mrs_prostate <- msviper(my_sig, interactome, nullmodel, verbose = TRUE)
index <- !complete.cases(mrs_prostate$signature)
mrs_prostate$signature[index,] <- 0
mrs_prostate$nullmodel[index,] <- 0
eight_genes <- read.csv("eight.csv")$symbol
toplot <- NPK.significant$Regulon[NPK.significant$Regulon %in% genes]
NPK.significant <- summary(mrs_prostate, mrs = 2000) %>%
filter(p.value <= .05)
dim(NPK.significant)
eight_genes <- read.csv("eight.csv")$symbol
toplot <- NPK.significant$Regulon[NPK.significant$Regulon %in% genes]
toplot
toplot <- NPK.significant$Regulon[NPK.significant$Regulon %in% eight_genes]
toplot
NPK.significant <- summary(mrs_prostate, mrs = 2000)
eight_genes <- read.csv("eight.csv")$symbol
toplot <- NPK.significant$Regulon[NPK.significant$Regulon %in% eight_genes]
toplot
eight_genes
View(interactome)
NPK.significant <- summary(mrs_prostate, mrs = 2000)
dim(NPK.significant)
NPK.significant <- summary(mrs_prostate, mrs = 5000)
dim(NPK.significant)
toplot <- NPK.significant$Regulon[NPK.significant$Regulon %in% eight_genes]
toplot
NPK.significant <- summary(mrs_prostate, mrs = 2000)
eight_genes <- read.csv("eight.csv")$symbol
toplot <- NPK.significant$Regulon[NPK.significant$Regulon %in% eight_genes]
pdf("results/MR_NPK.NP_eight.pdf")
plot(mrs_prostate, mrs = toplot, cex = 1.1)
dev.off()
NPK.significant <- summary(mrs_prostate, mrs = 5000)
eight_genes <- read.csv("eight.csv")$symbol
toplot <- NPK.significant$Regulon[NPK.significant$Regulon %in% eight_genes]
pdf("results/MR_NPK.NP_eight.pdf")
plot(mrs_prostate, mrs = toplot, cex = 1.1)
dev.off()
NPK.significant <- summary(mrs_prostate, mrs = 5000)
eight_genes <- read.csv("eight.csv")$symbol
toplot <- NPK.significant$Regulon[NPK.significant$Regulon %in% eight_genes]
pdf("results/MR_NPK.NP_eight.pdf")
plot(mrs_prostate, mrs = toplot, cex = 2)
dev.off()
NPK.significant <- summary(mrs_prostate, mrs = 5000)
eight_genes <- read.csv("eight.csv")$symbol
toplot <- NPK.significant$Regulon[NPK.significant$Regulon %in% eight_genes]
pdf("results/MR_NPK.NP_eight.pdf")
plot(mrs_prostate, mrs = toplot, cex = .9)
dev.off()
setwd("~/Desktop/Abate-Shen/Prostate/Fall2020/Viper")
library(viper)
library(Biobase)
library(dplyr)
interactome <- readRDS("interactome-expmat-tpm_unPruned.rds")
columndata <- read.table("primary_merged.csv", sep=",",header = TRUE)
mice <- columndata[,1]
columndata <- columndata[,2:6]
rownames(columndata) <- mice
columndata$bonemets <- as.factor(columndata$bonemets)
setwd("~/Desktop/Abate-Shen/Prostate/Fall2020/raw_counts")
#make a vector of the file names
filenames <- character()
n <- length(mice)
for (i in 1:n){
filenames[i] <- paste(mice[i], ".counts.txt", sep = "")
}
#read in the data from runs 1 and 2
matrix1 <- read.table(filenames[1], sep="\t", header=TRUE)
for (i in 2:14){
vec <- read.table(filenames[i], sep="\t", header=TRUE)
matrix1 <- cbind(matrix1, vec[,2])
colnames(matrix1)[i+1] <- colnames(vec)[2]
}
#read in the data from run 3
matrix2 <- read.table(filenames[15], sep="\t", header=TRUE)
for (i in 16:30){
vec <- read.table(filenames[i], sep="\t", header=TRUE)
matrix2 <- cbind(matrix2, vec[,2])
colnames(matrix2)[(i+1)-14] <- colnames(vec)[2]
}
#read in the data from run 4
matrix3 <- read.table(filenames[31], sep="\t", header=TRUE)
for (i in 32:38){
vec <- read.table(filenames[i], sep="\t", header=TRUE)
matrix3 <- cbind(matrix3, vec[,2])
colnames(matrix3)[(i+1)-30] <- colnames(vec)[2]
}
setwd("~/Desktop/Abate-Shen/Prostate/Fall2020/Viper")
matrix <- matrix1 %>% inner_join(matrix2) %>% inner_join(matrix3)
genes <- matrix[,1]
matrix <- matrix[,2:ncol(matrix)]
rownames(matrix) <- genes
#remove CJ022
#columndata <- columndata[rownames(columndata) != "CJ022",]
columndata <- columndata %>% filter(model == "NPK" | model == "NPM" | model == "NPp53")
matrix <- matrix[,colnames(matrix) %in% rownames(columndata)]
columndata <- AnnotatedDataFrame(columndata)
ES <- ExpressionSet(assayData = as.matrix(matrix), phenoData = columndata)
#NPK vs. NPM
signature <- rowTtest(ES, "model", "NPK", "NPM")
signature <- (qnorm(signature$p.value/2, lower.tail = FALSE) *
sign(signature$statistic))[, 1]
nullmodel <- ttestNull(ES, "model", "NPK", "NPM", per = 1000, repos = TRUE, verbose = FALSE)
my_sig <- as.matrix(signature)
mrs_prostate <- msviper(my_sig, interactome, nullmodel, verbose = TRUE)
index <- !complete.cases(mrs_prostate$signature)
mrs_prostate$signature[index,] <- 0
mrs_prostate$nullmodel[index,] <- 0
NPK.significant <- summary(mrs_prostate, mrs = 5000)
eight_genes <- read.csv("eight.csv")$symbol
toplot <- NPK.significant$Regulon[NPK.significant$Regulon %in% eight_genes]
pdf("results/MR_NPK.NPM_eight.pdf")
plot(mrs_prostate, mrs = toplot, cex = .9)
dev.off()
signature <- rowTtest(ES, "model", "NPK", "NPp53")
signature <- (qnorm(signature$p.value/2, lower.tail = FALSE) *
sign(signature$statistic))[, 1]
nullmodel <- ttestNull(ES, "model", "NPK", "NPp53", per = 1000, repos = TRUE, verbose = FALSE)
my_sig <- as.matrix(signature)
mrs_prostate <- msviper(my_sig, interactome, nullmodel, verbose = TRUE)
index <- !complete.cases(mrs_prostate$signature)
mrs_prostate$signature[index,] <- 0
mrs_prostate$nullmodel[index,] <- 0
NPK.significant <- summary(mrs_prostate, mrs = 5000)
eight_genes <- read.csv("eight.csv")$symbol
toplot <- NPK.significant$Regulon[NPK.significant$Regulon %in% eight_genes]
pdf("results/MR_NPK.NPp53_eight.pdf")
plot(mrs_prostate, mrs = toplot, cex = .9)
dev.off()
?plot.msviper
library(easyfulcrum)
setwd("~/Desktop/Andersen")
library(easyfulcrum)
?makeDirStructure
makeDirStructure
makeDirStructure(startdir = "~/Desktop/Andersengit/test_easyfulcrum/test_data/",
projectdirname = "2020FebruaryAustralia_errors_created2")
makeDirStructure(startdir = "~/Desktop/Andersen/git/test_easyfulcrum/test_data/",
projectdirname = "2020FebruaryAustralia_errors_created2")
?readFulcrum
?makeSpSheet
?procFulcrum
?joinFulcrum
?annotateFulcrum
?readGenotypes
?joinGenoFulc
?procPhotos
?makeSpSheet
?checkParameters
?checkJoin
?checkGenotypes
