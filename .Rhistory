print("No collections in this project identified C. elegans samples")
}
briggsae_eval <- ifelse(collection_counts_1 %>%
dplyr::filter(species_id == "Caenorhabditis briggsae") %>%
dplyr::pull(c_label) %>% length()==0,
FALSE,TRUE)
if(briggsae_eval == FALSE) {
print("No collections in this project identified C. briggsae samples")
}
tropicalis_eval <- ifelse(collection_counts_1 %>%
dplyr::filter(species_id == "Caenorhabditis tropicalis") %>%
dplyr::pull(c_label) %>% length()==0,
FALSE,TRUE)
if(tropicalis_eval == FALSE) {
print("No collections in this project identified C. tropicalis samples")
}
# Target species map function
# Map_collection function for reviewing collection locations
map_target_species <- function(df, color_use) {
icos <- iconList(
red = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/red.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
),
orange = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/orange.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
),
blue = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/blue.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
),
black = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/black.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
)
)
df <- dplyr::filter(df, !is.na(df[[color_use]])) %>%
dplyr::mutate(substrate=ifelse(is.na(substrate), "", substrate)) %>%
dplyr::arrange(species_id)
#print(df)
# "https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}.png"
#"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}"
attach(df)
leaflet::leaflet(data = df, width = "100%", options = list(zoomControl = T)) %>%
addProviderTiles("Stamen.Terrain") %>%
leaflet::addMarkers(~collection_longitude,
~collection_latitude,
popup = glue::glue("<h2>{c_label}</h2><hr />
<strong>collection uploaded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>collection location:</strong> {collection_location}<br />
<strong>collection island:</strong> {collection_island}<br />
<strong>collection trail:</strong> {collection_trail}<br />
<strong>substrate:</strong> {substrate}<br /></a>"),
popupOptions(maxWidth = 500),
icon = icos[ df[[color_use]] ] )
#htmlwidgets::saveWidget(m, tempfile(), selfcontained = FALSE)
#webshot::webshot("temp.html", file = "map.png",
#        cliprect = "viewport", vwidth = 1000, vheight = 1000)
}
knitr::knit_hooks$set(
warning = function(x, options) {
paste('\n\n<div class="alert alert-warning">',
gsub('##', '\n', gsub('^##\ Warning:', '**Warning**', x)),
'</div>', sep = '\n')
}
)
collection_counts_1
View(collection_counts_1)
View(df)
df %>%
#dplyr::distinct(c_label, .keep_all = TRUE) %>%
dplyr::filter(!is.na(c_label)) %>%
dplyr::mutate(non.caeno = ifelse((pcr_product_ssu == 1 & pcr_product_its2 == 0) |
(pcr_product_ssu == 1 & pcr_product_its2 == 1 &
!(grepl("^Caeno",species_id))),"non-caeno",NA))
dplyr::filter(!is.na(non.caeno))
df %>%
#dplyr::distinct(c_label, .keep_all = TRUE) %>%
dplyr::filter(!is.na(c_label)) %>%
dplyr::mutate(non.caeno = ifelse((pcr_product_ssu == 1 & pcr_product_its2 == 0) |
(pcr_product_ssu == 1 & pcr_product_its2 == 1 &
!(grepl("^Caeno",species_id))),"non-caeno",NA)) %>%
dplyr::filter(!is.na(non.caeno))
# temporary table to collect enumerations on certain quantities of interest
isolation_counts_1 <- df %>%
dplyr::mutate(non.caeno = ifelse((pcr_product_ssu == 1 & pcr_product_its2 == 0) |
(pcr_product_ssu == 1 & pcr_product_its2 == 1 &
!(grepl("^Caeno",species_id))),"non-caeno",NA)) %>%
dplyr::distinct(s_label, .keep_all = TRUE) %>%
dplyr::filter(!is.na(s_label)) %>%
dplyr::mutate(`total number of distinct isolations` = n()) %>%
dplyr::add_count(species_id) %>%
dplyr::rename(species_id_counts = n) %>%
dplyr::add_count(non.caeno) %>%
dplyr::rename(non.caeno_counts = n) %>%
dplyr::select(c_label,
species_id, non.caeno,
`total number of distinct isolations`,
species_id_counts,
non.caeno_counts)
isolation_distinct <- c("total distinct",
pull(isolation_counts_1%>%dplyr::distinct(`total number of distinct isolations`)%>%dplyr::filter(!is.na(`total number of distinct isolations`))))
isolation_species_id <- isolation_counts_1%>%
dplyr::distinct(species_id,species_id_counts)%>%
dplyr::filter(!is.na(species_id))%>%
bind_rows(isolation_counts_1%>%dplyr::filter(!is.na(non.caeno))%>%
dplyr::distinct(non.caeno,non.caeno_counts) %>%
rename(species_id = non.caeno,
species_id_counts = non.caeno_counts))
# make collection dataframe
isolation_distinct <- data.frame(t(isolation_distinct)) %>%
tibble::column_to_rownames("X1")
isolation_species_id <- data.frame(isolation_species_id)
DT::datatable(isolation_distinct, colnames = c("","number of isolations"),
filter = "none", options = list(dom = 't')) %>%
DT::formatStyle(2, target = "row", fontWeight = "bold")
DT::datatable(isolation_species_id, colnames = c("species id","number of isolations"),
rownames = FALSE, filter = "none", options = list(dom = 't'))
df %>%
dplyr::mutate(non.caeno = ifelse((pcr_product_ssu == 1 & pcr_product_its2 == 0) |
(pcr_product_ssu == 1 & pcr_product_its2 == 1 &
!(grepl("^Caeno",species_id))),"non-caeno",NA)) %>%
dplyr::distinct(s_label, .keep_all = TRUE) %>%
dplyr::filter(!is.na(s_label)) %>% View()
install.packages("rmarkdown")
install.packages("rmarkdown")
library(rmarkdown)
# temporary table to collect enumerations on certain quantities of interest
isolation_counts_1 <- df %>%
dplyr::mutate(non.caeno = ifelse((pcr_product_ssu == 1 & pcr_product_its2 == 0) |
(pcr_product_ssu == 1 & pcr_product_its2 == 1 &
!(grepl("^Caeno",species_id))),"non-caeno",NA)) %>%
dplyr::distinct(s_label, .keep_all = TRUE) %>%
dplyr::filter(!is.na(s_label))
# load packages
library(tidyverse)
library(ggmap)
library(memoise)
library(lubridate)
library(cowplot)
library(pals)
library(grid)
library(gridExtra)
library(scales)
library(kableExtra)
library(leaflet)
library(htmlwidgets)
library(dplyr)
library(knitr)
library(DT)
library(htmltools)
#setting working directory
knitr::opts_knit$set(root.dir = '..')
final_data1 <- readRDS("~/Desktop/final_data1.rds")
df <- final_data1
# df <- final_data1
# temporary table to collect enumerations on certain quantities of interest
isolation_counts_1 <- df %>%
dplyr::mutate(non.caeno = ifelse((pcr_product_ssu == 1 & pcr_product_its2 == 0) |
(pcr_product_ssu == 1 & pcr_product_its2 == 1 &
!(grepl("^Caeno",species_id))),"non-caeno",NA)) %>%
dplyr::distinct(s_label, .keep_all = TRUE) %>%
dplyr::filter(!is.na(s_label))
dplyr::mutate(`total number of distinct isolations` = n()) %>%
dplyr::add_count(species_id) %>%
dplyr::rename(species_id_counts = n) %>%
dplyr::add_count(non.caeno) %>%
dplyr::rename(non.caeno_counts = n) %>%
dplyr::select(c_label,
species_id, non.caeno,
`total number of distinct isolations`,
species_id_counts,
non.caeno_counts)
# temporary table to collect enumerations on certain quantities of interest
isolation_counts_1 <- df %>%
dplyr::mutate(non.caeno = ifelse((pcr_product_ssu == 1 & pcr_product_its2 == 0) |
(pcr_product_ssu == 1 & pcr_product_its2 == 1 &
!(grepl("^Caeno",species_id))),"non-caeno",NA)) %>%
dplyr::distinct(s_label, .keep_all = TRUE) %>%
dplyr::filter(!is.na(s_label)) %>%
dplyr::mutate(`total number of distinct isolations` = n()) %>%
dplyr::add_count(species_id) %>%
dplyr::rename(species_id_counts = n) %>%
dplyr::add_count(non.caeno) %>%
dplyr::rename(non.caeno_counts = n) %>%
dplyr::select(c_label,
species_id, non.caeno,
`total number of distinct isolations`,
species_id_counts,
non.caeno_counts)
isolation_distinct <- c("total distinct",
pull(isolation_counts_1%>%dplyr::distinct(`total number of distinct isolations`)%>%dplyr::filter(!is.na(`total number of distinct isolations`))))
isolation_species_id <- isolation_counts_1%>%
dplyr::distinct(species_id,species_id_counts)%>%
dplyr::filter(!is.na(species_id))%>%
bind_rows(isolation_counts_1%>%dplyr::filter(!is.na(non.caeno))%>%
dplyr::distinct(non.caeno,non.caeno_counts) %>%
rename(species_id = non.caeno,
species_id_counts = non.caeno_counts))
# make collection dataframe
isolation_distinct <- data.frame(t(isolation_distinct)) %>%
tibble::column_to_rownames("X1")
isolation_species_id <- data.frame(isolation_species_id)
DT::datatable(isolation_distinct, colnames = c("","number of isolations"),
filter = "none", options = list(dom = 't')) %>%
DT::formatStyle(2, target = "row", fontWeight = "bold")
DT::datatable(isolation_species_id, colnames = c("species id","number of isolations"),
rownames = FALSE, filter = "none", options = list(dom = 't'))
# load packages
library(tidyverse)
library(ggmap)
library(memoise)
library(lubridate)
library(cowplot)
library(pals)
library(grid)
library(gridExtra)
library(scales)
library(kableExtra)
library(leaflet)
library(htmlwidgets)
library(dplyr)
library(knitr)
library(DT)
library(htmltools)
require(Hmisc)
#setting working directory
knitr::opts_knit$set(root.dir = '..')
hidingTOC(
buttonLabel = "Contents",
levels = 4,
tocSide = "left",
buttonSide = "left",
posCollapse = "top",
hidden = FALSE
)
?render
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# install.packages("devtools")
# devtools::install_github("AndersenLab/easyfulcrum")
library(easyfulcrum)
setwd("~/Desktop")
makeDirStructure(startdir = "~/Desktop/",
projectdirname = "2020JanuaryHawaii")
dir1 <- "~/Desktop/2020JanuaryHawaii"
# raw_fulc1 <- readFulcrum(dir = dir1)
names(easyfulcrum::raw_fulc1)
proc_fulc1 <- procFulcrum(data = raw_fulc1)
flag1.1 <- checkTemperatures(data = proc_fulc1, return_flags = TRUE)
proc_fulc1_clean <- fixTemperatures(data = proc_fulc1,
substrate_temperature_ids = "a7db618d-44cc-4b4a-bc67-871306029274",
ambient_temperature_ids = "b1f20ae4-c5c2-426f-894a-e1f46c2fa693",
ambient_temperature_run_ids=c("dda77efe-d73c-48e9-aefb-b508e613256b",
"93de14a0-40ab-4793-8614-ab1512ab158c"))
join_fulc1 <- joinFulcrum(data = proc_fulc1)
flag1.2 <- checkJoin(data = join_fulc1, return_flags = TRUE)
anno_fulc1 <- annotateFulcrum(data = join_fulc1, dir = NULL)
# raw_geno1 <- readGenotypes(gsKey = c("1_6u4sk_Zj-Hm5d_058Lg8WYWLe7BZHGTWxXcH6EsDUI"))
head(easyfulcrum::raw_geno1)
proc_geno1 <- checkGenotypes(geno_data = easyfulcrum::raw_geno1, fulc_data = anno_fulc1,
return_geno = TRUE, return_flags = FALSE)
flag1.3 <- checkGenotypes(geno_data = raw_geno1, fulc_data = anno_fulc1,
return_geno = FALSE, return_flags = TRUE)
join_genofulc1 <- joinGenoFulc(geno = proc_geno1, fulc = anno_fulc1, dir = dir1)
#This chunk of code will move the photos required for this trial run into the appropriate folder for raw photos, according to what `dir1` is specified.
#You can also find these photos for manual download at: https://github.com/AndersenLab/easyfulcrum/tree/master/vignettes/2020JanuaryHawaii_photos
library(googledrive)
final_directory <- paste(dir1, "data/raw/fulcrum/photos", sep = "/")
temp_dir <- tempdir()
photos <- googledrive::drive_ls(as_id("11T6qzszJ_yK3yRyy4eqBfplZuai20y-g"))
photos$temp_location <- paste(temp_dir,photos$name, sep = "/")
photos$final_location <- paste(final_directory,photos$name, sep = "/")
for(i in 1:nrow(photos)){
googledrive::drive_download(as_id(photos$id[i]),
path =photos$temp_location[i],
overwrite = TRUE)
fs::file_copy(photos$temp_location[i], photos$final_location[i], overwrite = TRUE)
}
final_data1 <- procPhotos(dir = dir1, data = join_genofulc1, max_dim = 500, overwrite = T, CeNDR = TRUE)
flag1.4 <- makeSpSheet(data = join_genofulc1,
target_sp = "Caenorhabditis Briggsae", dir = dir1)
rmarkdown::render("/Users/matteodibernardo/Desktop/Andersen/git/easyfulcrum/R/sampleReport.Rmd",
output_format	= "html_document")
rmarkdown::render("/Users/matteodibernardo/Desktop/Andersen/git/easyfulcrum/R/sampleReport.Rmd",
output_format	= "html_document")
rmarkdown::render("/Users/matteodibernardo/Desktop/Andersen/git/easyfulcrum/R/sampleReport.Rmd",
output_format	= "html_document")
rmarkdown::render("/Users/matteodibernardo/Desktop/Andersen/git/easyfulcrum/R/sampleReport.Rmd",
output_format	= "html_document")
library(easyfulcrum)
devtools::install_github("AndersenLab/easyfulcrum")
devtools::build_vignettes()
library(easyfulcrum)
tools::buildVignettes(dir = ".", tangle=TRUE)
dir.create("inst/doc")
file.copy(dir("vignettes", full.names=TRUE), "inst/doc", overwrite=TRUE)
tools::buildVignettes(dir = ".", tangle=TRUE)
dir.create("inst/doc")
file.copy(dir("vignettes", full.names=TRUE), "inst/doc", overwrite=TRUE)
tools::buildVignettes(dir = ".", tangle=TRUE)
dir.create("inst/doc")
file.copy(dir("vignettes", full.names=TRUE), "inst/doc", overwrite=TRUE)
# load packages
library(tidyverse)
library(ggmap)
library(memoise)
library(lubridate)
library(cowplot)
library(pals)
library(grid)
library(gridExtra)
library(scales)
library(kableExtra)
library(leaflet)
library(htmlwidgets)
library(dplyr)
library(knitr)
library(DT)
library(htmltools)
#setting working directory
knitr::opts_knit$set(root.dir = '..')
# Target species map function
# Map_collection function for reviewing collection locations
map_target_species <- function(df, color_use) {
icos <- iconList(
red = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/red.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
),
orange = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/orange.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
),
blue = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/blue.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
),
black = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/black.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
)
)
df <- dplyr::filter(df, !is.na(df[[color_use]])) %>%
dplyr::mutate(substrate=ifelse(is.na(substrate), "", substrate)) %>%
dplyr::arrange(species_id)
#print(df)
# "https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}.png"
#"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}"
attach(df)
leaflet::leaflet(data = df, width = "100%", options = list(zoomControl = T)) %>%
addProviderTiles("Stamen.Terrain") %>%
leaflet::addMarkers(~collection_longitude,
~collection_latitude,
popup = glue::glue("<h2>{c_label}</h2><hr />
<strong>collection uploaded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>collection location:</strong> {collection_location}<br />
<strong>collection island:</strong> {collection_island}<br />
<strong>collection trail:</strong> {collection_trail}<br />
<strong>substrate:</strong> {substrate}<br /></a>"),
popupOptions(maxWidth = 500),
icon = icos[ df[[color_use]] ] )
#htmlwidgets::saveWidget(m, tempfile(), selfcontained = FALSE)
#webshot::webshot("temp.html", file = "map.png",
#        cliprect = "viewport", vwidth = 1000, vheight = 1000)
}
knitr::knit_hooks$set(
warning = function(x, options) {
paste('\n\n<div class="alert alert-warning">',
gsub('##', '\n', gsub('^##\ Warning:', '**Warning**', x)),
'</div>', sep = '\n')
}
)
# final_data1 <- readRDS("~/Desktop/final_data1.rds")
# df <- final_data1
df <- final_data1
library(easyfulcrum)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# install.packages("devtools")
# devtools::install_github("AndersenLab/easyfulcrum")
library(easyfulcrum)
setwd("~/Desktop")
makeDirStructure(startdir = "~/Desktop/",
projectdirname = "2020JanuaryHawaii")
dir1 <- "~/Desktop/2020JanuaryHawaii"
# raw_fulc1 <- readFulcrum(dir = dir1)
names(easyfulcrum::raw_fulc1)
proc_fulc1 <- procFulcrum(data = raw_fulc1)
flag1.1 <- checkTemperatures(data = proc_fulc1, return_flags = TRUE)
proc_fulc1_clean <- fixTemperatures(data = proc_fulc1,
substrate_temperature_ids = "a7db618d-44cc-4b4a-bc67-871306029274",
ambient_temperature_ids = "b1f20ae4-c5c2-426f-894a-e1f46c2fa693",
ambient_temperature_run_ids=c("dda77efe-d73c-48e9-aefb-b508e613256b",
"93de14a0-40ab-4793-8614-ab1512ab158c"))
join_fulc1 <- joinFulcrum(data = proc_fulc1)
flag1.2 <- checkJoin(data = join_fulc1, return_flags = TRUE)
anno_fulc1 <- annotateFulcrum(data = join_fulc1, dir = NULL)
# raw_geno1 <- readGenotypes(gsKey = c("1_6u4sk_Zj-Hm5d_058Lg8WYWLe7BZHGTWxXcH6EsDUI"))
head(easyfulcrum::raw_geno1)
proc_geno1 <- checkGenotypes(geno_data = easyfulcrum::raw_geno1, fulc_data = anno_fulc1,
return_geno = TRUE, return_flags = FALSE)
flag1.3 <- checkGenotypes(geno_data = raw_geno1, fulc_data = anno_fulc1,
return_geno = FALSE, return_flags = TRUE)
join_genofulc1 <- joinGenoFulc(geno = proc_geno1, fulc = anno_fulc1, dir = dir1)
#This chunk of code will move the photos required for this trial run into the appropriate folder for raw photos, according to what `dir1` is specified.
#You can also find these photos for manual download at: https://github.com/AndersenLab/easyfulcrum/tree/master/vignettes/2020JanuaryHawaii_photos
library(googledrive)
final_directory <- paste(dir1, "data/raw/fulcrum/photos", sep = "/")
temp_dir <- tempdir()
photos <- googledrive::drive_ls(as_id("11T6qzszJ_yK3yRyy4eqBfplZuai20y-g"))
photos$temp_location <- paste(temp_dir,photos$name, sep = "/")
photos$final_location <- paste(final_directory,photos$name, sep = "/")
for(i in 1:nrow(photos)){
googledrive::drive_download(as_id(photos$id[i]),
path =photos$temp_location[i],
overwrite = TRUE)
fs::file_copy(photos$temp_location[i], photos$final_location[i], overwrite = TRUE)
}
final_data1 <- procPhotos(dir = dir1, data = join_genofulc1, max_dim = 500, overwrite = T, CeNDR = TRUE)
?leaflet
df <- dplyr::filter(df, !is.na(df[[color_use]])) %>%
dplyr::mutate(substrate=ifelse(is.na(substrate), "", substrate)) %>%
dplyr::arrange(species_id)
final_data1 <- readRDS("~/Desktop/final_data1.rds")
df <- final_data1
df <- dplyr::filter(df, !is.na(df[[color_use]])) %>%
dplyr::mutate(substrate=ifelse(is.na(substrate), "", substrate)) %>%
dplyr::arrange(species_id)
target_df <- df %>%
dplyr::distinct(c_label, .keep_all =T) %>%
dplyr::filter(species_id %in% c("Caenorhabditis elegans", "Caenorhabditis briggsae", "Caenorhabditis tropicalis")) %>%
dplyr::mutate(color = case_when(species_id == "Caenorhabditis elegans" ~ "red",
species_id == "Caenorhabditis briggsae" ~ "blue",
species_id == "Caenorhabditis tropicalis" ~ "orange"))
target_map <-  map_target_species(target_df,"color")
df <- target_df
color_use <- "color"
df <- dplyr::filter(df, !is.na(df[[color_use]])) %>%
dplyr::mutate(substrate=ifelse(is.na(substrate), "", substrate)) %>%
dplyr::arrange(species_id)
View(df)
target_df <- df %>%
dplyr::distinct(c_label, .keep_all =T) %>%
dplyr::mutate(color = case_when(worms_on_sample == "Yes" ~ "red",
worms_on_sample == "No" ~ "blue",
worms_on_sample == "Tracks" ~ "orange",
is.na(worms_on_sample) ~ "black"))
target_map <-  map_target_species(target_df,"color")
target_map
final_data1 <- readRDS("~/Desktop/final_data1.rds")
df <- final_data1
target_df <- df %>%
dplyr::distinct(c_label, .keep_all =T) %>%
dplyr::mutate(color = case_when(worms_on_sample == "Yes" ~ "red",
worms_on_sample == "No" ~ "blue",
worms_on_sample == "Tracks" ~ "orange",
is.na(worms_on_sample) ~ "black"))
target_map <-  map_target_species(target_df,"color")
target_df <- df %>%
dplyr::distinct(c_label, .keep_all =T) %>%
dplyr::mutate(color = case_when(worms_on_sample == "Yes" ~ "red",
worms_on_sample == "No" ~ "blue",
worms_on_sample == "Tracks" ~ "orange",
is.na(worms_on_sample) ~ "black"))
target_map <-  map_target_species(target_df,"color")
target_map
df <- target_df
df <- dplyr::filter(df, !is.na(df[[color_use]])) %>%
dplyr::mutate(substrate=ifelse(is.na(substrate), "", substrate)) %>%
dplyr::arrange(species_id)
View(df)
View(df$color)
version()
View(final_data1)
View(final_data1$sample_photo1_processed_url)
final_data1$sample_photo1_processed_url[1]
library(DESeq2)
deseq2::normTransform()
DESeq2::normTransform()
?DESeq2::normTransform()
install.packages("DESeq2")
library(DESeq2)
install.packages("DESeq2")
install.packages("DESeq2")
BiocManager::install("DESeq2")
BiocManager::install("DESeq2")
library(DESeq2)
DESeq2::normTransform()
