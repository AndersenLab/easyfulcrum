matrix1 <- cbind(matrix1, vec[,2])
colnames(matrix1)[i+1] <- colnames(vec)[2]
}
#read in the data from run 3
matrix2 <- read.table(filenames[34], sep="\t", header=TRUE)
for (i in 35:n){
vec <- read.table(filenames[i], sep="\t", header=TRUE)
matrix2 <- cbind(matrix2, vec[,2])
colnames(matrix2)[(i+1)-33] <- colnames(vec)[2]
}
setwd("~/Desktop/Abate-Shen/Prostate/Fall2020/DESeq_Alvaro")
matrix <- matrix1 %>% inner_join(matrix2)
columndata
#read in counts
setwd("~/Desktop/Abate-Shen/Prostate/Fall2020/Alvaro_counts")
#make a vector of the file names
filenames <- character()
n <- length(mice)
for (i in 1:n){
filenames[i] <- paste(mice[i], ".counts.txt", sep = "")
}
filenames
#read in Alvaro counts
setwd("~/Desktop/Abate-Shen/Prostate/Fall2020/Alvaro_counts")
#make a vector of the file names
filenames <- character()
n <- length(mice)
for (i in 1:n){
filenames[i] <- paste(mice[i], ".counts.txt", sep = "")
}
#read in the data from runs 1 and 2
matrix_alvaro <- read.table(filenames[1], sep="\t", header=TRUE)
for (i in 2:length(filenames)){
vec <- read.table(filenames[i], sep="\t", header=TRUE)
matrix_alvaro <- matrix_alvaro %>% inner_join(vec)
}
alvaro_columndata <- read.csv("alvaro_columndata.csv")
setwd("~/Desktop/Abate-Shen/Prostate/Fall2020/DESeq_Alvaro")
alvaro_columndata <- read.csv("alvaro_columndata.csv")
View(alvaro_columndata)
alvaro_columndata <- read.csv("alvaro_columndata.csv")[1:43,]
alvaro_mice <- alvaro_columndata$Seq.ID
filenames <- character()
n <- length(alvaro_mice)
for (i in 1:n){
filenames[i] <- paste(alvaro_mice[i], ".counts.txt", sep = "")
}
#read in the data from runs 1 and 2
matrix_alvaro <- read.table(filenames[1], sep="\t", header=TRUE)
for (i in 2:length(filenames)){
vec <- read.table(filenames[i], sep="\t", header=TRUE)
matrix_alvaro <- matrix_alvaro %>% inner_join(vec)
}
setwd("~/Desktop/Abate-Shen/Prostate/Fall2020/Alvaro_counts")
filenames[1]
#read in the data from runs 1 and 2
matrix_alvaro <- read.table(filenames[1], sep="\t", header=TRUE)
for (i in 2:length(filenames)){
vec <- read.table(filenames[i], sep="\t", header=TRUE)
matrix_alvaro <- matrix_alvaro %>% inner_join(vec)
}
View(matrix_alvaro)
matrix <- inner_join(matrix, matrix_alvaro)
View(matrix)
genes <- matrix[,1]
matrix <- matrix[,2:ncol(matrix)]
rownames(matrix) <- genes
View(columndata)
alvaro_mice <- alvaro_columndata$Seq.ID
rownames(alvaro_columndata) <- alvaro_columndata$Seq.ID
View(alvaro_columndata)
columndata <- columndata %>% filter(tissue == "PRIMARY" | tissue == "LUNG" | tissue == "BONE")
alvaro_columndata <- columndata %>% filter(model == "NPK")
columndata <- columndata %>% dplyr::filter(tissue == "PRIMARY" | tissue == "LUNG" | tissue == "BONE")
alvaro_columndata <- columndata %>% dplyr::filter(model == "NPK")
alvaro_columndata <- columndata %>% dplyr::filter(Model == "NPK")
alvaro_columndata <- alvaro_columndata %>% dplyr::filter(Model == "NPK")
alvaro_columndata <- read.csv("alvaro_columndata.csv")
alvaro_mice <- alvaro_columndata$Seq.ID
rownames(alvaro_columndata) <- alvaro_columndata$Seq.ID
columndata <- columndata %>% dplyr::filter(tissue == "PRIMARY" | tissue == "LUNG" | tissue == "BONE")
View(alvaro_columndata)
alvaro_columndata <- read.csv("alvaro_columndata.csv")
setwd("~/Desktop/Abate-Shen/Prostate/Fall2020/DESeq_Alvaro")
alvaro_columndata <- read.csv("alvaro_columndata.csv")
alvaro_mice <- alvaro_columndata$Seq.ID
rownames(alvaro_columndata) <- alvaro_columndata$Seq.ID
alvaro_columndata <- alvaro_columndata %>% dplyr::filter(Model == "NPK") %>% dplyr::filter(Sample.type == "PRIMARY" | Sample.type == "LUNG")
View(alvaro_columndata)
View(columndata)
alvaro_columndata <- alvaro_columndata %>% dplyr::filter(Model == "NPK") %>%
dplyr::filter(Sample.type == "PRIMARY" | Sample.type == "LUNG") %>%
mutate(run = 4)
columndata <- columndata[,c(1,2,5)]
alvaro_columndata <- alvaro_columndata[,c(3,1,4)]
alvaro_columndata <- read.csv("alvaro_columndata.csv")
alvaro_mice <- alvaro_columndata$Seq.ID
rownames(alvaro_columndata) <- alvaro_columndata$Seq.ID
alvaro_columndata <- alvaro_columndata %>% dplyr::filter(Model == "NPK") %>%
dplyr::filter(Sample.type == "PRIMARY" | Sample.type == "LUNG") %>%
mutate(run = 4)
alvaro_columndata <- alvaro_columndata[,c(4,2,5)]
columndata <- rbind(columndata, alvaro_columndata)
names(alvaro_columndata) <- c("tissue","mouse","run")
columndata <- rbind(columndata, alvaro_columndata)
alvaro_columndata <- read.csv("alvaro_columndata.csv")
alvaro_mice <- alvaro_columndata$Seq.ID
rownames(alvaro_columndata) <- alvaro_columndata$Seq.ID
columndata <- columndata %>% dplyr::filter(tissue == "PRIMARY" | tissue == "LUNG" | tissue == "BONE")
alvaro_columndata <- alvaro_columndata %>% dplyr::filter(Model == "NPK") %>%
dplyr::filter(Sample.type == "PRIMARY" | Sample.type == "LUNG") %>%
mutate(run = 4)
columndata <- columndata[,c(1,2,5)]
alvaro_columndata <- alvaro_columndata[,c(4,2,5)]
#read in column data
columndata <- read.table("metastatic.csv", sep=",",header = TRUE)
mice <- columndata[,1]
columndata <- columndata[,2:6]
rownames(columndata) <- mice
columndata$bonemets <- as.factor(columndata$bonemets)
columndata$run <- as.factor(columndata$run)
alvaro_columndata <- read.csv("alvaro_columndata.csv")
alvaro_mice <- alvaro_columndata$Seq.ID
rownames(alvaro_columndata) <- alvaro_columndata$Seq.ID
columndata <- columndata %>% dplyr::filter(tissue == "PRIMARY" | tissue == "LUNG" | tissue == "BONE")
alvaro_columndata <- alvaro_columndata %>% dplyr::filter(Model == "NPK") %>%
dplyr::filter(Sample.type == "PRIMARY" | Sample.type == "LUNG") %>%
mutate(run = 4)
columndata <- columndata[,c(1,2,5)]
alvaro_columndata <- alvaro_columndata[,c(4,2,5)]
colnames(alvaro_columndata) <- c("tissue","mouse","run")
columndata <- rbind(columndata, alvaro_columndata)
#read in column data
columndata <- read.table("metastatic.csv", sep=",",header = TRUE)
mice <- columndata[,1]
columndata <- columndata[,2:6]
rownames(columndata) <- mice
columndata$bonemets <- as.factor(columndata$bonemets)
columndata$run <- as.factor(columndata$run)
alvaro_columndata <- read.csv("alvaro_columndata.csv")
alvaro_mice <- alvaro_columndata$Seq.ID
rownames(alvaro_columndata) <- alvaro_columndata$Seq.ID
columndata <- columndata %>% dplyr::filter(tissue == "PRIMARY" | tissue == "LUNG" | tissue == "BONE")
alvaro_columndata <- alvaro_columndata %>% dplyr::filter(Model == "NPK") %>%
dplyr::filter(Sample.type == "PRIMARY" | Sample.type == "LUNG") %>%
mutate(run = as.factor(4))
columndata <- columndata[,c(1,2,5)]
alvaro_columndata <- alvaro_columndata[,c(4,2,5)]
colnames(alvaro_columndata) <- c("tissue","mouse","run")
columndata <- rbind(columndata, alvaro_columndata)
matrix <- matrix[,colnames(matrix) %in% rownames(columndata)]
dim(matrix)
dim(columndata)
setwd("~/Desktop/Abate-Shen/Prostate/Fall2020/DESeq_Alvaro")
library(DESeq2)
library(ggplot2)
library(stringr)
library(plyr)
library(qvalue)
library(EnhancedVolcano)
library(gridExtra)
library(qqman)
library(stringr)
library(tibble)
library(dplyr)
library(UpSetR)
library(venn)
library(dplyr)
library(vsn)
library(fgsea)
library(BiocParallel)
library(qusage)
library(homologene)
#read in column data
columndata <- read.table("metastatic.csv", sep=",",header = TRUE)
mice <- columndata[,1]
columndata <- columndata[,2:6]
rownames(columndata) <- mice
columndata$bonemets <- as.factor(columndata$bonemets)
columndata$run <- as.factor(columndata$run)
#read in counts
setwd("~/Desktop/Abate-Shen/Prostate/Fall2020/raw_counts")
#make a vector of the file names
filenames <- character()
n <- length(mice)
for (i in 1:n){
filenames[i] <- paste(mice[i], ".counts.txt", sep = "")
}
#read in the data from runs 1 and 2
matrix1 <- read.table(filenames[1], sep="\t", header=TRUE)
for (i in 2:33){
vec <- read.table(filenames[i], sep="\t", header=TRUE)
matrix1 <- cbind(matrix1, vec[,2])
colnames(matrix1)[i+1] <- colnames(vec)[2]
}
#read in the data from run 3
matrix2 <- read.table(filenames[34], sep="\t", header=TRUE)
for (i in 35:n){
vec <- read.table(filenames[i], sep="\t", header=TRUE)
matrix2 <- cbind(matrix2, vec[,2])
colnames(matrix2)[(i+1)-33] <- colnames(vec)[2]
}
#final new count matrix
matrix <- matrix1 %>% inner_join(matrix2)
setwd("~/Desktop/Abate-Shen/Prostate/Fall2020/DESeq_Alvaro")
alvaro_columndata <- read.csv("alvaro_columndata.csv")
alvaro_mice <- alvaro_columndata$Seq.ID
rownames(alvaro_columndata) <- alvaro_columndata$Seq.ID
#read in Alvaro counts
setwd("~/Desktop/Abate-Shen/Prostate/Fall2020/Alvaro_counts")
#make a vector of the file names
filenames <- character()
n <- length(alvaro_mice)
for (i in 1:n){
filenames[i] <- paste(alvaro_mice[i], ".counts.txt", sep = "")
}
#read in the data from runs 1 and 2
matrix_alvaro <- read.table(filenames[1], sep="\t", header=TRUE)
for (i in 2:length(filenames)){
vec <- read.table(filenames[i], sep="\t", header=TRUE)
matrix_alvaro <- matrix_alvaro %>% inner_join(vec)
}
matrix <- inner_join(matrix, matrix_alvaro)
genes <- matrix[,1]
matrix <- matrix[,2:ncol(matrix)]
rownames(matrix) <- genes
columndata <- columndata %>% dplyr::filter(tissue == "PRIMARY" | tissue == "LUNG" | tissue == "BONE")
alvaro_columndata <- alvaro_columndata %>% dplyr::filter(Model == "NPK") %>%
dplyr::filter(Sample.type == "PRIMARY" | Sample.type == "LUNG") %>%
mutate(run = as.factor(4))
columndata <- columndata[,c(1,2,5)]
alvaro_columndata <- alvaro_columndata[,c(4,2,5)]
colnames(alvaro_columndata) <- c("tissue","mouse","run")
columndata <- rbind(columndata, alvaro_columndata)
View(matrix)
names(matrix)
t <- names(matrix)
colnames(matrix) <- c("CJ001" ,"CJ002"  ,"CJ003" , "CJ004"  , "CJ006" ,"CJ007",  "CJ008" , "CJ009"  ,"CJ010" , "CJ012" ,
"CJ014" , "CJ015" , "CJ016" , "CJ018" , "CJ019" , "CJ020" , "CJ021",  "CJ022",  "CJ023" , "CJ024" ,
"CJ025",  "CJ026"  ,"CJ027" , "CJ028",  "CJ030" ,"CJ031" , "CJ032",  "CJ033" , "CJ034",  "CJ035",
"CJ036"  ,"CJ044" , "CJ048" , "CMZ200", "CMZ201", "CMZ202" ,"CMZ203", "CMZ204", "CMZ215", "CMZ216",
"CA001",  "CA002"  ,"CA003",  "CA004" , "CA005" , "CA008" ,"CA009", "CA010", "CA011", "CA012" ,
"CA016",  "CA017" ,"CA018" , "CA020" , "CA021", "CA022" , "CA023" , "CA024" , "CA025" , "CA026" ,
"CA028" , "CA029",  "CA030" , "CA031" ,"CA032", "CA033" ,"CA036", "CA040",  "CA041",  "CA042" ,
"CA043" , "CA044" , "CA045",  "CA046" , "CA047" ,"CA048" , "CA049",  "CA050"  ,"CA051" , "CA052",
"CA053",  "CA054"  ,"CA055")
matrix <- matrix[,colnames(matrix) %in% rownames(columndata)]
dim(matrix)
columndata
dimcolumndata)
dim(columndata)
#make dds object, use run as a factor
dds <- DESeqDataSetFromMatrix(countData = matrix,
colData = columndata,
design = ~ factor(tissue) + factor(run))
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
vsd <- vst(dds, blind=FALSE)
pcaData <- plotPCA(vsd, intgroup=c("tissue","run"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = run)) +
geom_point(size=3) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
#coord_fixed()
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = run)) +
geom_point(size=3) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed()
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = run)) +
geom_point(size=3) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed()
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = run)) +
geom_point(size=3) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed()
pcaData
?case_when
pcaData <- pcaData %>% mutate(`sequencing strategy` = case_when(run == 1 ~ "Bulk",
run== 2 ~ "Bulk",
run== 3 ~ "Bulk",
run== 4 ~ "Sorted"))
#PCA plot
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=3) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed()
#PCA plot
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=3) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed()
ggsave("results/PCA_merged.pdf")
setwd("~/Desktop/Abate-Shen/Prostate/Fall2020/DESeq_Alvaro")
#PCA plot
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=3) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed()
ggsave("results/PCA_merged.pdf")
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=3) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_colour_grey()
ggsave("results/PCA_merged.pdf")
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_colour_grey()
ggsave("results/PCA_merged.pdf")
#PCA plot
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_colour_grey() + theme_bw()
ggsave("results/PCA_merged.pdf")
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_colour_grey(start = 0.4) + theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_colour_grey(start = 0.6) + theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_colour_grey(start = 0.1) + theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_colour_grey(start = 0.1, end = .6) + theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
#PCA plot
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_colour_grey(start = 0.2, end = 0.8) + theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggsave("results/PCA_merged1.pdf")
#PCA plot
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_colour_grey(start = 0.1, end = 0.9) + theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
#PCA plot
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_colour_grey(start = 0.4, end = 0.8) + theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
#PCA plot
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_colour_grey(start = 0.2, end = 0.6) + theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggsave("results/PCA_merged2.pdf")
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() +  scale_color_viridis(discrete = TRUE, option = "D") + theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggsave("results/PCA_merged1.pdf")
library("ggsci")
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_color_jco() + theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggsave("results/PCA_merged2.pdf")
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_colour_manual(values=cbp1) + theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggsave("results/PCA_merged3.pdf")
cbp1 <- c("#999999", "#E69F00", "#56B4E9", "#009E73",
"#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_colour_manual(values=cbp1) + theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggsave("results/PCA_merged3.pdf")
#PCA plot
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_color_manual(values = c("#00AFBB", "#E7B800", "#FC4E07")) + theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggsave("results/PCA_merged4.pdf")
ggplot(pcaData, aes(PC1, PC2, color=tissue, shape = `sequencing strategy`)) +
geom_point(size=2.5) +
#label the axes
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#ggrepel::geom_text_repel(aes(label = rownames(pcaData)), nudge_y = 2.5, label.size = .15) +
coord_fixed() + scale_color_brewer(palette = "Dark2") + theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggsave("results/PCA_merged4.pdf")
library(easyfulcrum)
# install.packages("devtools")
# devtools::install_github("AndersenLab/easyfulcrum")
library(easyfulcrum)
setwd("~/Desktop")
makeDirStructure(startdir = "~/Desktop/",
projectdirname = "2020FebruaryAustralia")
# note for Tim + Erik: after running this you should add the photos to the appropriate subfolder
# install.packages("devtools")
# devtools::install_github("AndersenLab/easyfulcrum")
library(easyfulcrum)
setwd("~/Desktop")
makeDirStructure(startdir = "~/Desktop/",
projectdirname = "2020FebruaryAustralia")
# note for Tim + Erik: after running this you should add the photos to the appropriate subfolder
dir1 <- "~/Desktop/2020FebruaryAustralia"
# raw_data1 <- readFulcrum(dir = dir1)
names(raw_data1)
proc_data1 <- procFulcrum(data = raw_data1)
#checkParameters(data = proc_data1)
flag1.1 <- checkParameters(data = proc_data1, return = TRUE)
flag1.1
proc_data1_clean <- fixParameters(data = proc_data1,
substrate_temperature_ids = "fe28600b-c78a-4545-a525-28dfb3e5d84c",
ambient_temperature_ids = "e088d373-6f4a-48c3-b672-2f6a43747595",
ambient_temperature_run_ids =c("fb975ace-0036-4a80-b073-8ff638f35786",
"c9313751-3f96-41f6-9d5e-b8dc994f5edb"))
checkParameters(data = proc_data1_clean)
join_data1 <- joinFulcrum(data = proc_data1)
#checkJoin(data = join_data1)
flag1.2 <- checkJoin(data = join_data1, return = TRUE)
View(flag1.2)
anno_data1 <- annotateFulcrum(data = join_data1)
#geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
head(geno_data1)
proc_geno_data1 <- checkGenotypes(geno_data = geno_data1, fulc_data = anno_data1, return = FALSE)
joingeno_data1 <- joinGenoFulc(geno = proc_geno_data1, fulc = anno_data1, dir = dir1)
test <- makeSpSheet(data = joingeno_data1, target_sp = "Caenorhabditis tropicalis")
