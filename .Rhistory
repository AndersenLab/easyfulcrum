collection_altitude_method = ifelse(collection_lat_long_method == "photo" & !(is.na(exif_gps_altitude)), "photo",
ifelse(is.na(exif_gps_altitude) & !(is.na(fulcrum_altitude)), "fulcrum",
ifelse(is.na(exif_gps_altitude) & is.na(fulcrum_altitude), NA, NA)))) %>%
dplyr::ungroup() %>%
# join c-plates to s-plates with nematode_isolation_s_labeled_plates
dplyr::full_join(data$nematode_isolation_s_labeled_plates_proc, .,  by = c("fulcrum_parent_id" = "isolation_id")) %>%
dplyr::select(-fulcrum_parent_id, -updated_by, -version, -geometry, -assigned_to, -status) %>%
# set varible order
dplyr::select(project,
c_label,
s_label,
flag_ambient_temperature,
flag_ambient_temperature_run,
flag_substrate_temperature,
flag_unusual_sample_photo_num,
flag_duplicated_c_label_field_sampling,
flag_duplicated_isolation_for_c_label,
flag_duplicated_s_label_isolation_s_labeled_plates,
flag_missing_s_label_isolation_s_labeled_plates,
flag_missing_isolation_record,
collection_by,
collection_datetime_UTC,
collection_date_UTC,
collection_local_time,
collection_fulcrum_latitude,
collection_fulcrum_longitude,
exif_gps_latitude,
exif_gps_longitude,
collection_latitude,
collection_longitude,
collection_lat_long_method,
collection_lat_long_method_diff,
fulcrum_altitude,
exif_gps_altitude,
collection_altitude,
collection_altitude_method,
landscape,
sky_view,
ambient_humidity,
substrate,
substrate_notes,
substrate_other,
raw_ambient_temperature,
proc_ambient_temperature,
raw_substrate_temperature,
proc_substrate_temperature,
gridsect,
gridsect_index,
gridsect_radius,
grid_sect_direction,
sample_photo,
sample_photo_caption,
sample_photo_url,
gps_course,
gps_horizontal_accuracy,
gps_speed,
gps_vertical_accuracy,
isolation_by,
isolation_datetime_UTC,
isolation_date_UTC,
isolation_local_time,
isolation_latitude,
isolation_longitude,
worms_on_sample,
approximate_number_of_worms)
}
else {
message("Invalid list of dataframes supplied to joinFulcrum. Are there 5 OR 2 processed dataframes in the list? Are they named correctly?")
}
# return data
return(joined_data)
}
# test joinFulcrum function
join_data1 <- joinFulcrum(proc_data1)
joinFulcrum <- function(data) {
# prevent scientific notation
options(scipen = 999)
# check which data is present in processed data list and send message
data_names <- as.data.frame(names(data)) %>%
dplyr::rename(data_name = `names(data)`)
message("Attempting to join:")
for (i in unique(data_names$data_name)) {
message(glue::glue("{substitute(data)}${i}"))
}
# join just sampling data
if(data_names$data_name %in% c("nematode_field_sampling_proc", "nematode_field_sampling_sample_photo_proc") &&
!(data_names$data_name %in% c("data$nematode_isolation_proc", "data$nematode_isolation_s_labeled_plates_proc", "data$nematode_isolation_photos_proc")) &&
nrow(data_names) == 2) {
# send message
message("Complete fulcrum isoaltion data not detected, joining sampling data only.")
# join sampling data only
# join nematode_field_sampling_proc with nematode_isolation_proc
joined_data <- data$nematode_field_sampling_proc %>%
dplyr::mutate(best_photo = case_when(
sample_photo1 %in% data$nematode_field_sampling_sample_photo_proc$fulcrum_id ~ sample_photo1,
sample_photo2 %in% data$nematode_field_sampling_sample_photo_proc$fulcrum_id ~ sample_photo2,
sample_photo3 %in% data$nematode_field_sampling_sample_photo_proc$fulcrum_id ~ sample_photo3,
!(sample_photo1 %in% data$nematode_field_sampling_sample_photo_proc$fulcrum_id) & !(sample_photo2 %in% data$nematode_field_sampling_sample_photo_proc$fulcrum_id) &
!(sample_photo3 %in% data$nematode_field_sampling_sample_photo_proc$fulcrum_id) ~ NA_character_)) %>%
# Join nematode_field_sampling_sample_photo to above. In some cases there is not position data from the photos, returns NA for exif.
dplyr::left_join(data$nematode_field_sampling_sample_photo_proc, by = c("best_photo" = "fulcrum_id")) %>%
# Create flag to track if lat and long come from record or photo
dplyr::mutate(collection_lat_long_method = ifelse(is.na(exif_gps_latitude), "fulcrum", "photo")) %>%
# In cases where lat/lon are not available from photo set to collection_fulcrum_latitude and collection_fulcrum_longitude
dplyr::mutate(collection_latitude = ifelse(is.na(exif_gps_latitude), collection_fulcrum_latitude, exif_gps_latitude),
collection_longitude = ifelse(is.na(exif_gps_longitude), collection_fulcrum_longitude, exif_gps_longitude)) %>%
# Calculate the Haversine distance between fulcrum record_latitude and record_longitue and photo latitude and longitude
dplyr::rowwise() %>%
dplyr::mutate(collection_lat_long_method_diff = geosphere::distHaversine(c(collection_longitude, collection_latitude),
c(collection_fulcrum_longitude, collection_fulcrum_latitude)),
# adjust collection_lat_long_method_diff to NA if there is only a fulcrum GPS postion
collection_lat_long_method_diff = ifelse(collection_lat_long_method == "fulcrum", NA, collection_lat_long_method_diff)) %>%
dplyr::ungroup() %>%
# fix altitude method and altitude
dplyr::mutate(collection_altitude = ifelse(collection_lat_long_method == "photo" & !(is.na(exif_gps_altitude)), exif_gps_altitude,
ifelse(is.na(exif_gps_altitude) & !(is.na(fulcrum_altitude)), fulcrum_altitude,
ifelse(is.na(exif_gps_altitude) & is.na(fulcrum_altitude), NA))),
collection_altitude_method = ifelse(collection_lat_long_method == "photo" & !(is.na(exif_gps_altitude)), "photo",
ifelse(is.na(exif_gps_altitude) & !(is.na(fulcrum_altitude)), "fulcrum",
ifelse(is.na(exif_gps_altitude) & is.na(fulcrum_altitude), NA, NA)))) %>%
# set varible order
dplyr::select(project,
c_label,
flag_ambient_temperature,
flag_ambient_temperature_run,
flag_substrate_temperature,
flag_unusual_sample_photo_num,
flag_duplicated_c_label_field_sampling,
collection_by,
collection_datetime_UTC,
collection_date_UTC,
collection_local_time,
collection_fulcrum_latitude,
collection_fulcrum_longitude,
exif_gps_latitude,
exif_gps_longitude,
collection_latitude,
collection_longitude,
collection_lat_long_method,
collection_lat_long_method_diff,
fulcrum_altitude,
exif_gps_altitude,
collection_altitude,
collection_altitude_method,
landscape,
sky_view,
ambient_humidity,
substrate,
substrate_notes,
substrate_other,
raw_ambient_temperature,
proc_ambient_temperature,
raw_substrate_temperature,
proc_substrate_temperature,
gridsect,
gridsect_index,
gridsect_radius,
grid_sect_direction,
sample_photo1,
sample_photo2,
sample_photo3,
best_exif_dop_photo = best_photo,
best_sample_photo_caption,
gps_course,
gps_horizontal_accuracy,
gps_speed,
gps_vertical_accuracy)
}
# join all data
if(data_names$data_name %in% c("nematode_field_sampling_proc", "nematode_field_sampling_sample_photo_proc","data$nematode_isolation_proc",
"data$nematode_isolation_s_labeled_plates_proc", "data$nematode_isolation_photos_proc") &&
nrow(data_names) == 5) {
# send message
message("Complete fulcrum data detected, joining all data.")
# join nematode_field_sampling_proc with nematode_isolation_proc
joined_data <- dplyr::full_join(data$nematode_isolation_proc, data$nematode_field_sampling_proc, by = c("c_label_id" = "fulcrum_id")) %>%
dplyr::select(c_label,
everything(),
-c_label_id) %>%
# provide best_photo for joining
dplyr::mutate(best_photo = case_when(
sample_photo1 %in% data$nematode_field_sampling_sample_photo_proc$fulcrum_id ~ sample_photo1,
sample_photo2 %in% data$nematode_field_sampling_sample_photo_proc$fulcrum_id ~ sample_photo2,
sample_photo3 %in% data$nematode_field_sampling_sample_photo_proc$fulcrum_id ~ sample_photo3,
!(sample_photo1 %in% data$nematode_field_sampling_sample_photo_proc$fulcrum_id) & !(sample_photo2 %in% data$nematode_field_sampling_sample_photo_proc$fulcrum_id) &
!(sample_photo3 %in% data$nematode_field_sampling_sample_photo_proc$fulcrum_id) ~ NA_character_)) %>%
# Join nematode_field_sampling_sample_photo to above. In some cases there is not position data from the photos, returns NA for exif.
dplyr::left_join(data$nematode_field_sampling_sample_photo_proc, by = c("best_photo" = "fulcrum_id")) %>%
# Create flag to track if lat and long come from record or photo
dplyr::mutate(collection_lat_long_method = ifelse(is.na(exif_gps_latitude), "fulcrum", "photo")) %>%
# In cases where lat/lon are not available from photo set to collection_fulcrum_latitude and collection_fulcrum_longitude
dplyr::mutate(collection_latitude = ifelse(is.na(exif_gps_latitude), collection_fulcrum_latitude, exif_gps_latitude),
collection_longitude = ifelse(is.na(exif_gps_longitude), collection_fulcrum_longitude, exif_gps_longitude)) %>%
# Add flag for missing isolation records
dplyr::mutate(flag_missing_isolation_record = ifelse(is.na(isolation_by), TRUE, FALSE)) %>%
# Calculate the Haversine distance between fulcrum record_latitude and record_longitue and photo latitude and longitude
dplyr::rowwise() %>%
dplyr::mutate(collection_lat_long_method_diff = geosphere::distHaversine(c(collection_longitude, collection_latitude),
c(collection_fulcrum_longitude, collection_fulcrum_latitude)),
# adjust collection_lat_long_method_diff to NA if there is only a fulcrum GPS postion
collection_lat_long_method_diff = ifelse(collection_lat_long_method == "fulcrum", NA, collection_lat_long_method_diff)) %>%
# fix altitude method and altitude
dplyr::mutate(collection_altitude = ifelse(collection_lat_long_method == "photo" & !(is.na(exif_gps_altitude)), exif_gps_altitude,
ifelse(is.na(exif_gps_altitude) & !(is.na(fulcrum_altitude)), fulcrum_altitude,
ifelse(is.na(exif_gps_altitude) & is.na(fulcrum_altitude), NA))),
collection_altitude_method = ifelse(collection_lat_long_method == "photo" & !(is.na(exif_gps_altitude)), "photo",
ifelse(is.na(exif_gps_altitude) & !(is.na(fulcrum_altitude)), "fulcrum",
ifelse(is.na(exif_gps_altitude) & is.na(fulcrum_altitude), NA, NA)))) %>%
dplyr::ungroup() %>%
# join c-plates to s-plates with nematode_isolation_s_labeled_plates
dplyr::full_join(data$nematode_isolation_s_labeled_plates_proc, .,  by = c("fulcrum_parent_id" = "isolation_id")) %>%
dplyr::select(-fulcrum_parent_id, -updated_by, -version, -geometry, -assigned_to, -status) %>%
# set varible order
dplyr::select(project,
c_label,
s_label,
flag_ambient_temperature,
flag_ambient_temperature_run,
flag_substrate_temperature,
flag_unusual_sample_photo_num,
flag_duplicated_c_label_field_sampling,
flag_duplicated_isolation_for_c_label,
flag_duplicated_s_label_isolation_s_labeled_plates,
flag_missing_s_label_isolation_s_labeled_plates,
flag_missing_isolation_record,
collection_by,
collection_datetime_UTC,
collection_date_UTC,
collection_local_time,
collection_fulcrum_latitude,
collection_fulcrum_longitude,
exif_gps_latitude,
exif_gps_longitude,
collection_latitude,
collection_longitude,
collection_lat_long_method,
collection_lat_long_method_diff,
fulcrum_altitude,
exif_gps_altitude,
collection_altitude,
collection_altitude_method,
landscape,
sky_view,
ambient_humidity,
substrate,
substrate_notes,
substrate_other,
raw_ambient_temperature,
proc_ambient_temperature,
raw_substrate_temperature,
proc_substrate_temperature,
gridsect,
gridsect_index,
gridsect_radius,
grid_sect_direction,
sample_photo1,
sample_photo2,
sample_photo3,
best_exif_dop_photo = best_photo,
best_sample_photo_caption,
best_sample_photo_caption,
gps_course,
gps_horizontal_accuracy,
gps_speed,
gps_vertical_accuracy,
isolation_by,
isolation_datetime_UTC,
isolation_date_UTC,
isolation_local_time,
isolation_latitude,
isolation_longitude,
worms_on_sample,
approximate_number_of_worms)
}
else {
message("Invalid list of dataframes supplied to joinFulcrum. Are there 5 OR 2 processed dataframes in the list? Are they named correctly?")
}
# return data
return(joined_data)
}
# test joinFulcrum function
join_data1 <- joinFulcrum(proc_data1)
library(easyfulcrum)
library(tidyverse)
# set working directory
setwd(glue::glue("{dirname(rstudioapi::getActiveDocumentContext()$path)}/.."))
# setup test directory for multi project Fulcrum export
dir1 <- "test_data/2020FebruaryAustralia/data/fulcrum"
# test readFulcrum function
raw_data1 <- readFulcrum(dir1)
# test procFulcrum function
proc_data1 <- procFulcrum(raw_data1)
# test parameter_check function
parameter_check(proc_data1)
# test parameter_check function with optional parameters set to TRUE
test1 <- parameter_check(proc_data1, save = TRUE, return = TRUE)
# test joinFulcrum function
join_data1 <- joinFulcrum(proc_data1)
will_fail<- joinFulcrum(raw_data1)
# test initial_data_check function
initial_data_check(join_data1)
# test initial_data_check function with optional parameters set to TRUE
test2 <- initial_data_check(join_data1, save = TRUE, return = TRUE)
View(test2)
View(join_data1)
proc_data1$nematode_isolation_s_labeled_plates_proc
proc_slabs <- proc_data1$nematode_isolation_s_labeled_plates_proc
View(proc_slabs)
library(easyfulcrum)
library(easyfulcrum)
library(tidyverse)
# set working directory
setwd(glue::glue("{dirname(rstudioapi::getActiveDocumentContext()$path)}/.."))
# setup test directory for multi project Fulcrum export
dir1 <- "test_data/2020FebruaryAustralia/data/fulcrum"
# test readFulcrum function
raw_data1 <- readFulcrum(dir1)
# test procFulcrum function
proc_data1 <- procFulcrum(raw_data1)
# test parameter_check function
parameter_check(proc_data1)
# test joinFulcrum function
join_data1 <- joinFulcrum(proc_data1)
# test initial_data_check function
initial_data_check(join_data1)
# test initial_data_check function with optional parameters set to TRUE
test2 <- initial_data_check(join_data1, save = TRUE, return = TRUE)
# test annotateFulcrum
anno_data1 <- annotateFulcrum(join_data1)
# test readGenotypes function
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
devtools::document
()
devtools::document()
library(easyfulcrum)
library(easyfulcrum)
# set working directory
setwd(glue::glue("{dirname(rstudioapi::getActiveDocumentContext()$path)}/.."))
# setup test directory for multi project Fulcrum export
dir1 <- "test_data/2020FebruaryAustralia/data/fulcrum"
# test readFulcrum function
raw_data1 <- readFulcrum(dir1)
# test procFulcrum function
proc_data1 <- procFulcrum(raw_data1)
# test parameter_check function
parameter_check(proc_data1)
# test parameter_check function with optional parameters set to TRUE
test1 <- parameter_check(proc_data1, save = TRUE, return = TRUE)
# test joinFulcrum function
join_data1 <- joinFulcrum(proc_data1)
will_fail<- joinFulcrum(raw_data1)
# test initial_data_check function
initial_data_check(join_data1)
# test initial_data_check function with optional parameters set to TRUE
test2 <- initial_data_check(join_data1, save = TRUE, return = TRUE)
# test annotateFulcrum
anno_data1 <- annotateFulcrum(join_data1)
location <- getwd()
setwd(paste(location, "/R", sep = ""))
files.sources = list.files()
sapply(files.sources, source)
setwd(location)
# setup test directory for multi project Fulcrum export
dir1 <- "test_data/2020FebruaryAustralia/data/fulcrum"
dir2 <- "test_data/2018OctoberHawaii/data/fulcrum"
dir3 <- "test_data/2019DecemberHawaii/data/fulcrum"
dir4 <- "test_data/2019OctoberHawaii/data/fulcrum"
# test readFulcrum function
raw_data1 <- readFulcrum(dir1)
# setup test directory for multi project Fulcrum export
dir1 <- "test_data/2020FebruaryAustralia/data/fulcrum"
dir2 <- "test_data/2018OctoberHawaii/data/fulcrum"
dir3 <- "test_data/2019DecemberHawaii/data/fulcrum"
dir4 <- "test_data/2019OctoberHawaii/data/fulcrum"
devtools::document()
devtools::documnet()
devtools::document()
library(easyfulcrum)
# setup test directory for multi project Fulcrum export
dir1 <- "test_data/2020FebruaryAustralia/data/fulcrum"
dir2 <- "test_data/2018OctoberHawaii/data/fulcrum"
dir3 <- "test_data/2019DecemberHawaii/data/fulcrum"
dir4 <- "test_data/2019OctoberHawaii/data/fulcrum"
# test readFulcrum function
raw_data1 <- readFulcrum(dir1)
# test procFulcrum function
proc_data1 <- procFulcrum(raw_data1)
# test checkParameters function, will output rows with flags/rows related to those w flags
checkParameters(proc_data1)
# test checkParameters function, saves the output as a list of three dataframes of flagged rows
flag1.1 <- checkParameters(proc_data1, return = TRUE)
View(flag1.1)
# easier to see which rows we might want to edit
View(flag1.1)
# upon further inspection we select two rows for ambient_temperature_run to be set to NA
to_change <- c("c5b0cabf-ded8-4c3d-9915-b3c94b913686", "fb975ace-0036-4a80-b073-8ff638f35786")
proc_data1_clean <- fixParameters(proc_data1, ambient_temperature_run_ids = to_change)
# Recheck to see if fixParameters worked
checkParameters(proc_data1_clean)
View(proc_data1_clean)
test1 <- proc_data1$nematode_field_sampling_proc
View(test1)
test2 <- proc_data1_clean$nematode_field_sampling_proc
View(test2)
print(glue::glue("{proc_data1_clean$nematode_field_sampling_proc %>% dplyr::filter(fulcrum_id %in% to_change) %>%
dplyr::select(fulcrum_id, raw_ambient_temperature, proc_ambient_temperature, flag_ambient_temperature_run"))
print(glue::glue("{proc_data1_clean$nematode_field_sampling_proc %>% dplyr::filter(fulcrum_id %in% to_change) %>%
dplyr::select(fulcrum_id, raw_ambient_temperature, proc_ambient_temperature, flag_ambient_temperature_run}"))
print(glue::glue("{proc_data1_clean$nematode_field_sampling_proc %>% dplyr::filter(fulcrum_id %in% to_change) %>%
dplyr::select(fulcrum_id, raw_ambient_temperature, proc_ambient_temperature, flag_ambient_temperature_run)}"))
print(glue::glue("{proc_data1_clean$nematode_field_sampling_proc %>% dplyr::filter(fulcrum_id %in% to_change) %>%
dplyr::select(fulcrum_id, raw_ambient_temperature, proc_ambient_temperature, flag_ambient_temperature_run)}"))
# Recheck to see if fixParameters worked
checkParameters(proc_data1_clean)
library(easyfulcrum)
# setup test directory for multi project Fulcrum export
dir1 <- "test_data/2020FebruaryAustralia/data/fulcrum"
dir2 <- "test_data/2018OctoberHawaii/data/fulcrum"
dir3 <- "test_data/2019DecemberHawaii/data/fulcrum"
dir4 <- "test_data/2019OctoberHawaii/data/fulcrum"
# test readFulcrum function
raw_data1 <- readFulcrum(dir1)
# test procFulcrum function
proc_data1 <- procFulcrum(raw_data1)
# test checkParameters function, will output rows with flags/rows related to those w flags
checkParameters(proc_data1)
# test checkParameters function, saves the output as a list of three dataframes of flagged rows
flag1.1 <- checkParameters(proc_data1, return = TRUE)
# easier to see which rows we might want to edit
View(flag1.1)
# upon further inspection we select two rows for ambient_temperature_run to be set to NA
to_change <- c("c5b0cabf-ded8-4c3d-9915-b3c94b913686", "fb975ace-0036-4a80-b073-8ff638f35786")
proc_data1_clean <- fixParameters(proc_data1, ambient_temperature_run_ids = to_change)
# Recheck to see if fixParameters worked
checkParameters(proc_data1_clean)
print(glue::glue("{proc_data1_clean$nematode_field_sampling_proc %>% dplyr::filter(fulcrum_id %in% to_change) %>%
dplyr::select(fulcrum_id, raw_ambient_temperature, proc_ambient_temperature, flag_ambient_temperature_run)}"))
library(tidyverse)
print(glue::glue("{proc_data1_clean$nematode_field_sampling_proc %>% dplyr::filter(fulcrum_id %in% to_change) %>%
dplyr::select(fulcrum_id, raw_ambient_temperature, proc_ambient_temperature, flag_ambient_temperature_run)}"))
print(glue::glue("{table(proc_data1_clean$nematode_field_sampling_proc %>% dplyr::filter(fulcrum_id %in% to_change) %>%
dplyr::select(fulcrum_id, raw_ambient_temperature, proc_ambient_temperature, flag_ambient_temperature_run)_}"))
print(glue::glue("{table(proc_data1_clean$nematode_field_sampling_proc %>% dplyr::filter(fulcrum_id %in% to_change) %>%
dplyr::select(fulcrum_id, raw_ambient_temperature, proc_ambient_temperature, flag_ambient_temperature_run)}"))
# test checkProc function, will output info with flags/rows related to those flags
checkProc(proc_data1)
proc_data1[[3]]
View(proc_data1)
test3 <- proc_data1$nematode_isolation_proc
View(test3)
# test checkParameters function, saves the output as a list of six dataframes of flagged rows
flag1.2 <- checkProc(proc_data1, return = TRUE)
View(flag1.2)
flag1.2[[4]]
# test joinFulcrum function
join_data1 <- joinFulcrum(proc_data1)
# test checkProc function, will output info of flags/rows related to those flags
checkJoin(join_data1)
# test checkProc function, saves the output as a dataframe of flagged rows
flag1.3 <- checkJoin(join_data1, return = TRUE)
# test annotateFulcrum fuction
anno_data1 <- annotateFulcrum(join_data1)
debug(annotateFulcrum)
# test annotateFulcrum fuction
anno_data1 <- annotateFulcrum(join_data1)
View(location)
View(trails_df)
# test annotateFulcrum fuction
anno_data1 <- annotateFulcrum(join_data1)
# test annotateFulcrum fuction
anno_data1 <- annotateFulcrum(join_data1)
View(trails_df)
View(trails_df)
View(trails)
# test readGenotypes function
geno_data4 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
# test readGenotypes function
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
library(tidyverse)
library(rebus)
library(imager)
library(raster)
library(easyXpress)
makeThumbs <- function(dir, percentage = 20) {
# list files to make thumbnails
orig_file_name <- list.files(dir)
# find file names for photos where nematodes with strain names were isolated
to_change <- as.data.frame(orig_file_name) %>%
dplyr::filter(orig_file_name != "thumbnails") %>%
dplyr::mutate(orig_file_name_full = glue::glue("{dir}/{orig_file_name}"),
thumb_file_name = glue::glue("{dir}/thumbnails/{orig_file_name}"),
thumb_file_name = stringr::str_replace(thumb_file_name,
pattern = DOT %R% ANY_CHAR %R% ANY_CHAR %R% ANY_CHAR %R% optional(ANY_CHAR) %R% END,
replacement = "_thumbnail.png"))
# make thumbnails subdirectory in dir
fs::dir_create(glue::glue("{dir}/thumbnails"))
# loop through renamed images to make thumbnails
for(i in unique(to_change$orig_file_name_full)) {
# message for thumbs
message(glue::glue("making thumbnail image for {i}"))
# setup image in R
img <- imager::load.image(i)
# resize to make thumbnail
thumb <- imager::resize(img, -percentage, -percentage) # need negative for resize function
# write the file
imager::save.image(thumb, file = glue::glue("{to_change %>% dplyr::filter(orig_file_name_full == i) %>% dplyr::pull(thumb_file_name)}"))
}
}
# testing plate view function with facet wrap
dir <- "~/Dropbox/AndersenLab/LabFolders/Tim/projects/plateView_compressed/raw_images"
# run function
makeThumbs(dir = dir)
