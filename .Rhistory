proc_F_v1 <- data[[stringr::str_which(data_names, pattern = "_field_sampling$")]] %>%
dplyr::mutate(c_label = stringr::str_to_upper(c_label)) %>%
# name created_by to specify who picked up the sample
dplyr::rename(collection_by = created_by,
collection_fulcrum_latitude = latitude,
collection_fulcrum_longitude = longitude,
fulcrum_altitude = gps_altitude,
collection_local_time = time) %>%
dplyr::select(-updated_at,
-system_created_at,
-system_updated_at,
-date,
-sample_photo_caption, # not needed here, can bring in from photo export
-sample_photo_url,
-updated_by, -version, -status, -assigned_to, -geometry) %>% # make custom urls later with function
# this is UTC time (very important if you want to convert to local time)
dplyr::mutate(collection_datetime_UTC = lubridate::ymd_hms(created_at, tz = "UTC")) %>%
# again this is UTC date (very important if you want to convert to local date)
dplyr::mutate(collection_date_UTC = lubridate::date(created_at)) %>%
dplyr::select(-created_at) %>%
# Flag Fahrenheit observations and fix in proc
dplyr::mutate(flag_substrate_temperature = ifelse(substrate_temperature > 40, TRUE, FALSE),
proc_substrate_temperature = ifelse(substrate_temperature > 40,
FtoC(substrate_temperature),
substrate_temperature)) %>%
# Rename sub_temp with raw prefix
dplyr::rename(raw_substrate_temperature = substrate_temperature) %>%
# Fix ambient temp F to C
dplyr::mutate(flag_ambient_temperature = ifelse(ambient_temperature_c > 40, TRUE, FALSE),
proc_ambient_temperature = ifelse(ambient_temperature_c > 40,
FtoC(ambient_temperature_c),
ambient_temperature_c)) %>%
# Rename ambient_temp with raw prefix
dplyr::rename(raw_ambient_temperature = ambient_temperature_c) %>%
# force ambient temp to numeric
dplyr::mutate(raw_ambient_temperature = as.numeric(raw_ambient_temperature)) %>%
# add flags for runs of temperature data
dplyr::arrange(collection_datetime_UTC) %>%
dplyr::mutate(flag_ambient_temperature_run = ifelse(ambient_humidity == dplyr::lag(ambient_humidity) &
raw_ambient_temperature == dplyr::lag(raw_ambient_temperature) & gridsect == "no", TRUE, FALSE),
run_length = runner::streak_run(flag_ambient_temperature_run),
flag_ambient_temperature_run2 = case_when((run_length >= 4 & flag_ambient_temperature_run == TRUE)  ~ "1",
#(dplyr::lead(run_length, n = 3L) > 5 & flag_ambient_temperature_run == TRUE) ~ "2",
#(dplyr::lead(run_length, n = 2L) > 4 & flag_ambient_temperature_run == TRUE) ~ "3",
(dplyr::lead(run_length, n = 1L) > 1 & flag_ambient_temperature_run == TRUE) ~ "4",
TRUE ~ "F")) #
View(proc_F_v1)
#=============================================#
# make Robyns data
#=============================================#
proc_F_v1 <- data[[stringr::str_which(data_names, pattern = "_field_sampling$")]] %>%
dplyr::mutate(c_label = stringr::str_to_upper(c_label)) %>%
# name created_by to specify who picked up the sample
dplyr::rename(collection_by = created_by,
collection_fulcrum_latitude = latitude,
collection_fulcrum_longitude = longitude,
fulcrum_altitude = gps_altitude,
collection_local_time = time) %>%
dplyr::select(-updated_at,
-system_created_at,
-system_updated_at,
-date,
-sample_photo_caption, # not needed here, can bring in from photo export
-sample_photo_url,
-updated_by, -version, -status, -assigned_to, -geometry) %>% # make custom urls later with function
# this is UTC time (very important if you want to convert to local time)
dplyr::mutate(collection_datetime_UTC = lubridate::ymd_hms(created_at, tz = "UTC")) %>%
# again this is UTC date (very important if you want to convert to local date)
dplyr::mutate(collection_date_UTC = lubridate::date(created_at)) %>%
dplyr::select(-created_at) %>%
# Flag Fahrenheit observations and fix in proc
dplyr::mutate(flag_substrate_temperature = ifelse(substrate_temperature > 40, TRUE, FALSE),
proc_substrate_temperature = ifelse(substrate_temperature > 40,
FtoC(substrate_temperature),
substrate_temperature)) %>%
# Rename sub_temp with raw prefix
dplyr::rename(raw_substrate_temperature = substrate_temperature) %>%
# Fix ambient temp F to C
dplyr::mutate(flag_ambient_temperature = ifelse(ambient_temperature_c > 40, TRUE, FALSE),
proc_ambient_temperature = ifelse(ambient_temperature_c > 40,
FtoC(ambient_temperature_c),
ambient_temperature_c)) %>%
# Rename ambient_temp with raw prefix
dplyr::rename(raw_ambient_temperature = ambient_temperature_c) %>%
# force ambient temp to numeric
dplyr::mutate(raw_ambient_temperature = as.numeric(raw_ambient_temperature)) %>%
# add flags for runs of temperature data
dplyr::arrange(collection_datetime_UTC) %>%
dplyr::mutate(flag_ambient_temperature_run = ifelse(ambient_humidity == dplyr::lag(ambient_humidity) &
raw_ambient_temperature == dplyr::lag(raw_ambient_temperature) & gridsect == "no", TRUE, FALSE),
run_length = runner::streak_run(flag_ambient_temperature_run),
flag_ambient_temperature_run2 = case_when((run_length >= 4 & flag_ambient_temperature_run == TRUE)  ~ "1",
(dplyr::lead(run_length, n = 3L) >= 4 & flag_ambient_temperature_run == TRUE) ~ "4",
(dplyr::lead(run_length, n = 2L) >= 4 & flag_ambient_temperature_run == TRUE) ~ "3",
(dplyr::lead(run_length, n = 1L) >= 4 & flag_ambient_temperature_run == TRUE) ~ "2",
TRUE ~ "F")) #
View(proc_F_v1)
dir <- "~/Desktop/2020JanuaryHawaii"
dir <- "~/Desktop/2020JanuaryHawaii"
r2_raw_fulc <- readFulcrum(dir = dir)
r2_proc_fulc <- procFulcrum(data = raw_fulc)
r2_proc_fulc <- procFulcrum(data = raw_fulc)
#=============================================#
# make Robyns data
#=============================================#
proc_F_v2 <- data[[stringr::str_which(data_names, pattern = "_field_sampling$")]] %>%
dplyr::mutate(c_label = stringr::str_to_upper(c_label)) %>%
# name created_by to specify who picked up the sample
dplyr::rename(collection_by = created_by,
collection_fulcrum_latitude = latitude,
collection_fulcrum_longitude = longitude,
fulcrum_altitude = gps_altitude,
collection_local_time = time) %>%
dplyr::select(-updated_at,
-system_created_at,
-system_updated_at,
-date,
-sample_photo_caption, # not needed here, can bring in from photo export
-sample_photo_url,
-updated_by, -version, -status, -assigned_to, -geometry) %>% # make custom urls later with function
# this is UTC time (very important if you want to convert to local time)
dplyr::mutate(collection_datetime_UTC = lubridate::ymd_hms(created_at, tz = "UTC")) %>%
# again this is UTC date (very important if you want to convert to local date)
dplyr::mutate(collection_date_UTC = lubridate::date(created_at)) %>%
dplyr::select(-created_at) %>%
# Flag Fahrenheit observations and fix in proc
dplyr::mutate(flag_substrate_temperature = ifelse(substrate_temperature > 40, TRUE, FALSE),
proc_substrate_temperature = ifelse(substrate_temperature > 40,
FtoC(substrate_temperature),
substrate_temperature)) %>%
# Rename sub_temp with raw prefix
dplyr::rename(raw_substrate_temperature = substrate_temperature) %>%
# Fix ambient temp F to C
dplyr::mutate(flag_ambient_temperature = ifelse(ambient_temperature_c > 40, TRUE, FALSE),
proc_ambient_temperature = ifelse(ambient_temperature_c > 40,
FtoC(ambient_temperature_c),
ambient_temperature_c)) %>%
# Rename ambient_temp with raw prefix
dplyr::rename(raw_ambient_temperature = ambient_temperature_c) %>%
# force ambient temp to numeric
dplyr::mutate(raw_ambient_temperature = as.numeric(raw_ambient_temperature)) %>%
# add flags for runs of temperature data
dplyr::arrange(collection_datetime_UTC) %>%
dplyr::mutate(flag_ambient_temperature_run = ifelse(ambient_humidity == dplyr::lag(ambient_humidity) &
raw_ambient_temperature == dplyr::lag(raw_ambient_temperature) & gridsect == "no", TRUE, FALSE),
run_length = runner::streak_run(flag_ambient_temperature_run),
flag_ambient_temperature_run2 = case_when((run_length >= 4 & flag_ambient_temperature_run == TRUE)  ~ "1",
(dplyr::lead(run_length, n = 3L) >= 4 & flag_ambient_temperature_run == TRUE) ~ "4",
(dplyr::lead(run_length, n = 2L) >= 4 & flag_ambient_temperature_run == TRUE) ~ "3",
(dplyr::lead(run_length, n = 1L) >= 4 & flag_ambient_temperature_run == TRUE) ~ "2",
TRUE ~ "F")) #
#=============================================#
# make Robyns data
#=============================================#
proc_F_v2 <- data[[stringr::str_which(data_names, pattern = "_field_sampling$")]] %>%
dplyr::mutate(c_label = stringr::str_to_upper(c_label)) %>%
# name created_by to specify who picked up the sample
dplyr::rename(collection_by = created_by,
collection_fulcrum_latitude = latitude,
collection_fulcrum_longitude = longitude,
fulcrum_altitude = gps_altitude,
collection_local_time = time) %>%
dplyr::select(-updated_at,
-system_created_at,
-system_updated_at,
-date,
-sample_photo_caption, # not needed here, can bring in from photo export
-sample_photo_url,
-updated_by, -version, -status, -assigned_to, -geometry) %>% # make custom urls later with function
# this is UTC time (very important if you want to convert to local time)
dplyr::mutate(collection_datetime_UTC = lubridate::ymd_hms(created_at, tz = "UTC")) %>%
# again this is UTC date (very important if you want to convert to local date)
dplyr::mutate(collection_date_UTC = lubridate::date(created_at)) %>%
dplyr::select(-created_at) %>%
# Flag Fahrenheit observations and fix in proc
dplyr::mutate(flag_substrate_temperature = ifelse(substrate_temperature > 40, TRUE, FALSE),
proc_substrate_temperature = ifelse(substrate_temperature > 40,
FtoC(substrate_temperature),
substrate_temperature)) %>%
# Rename sub_temp with raw prefix
dplyr::rename(raw_substrate_temperature = substrate_temperature) %>%
# Fix ambient temp F to C
dplyr::mutate(flag_ambient_temperature = ifelse(ambient_temperature_c > 40, TRUE, FALSE),
proc_ambient_temperature = ifelse(ambient_temperature_c > 40,
FtoC(ambient_temperature_c),
ambient_temperature_c)) %>%
# Rename ambient_temp with raw prefix
dplyr::rename(raw_ambient_temperature = ambient_temperature_c) %>%
# force ambient temp to numeric
dplyr::mutate(raw_ambient_temperature = as.numeric(raw_ambient_temperature)) %>%
# add flags for runs of temperature data
dplyr::arrange(collection_datetime_UTC) %>%
dplyr::mutate(flag_ambient_temperature_run = ifelse(ambient_humidity == dplyr::lag(ambient_humidity) &
raw_ambient_temperature == dplyr::lag(raw_ambient_temperature) & gridsect == "no", TRUE, FALSE),
run_length = runner::streak_run(flag_ambient_temperature_run),
flag_ambient_temperature_run2 = case_when((run_length >= 4 & flag_ambient_temperature_run == TRUE)  ~ "1",
(dplyr::lead(run_length, n = 3L) >= 4 & flag_ambient_temperature_run == TRUE) ~ "4",
(dplyr::lead(run_length, n = 2L) >= 4 & flag_ambient_temperature_run == TRUE) ~ "3",
(dplyr::lead(run_length, n = 1L) >= 4 & flag_ambient_temperature_run == TRUE) ~ "2",
TRUE ~ "F")) #
View(proc_F_v2)
dir <- "~/Desktop/2020JanuaryHawaii"
r2_raw_fulc <- readFulcrum(dir = dir)
r2_proc_fulc <- procFulcrum(data = r2_raw_fulc)
#=============================================#
# make Robyns data
#=============================================#
proc_F_v2 <- data[[stringr::str_which(data_names, pattern = "_field_sampling$")]] %>%
dplyr::mutate(c_label = stringr::str_to_upper(c_label)) %>%
# name created_by to specify who picked up the sample
dplyr::rename(collection_by = created_by,
collection_fulcrum_latitude = latitude,
collection_fulcrum_longitude = longitude,
fulcrum_altitude = gps_altitude,
collection_local_time = time) %>%
dplyr::select(-updated_at,
-system_created_at,
-system_updated_at,
-date,
-sample_photo_caption, # not needed here, can bring in from photo export
-sample_photo_url,
-updated_by, -version, -status, -assigned_to, -geometry) %>% # make custom urls later with function
# this is UTC time (very important if you want to convert to local time)
dplyr::mutate(collection_datetime_UTC = lubridate::ymd_hms(created_at, tz = "UTC")) %>%
# again this is UTC date (very important if you want to convert to local date)
dplyr::mutate(collection_date_UTC = lubridate::date(created_at)) %>%
dplyr::select(-created_at) %>%
# Flag Fahrenheit observations and fix in proc
dplyr::mutate(flag_substrate_temperature = ifelse(substrate_temperature > 40, TRUE, FALSE),
proc_substrate_temperature = ifelse(substrate_temperature > 40,
FtoC(substrate_temperature),
substrate_temperature)) %>%
# Rename sub_temp with raw prefix
dplyr::rename(raw_substrate_temperature = substrate_temperature) %>%
# Fix ambient temp F to C
dplyr::mutate(flag_ambient_temperature = ifelse(ambient_temperature_c > 40, TRUE, FALSE),
proc_ambient_temperature = ifelse(ambient_temperature_c > 40,
FtoC(ambient_temperature_c),
ambient_temperature_c)) %>%
# Rename ambient_temp with raw prefix
dplyr::rename(raw_ambient_temperature = ambient_temperature_c) %>%
# force ambient temp to numeric
dplyr::mutate(raw_ambient_temperature = as.numeric(raw_ambient_temperature)) %>%
# add flags for runs of temperature data
dplyr::arrange(collection_datetime_UTC) %>%
dplyr::mutate(flag_ambient_temperature_run = ifelse(ambient_humidity == dplyr::lag(ambient_humidity) &
raw_ambient_temperature == dplyr::lag(raw_ambient_temperature) & gridsect == "no", TRUE, FALSE),
run_length = runner::streak_run(flag_ambient_temperature_run),
flag_ambient_temperature_run2 = case_when((run_length >= 4 & flag_ambient_temperature_run == TRUE)  ~ "1",
(dplyr::lead(run_length, n = 3L) >= 4 & flag_ambient_temperature_run == TRUE) ~ "4",
(dplyr::lead(run_length, n = 2L) >= 4 & flag_ambient_temperature_run == TRUE) ~ "3",
(dplyr::lead(run_length, n = 1L) >= 4 & flag_ambient_temperature_run == TRUE) ~ "2",
TRUE ~ "F")) #
View(proc_F_v2)
r3_raw_fulc <- readFulcrum(dir = dir)
#=============================================#
# make Robyns data
#=============================================#
proc_F_v3 <- data[[stringr::str_which(data_names, pattern = "_field_sampling$")]] %>%
dplyr::mutate(c_label = stringr::str_to_upper(c_label)) %>%
# name created_by to specify who picked up the sample
dplyr::rename(collection_by = created_by,
collection_fulcrum_latitude = latitude,
collection_fulcrum_longitude = longitude,
fulcrum_altitude = gps_altitude,
collection_local_time = time) %>%
dplyr::select(-updated_at,
-system_created_at,
-system_updated_at,
-date,
-sample_photo_caption, # not needed here, can bring in from photo export
-sample_photo_url,
-updated_by, -version, -status, -assigned_to, -geometry) %>% # make custom urls later with function
# this is UTC time (very important if you want to convert to local time)
dplyr::mutate(collection_datetime_UTC = lubridate::ymd_hms(created_at, tz = "UTC")) %>%
# again this is UTC date (very important if you want to convert to local date)
dplyr::mutate(collection_date_UTC = lubridate::date(created_at)) %>%
dplyr::select(-created_at) %>%
# Flag Fahrenheit observations and fix in proc
dplyr::mutate(flag_substrate_temperature = ifelse(substrate_temperature > 40, TRUE, FALSE),
proc_substrate_temperature = ifelse(substrate_temperature > 40,
FtoC(substrate_temperature),
substrate_temperature)) %>%
# Rename sub_temp with raw prefix
dplyr::rename(raw_substrate_temperature = substrate_temperature) %>%
# Fix ambient temp F to C
dplyr::mutate(flag_ambient_temperature = ifelse(ambient_temperature_c > 40, TRUE, FALSE),
proc_ambient_temperature = ifelse(ambient_temperature_c > 40,
FtoC(ambient_temperature_c),
ambient_temperature_c)) %>%
# Rename ambient_temp with raw prefix
dplyr::rename(raw_ambient_temperature = ambient_temperature_c) %>%
# force ambient temp to numeric
dplyr::mutate(raw_ambient_temperature = as.numeric(raw_ambient_temperature)) %>%
# add flags for runs of temperature data
dplyr::arrange(collection_datetime_UTC) %>%
dplyr::mutate(flag_ambient_temperature_run = ifelse(ambient_humidity == dplyr::lag(ambient_humidity) &
raw_ambient_temperature == dplyr::lag(raw_ambient_temperature) & gridsect == "no", TRUE, FALSE),
run_length = runner::streak_run(flag_ambient_temperature_run),
flag_ambient_temperature_run2 = case_when((run_length >= 4 & flag_ambient_temperature_run == TRUE)  ~ "1",
(dplyr::lead(run_length, n = 3L) >= 4 & flag_ambient_temperature_run == TRUE) ~ "4",
(dplyr::lead(run_length, n = 2L) >= 4 & flag_ambient_temperature_run == TRUE) ~ "3",
(dplyr::lead(run_length, n = 1L) >= 4 & flag_ambient_temperature_run == TRUE) ~ "2",
TRUE ~ "F")) #
View(proc_F_v3)
r3_raw_fulc <- readFulcrum(dir = dir)
r3_proc_fulc <- procFulcrum(data = r3_raw_fulc)
#=============================================#
# make Robyns data
#=============================================#
proc_F_v3 <- data[[stringr::str_which(data_names, pattern = "_field_sampling$")]] %>%
dplyr::mutate(c_label = stringr::str_to_upper(c_label)) %>%
# name created_by to specify who picked up the sample
dplyr::rename(collection_by = created_by,
collection_fulcrum_latitude = latitude,
collection_fulcrum_longitude = longitude,
fulcrum_altitude = gps_altitude,
collection_local_time = time) %>%
dplyr::select(-updated_at,
-system_created_at,
-system_updated_at,
-date,
-sample_photo_caption, # not needed here, can bring in from photo export
-sample_photo_url,
-updated_by, -version, -status, -assigned_to, -geometry) %>% # make custom urls later with function
# this is UTC time (very important if you want to convert to local time)
dplyr::mutate(collection_datetime_UTC = lubridate::ymd_hms(created_at, tz = "UTC")) %>%
# again this is UTC date (very important if you want to convert to local date)
dplyr::mutate(collection_date_UTC = lubridate::date(created_at)) %>%
dplyr::select(-created_at) %>%
# Flag Fahrenheit observations and fix in proc
dplyr::mutate(flag_substrate_temperature = ifelse(substrate_temperature > 40, TRUE, FALSE),
proc_substrate_temperature = ifelse(substrate_temperature > 40,
FtoC(substrate_temperature),
substrate_temperature)) %>%
# Rename sub_temp with raw prefix
dplyr::rename(raw_substrate_temperature = substrate_temperature) %>%
# Fix ambient temp F to C
dplyr::mutate(flag_ambient_temperature = ifelse(ambient_temperature_c > 40, TRUE, FALSE),
proc_ambient_temperature = ifelse(ambient_temperature_c > 40,
FtoC(ambient_temperature_c),
ambient_temperature_c)) %>%
# Rename ambient_temp with raw prefix
dplyr::rename(raw_ambient_temperature = ambient_temperature_c) %>%
# force ambient temp to numeric
dplyr::mutate(raw_ambient_temperature = as.numeric(raw_ambient_temperature)) %>%
# add flags for runs of temperature data
dplyr::arrange(collection_datetime_UTC) %>%
dplyr::mutate(flag_ambient_temperature_run = ifelse(ambient_humidity == dplyr::lag(ambient_humidity) &
raw_ambient_temperature == dplyr::lag(raw_ambient_temperature) & gridsect == "no", TRUE, FALSE),
run_length = runner::streak_run(flag_ambient_temperature_run),
flag_ambient_temperature_run2 = case_when((run_length >= 4 & flag_ambient_temperature_run == TRUE)  ~ "1",
(dplyr::lead(run_length, n = 3L) >= 4 & flag_ambient_temperature_run == TRUE) ~ "4",
(dplyr::lead(run_length, n = 2L) >= 4 & flag_ambient_temperature_run == TRUE) ~ "3",
(dplyr::lead(run_length, n = 1L) >= 4 & flag_ambient_temperature_run == TRUE) ~ "2",
TRUE ~ "F")) #
View(proc_F_v3)
r4_raw_fulc <- readFulcrum(dir = dir)
r4_raw_fulc <- readFulcrum(dir = dir)
r4_proc_fulc <- procFulcrum(data = r4_raw_fulc)
#=============================================#
# make Robyns data
#=============================================#
proc_F_v4 <- data[[stringr::str_which(data_names, pattern = "_field_sampling$")]] %>%
dplyr::mutate(c_label = stringr::str_to_upper(c_label)) %>%
# name created_by to specify who picked up the sample
dplyr::rename(collection_by = created_by,
collection_fulcrum_latitude = latitude,
collection_fulcrum_longitude = longitude,
fulcrum_altitude = gps_altitude,
collection_local_time = time) %>%
dplyr::select(-updated_at,
-system_created_at,
-system_updated_at,
-date,
-sample_photo_caption, # not needed here, can bring in from photo export
-sample_photo_url,
-updated_by, -version, -status, -assigned_to, -geometry) %>% # make custom urls later with function
# this is UTC time (very important if you want to convert to local time)
dplyr::mutate(collection_datetime_UTC = lubridate::ymd_hms(created_at, tz = "UTC")) %>%
# again this is UTC date (very important if you want to convert to local date)
dplyr::mutate(collection_date_UTC = lubridate::date(created_at)) %>%
dplyr::select(-created_at) %>%
# Flag Fahrenheit observations and fix in proc
dplyr::mutate(flag_substrate_temperature = ifelse(substrate_temperature > 40, TRUE, FALSE),
proc_substrate_temperature = ifelse(substrate_temperature > 40,
FtoC(substrate_temperature),
substrate_temperature)) %>%
# Rename sub_temp with raw prefix
dplyr::rename(raw_substrate_temperature = substrate_temperature) %>%
# Fix ambient temp F to C
dplyr::mutate(flag_ambient_temperature = ifelse(ambient_temperature_c > 40, TRUE, FALSE),
proc_ambient_temperature = ifelse(ambient_temperature_c > 40,
FtoC(ambient_temperature_c),
ambient_temperature_c)) %>%
# Rename ambient_temp with raw prefix
dplyr::rename(raw_ambient_temperature = ambient_temperature_c) %>%
# force ambient temp to numeric
dplyr::mutate(raw_ambient_temperature = as.numeric(raw_ambient_temperature)) %>%
# add flags for runs of temperature data
dplyr::arrange(collection_datetime_UTC) %>%
dplyr::mutate(flag_ambient_temperature_run = ifelse(ambient_humidity == dplyr::lag(ambient_humidity) &
raw_ambient_temperature == dplyr::lag(raw_ambient_temperature) & gridsect == "no", TRUE, FALSE),
run_length = runner::streak_run(flag_ambient_temperature_run),
flag_ambient_temperature_run2 = case_when((run_length >= 4 & flag_ambient_temperature_run == TRUE)  ~ "1",
(dplyr::lead(run_length, n = 3L) >= 4 & flag_ambient_temperature_run == TRUE) ~ "4",
(dplyr::lead(run_length, n = 2L) >= 4 & flag_ambient_temperature_run == TRUE) ~ "3",
(dplyr::lead(run_length, n = 1L) >= 4 & flag_ambient_temperature_run == TRUE) ~ "2",
TRUE ~ "F")) #
View(proc_F_v4)
#=============================================#
# make Robyns data
#=============================================#
proc_F_v4 <- data[[stringr::str_which(data_names, pattern = "_field_sampling$")]] %>%
dplyr::mutate(c_label = stringr::str_to_upper(c_label)) %>%
# name created_by to specify who picked up the sample
dplyr::rename(collection_by = created_by,
collection_fulcrum_latitude = latitude,
collection_fulcrum_longitude = longitude,
fulcrum_altitude = gps_altitude,
collection_local_time = time) %>%
dplyr::select(-updated_at,
-system_created_at,
-system_updated_at,
-date,
-sample_photo_caption, # not needed here, can bring in from photo export
-sample_photo_url,
-updated_by, -version, -status, -assigned_to, -geometry) %>% # make custom urls later with function
# this is UTC time (very important if you want to convert to local time)
dplyr::mutate(collection_datetime_UTC = lubridate::ymd_hms(created_at, tz = "UTC")) %>%
# again this is UTC date (very important if you want to convert to local date)
dplyr::mutate(collection_date_UTC = lubridate::date(created_at)) %>%
dplyr::select(-created_at) %>%
# Flag Fahrenheit observations and fix in proc
dplyr::mutate(flag_substrate_temperature = ifelse(substrate_temperature > 40, TRUE, FALSE),
proc_substrate_temperature = ifelse(substrate_temperature > 40,
FtoC(substrate_temperature),
substrate_temperature)) %>%
# Rename sub_temp with raw prefix
dplyr::rename(raw_substrate_temperature = substrate_temperature) %>%
# Fix ambient temp F to C
dplyr::mutate(flag_ambient_temperature = ifelse(ambient_temperature_c > 40, TRUE, FALSE),
proc_ambient_temperature = ifelse(ambient_temperature_c > 40,
FtoC(ambient_temperature_c),
ambient_temperature_c)) %>%
# Rename ambient_temp with raw prefix
dplyr::rename(raw_ambient_temperature = ambient_temperature_c) %>%
# force ambient temp to numeric
dplyr::mutate(raw_ambient_temperature = as.numeric(raw_ambient_temperature)) %>%
# add flags for runs of temperature data
dplyr::arrange(collection_datetime_UTC) %>%
dplyr::mutate(flag_ambient_temperature_run = ifelse(ambient_humidity == dplyr::lag(ambient_humidity) &
raw_ambient_temperature == dplyr::lag(raw_ambient_temperature) & gridsect == "no", TRUE, FALSE),
run_length = runner::streak_run(flag_ambient_temperature_run),
flag_ambient_temperature_run2 = case_when((run_length >= 4 & flag_ambient_temperature_run == TRUE)  ~ T,
(dplyr::lead(run_length, n = 3L) >= 4 & flag_ambient_temperature_run == TRUE) ~ T,
(dplyr::lead(run_length, n = 2L) >= 4 & flag_ambient_temperature_run == TRUE) ~ T,
(dplyr::lead(run_length, n = 1L) >= 4 & flag_ambient_temperature_run == TRUE) ~ T,
TRUE ~ F)) #
View(proc_F_v4)
library(easyfulcrum)
library(easyfulcrum)
devtools::document()
devtools::document()
makeDirStructure(startdir = "~/Desktop",
projectdirname = "2020JanuaryHawaii")
loadExampleFiles(startdir = "~/Desktop",
projectdirname = "2020JanuaryHawaii")
dir <- "~/Desktop/2020JanuaryHawaii"
raw_fulc <- readFulcrum(dir = dir)
proc_fulc <- procFulcrum(data = raw_fulc)
# look at behavior of procFulcrum run flag
test <- proc_fulc$field_sampling_proc
View(test)
devtools::document()
proc_fulc <- procFulcrum(data = raw_fulc)
# look at behavior of procFulcrum run flag
test <- proc_fulc$field_sampling_proc
View(test)
# look at behavior of procFulcrum run flag
test <- proc_fulc$field_sampling_proc %>%
dplyr::filter(ambient_temperature_run == TRUE) %>%
dplyr::pull(fulcrum_id)
# look at behavior of procFulcrum run flag
test <- proc_fulc$field_sampling_proc %>%
dplyr::filter(ambient_temperature_run == TRUE) %>%
dplyr::pull(fulcrum_id)
# look at behavior of procFulcrum run flag
test <- proc_fulc$field_sampling_proc %>%
dplyr::filter(flag_ambient_temperature_run == TRUE) %>%
dplyr::pull(fulcrum_id)
test
library(easyfulcrum)
devtools::document()
devtools::build_vignettes()
library(easyfulcrum)
devtools::build()
devtools::build()
pkgdown::build_site()
install.packages("pkgdown")
install.packages("pkgdown")
install.packages("pkgdown")
pkgdown::build_site()
devtools::load_all(".")
loadExampleFiles(startdir = "~/Desktop",
projectdirname = "2020JanuaryHawaii")
# part 1
makeDirStructure(startdir = "~/Desktop",
projectdirname = "2020JanuaryHawaii")
# part 2
loadExampleFiles(startdir = "~/Desktop",
projectdirname = "2020JanuaryHawaii")
