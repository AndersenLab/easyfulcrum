}
makeDirStructure(startdir = getwd(), projectdir = "2020FebruaryAustralia")
makeDirStructure <- function(startdir, projectdir) {
dir.create(file.path(startdir, projectdir, "data", "raw", c("fulcrum","sanger")), recursive = TRUE)
#dir.create(file.path(startdir, projectdir, "data", "raw", "sanger"), recursive = TRUE)
}
makeDirStructure(startdir = getwd(), projectdir = "2020FebruaryAustralia")
makeDirStructure <- function(startdir, projectdirname) {
dir.create(file.path(startdir, projectdirname, "data", "raw", "fulcrum", "photos"), recursive = TRUE)
dir.create(file.path(startdir, projectdirname, "data", "raw", "sanger"), recursive = TRUE)
dir.create(file.path(startdir, projectdirname, "data", "processed", "fulcrum"), recursive = TRUE)
dir.create(file.path(startdir, projectdirname, "data", "processed", "genotypes"), recursive = TRUE)
dir.create(file.path(startdir, projectdirname, "data", "processed", "sanger"), recursive = TRUE)
dir.create(file.path(startdir, projectdirname, "data", "plots"), recursive = TRUE)
dir.create(file.path(startdir, projectdirname, "data", "reports"), recursive = TRUE)
dir.create(file.path(startdir, projectdirname, "data", "scripts"), recursive = TRUE)
}
makeDirStructure(startdir = getwd(), projectdirname = "2020FebruaryAustralia")
makeDirStructure <- function(startdir, projectdirname) {
dir.create(file.path(startdir, projectdirname, "data", "raw", "fulcrum", "photos"), recursive = TRUE)
dir.create(file.path(startdir, projectdirname, "data", "raw", "sanger"), recursive = TRUE)
dir.create(file.path(startdir, projectdirname, "data", "processed", "fulcrum"), recursive = TRUE)
dir.create(file.path(startdir, projectdirname, "data", "processed", "genotypes"), recursive = TRUE)
dir.create(file.path(startdir, projectdirname, "data", "processed", "sanger"), recursive = TRUE)
dir.create(file.path(startdir, projectdirname, "plots"), recursive = TRUE)
dir.create(file.path(startdir, projectdirname, "reports"), recursive = TRUE)
dir.create(file.path(startdir, projectdirname, "scripts"), recursive = TRUE)
}
makeDirStructure(startdir = getwd(), projectdirname = "2020FebruaryAustralia")
makeDirStructure <- function(startdir, projectdirname) {
dir.create(file.path(startdir, projectdirname, "data", "raw", "fulcrum", "photos"), recursive = TRUE)
dir.create(file.path(startdir, projectdirname, "data", "raw", "sanger"), recursive = TRUE)
dir.create(file.path(startdir, projectdirname, "data", "processed", "fulcrum"), recursive = TRUE)
dir.create(file.path(startdir, projectdirname, "data", "processed", "genotypes"), recursive = TRUE)
dir.create(file.path(startdir, projectdirname, "data", "processed", "sanger"), recursive = TRUE)
dir.create(file.path(startdir, projectdirname, "plots"), recursive = TRUE)
dir.create(file.path(startdir, projectdirname, "reports"), recursive = TRUE)
dir.create(file.path(startdir, projectdirname, "scripts"), recursive = TRUE)
}
makeDirStructure(startdir = getwd(), projectdirname = "2020FebruaryAustralia")
library(easyfulcrum)
setwd("~/Desktop/Andersen")
# location <- getwd()
# setwd(paste(location, "/R", sep = ""))
# files.sources = list.files()
# sapply(files.sources, source)
# setwd(location)
# setup test directory for multi project Fulcrum export
dir1 <- "git/test_easyfulcrum/test_data/2020JanuaryHawaii_errors_created/data/raw/fulcrum"
dir2 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia/data/raw/fulcrum"
# test readFulcrum function
raw_data1 <- readFulcrum(dir2)
# test procFulcrum function
proc_data1 <- procFulcrum(raw_data1)
# test checkParameters function, will output rows with flags/rows related to those w flags
checkParameters(proc_data1)
# test joinFulcrum function
join_data1 <- joinFulcrum(proc_data1)
# test checkJoin function, will output info of flags/rows related to those flags
checkJoin(join_data1)
# test annotateFulcrum fuction
anno_data1 <- annotateFulcrum(join_data1)
# test readGenotypes function
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
proc_geno_data1 <- procGenotypes(geno_data = geno_data1, fulc_data = anno_data1)
dir2 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia/data/raw/fulcrum"
### TEST 1 ###
# test readFulcrum function
raw_data1 <- readFulcrum(dir2)
# test procFulcrum function
proc_data1 <- procFulcrum(raw_data1)
# test checkParameters function, will output rows with flags/rows related to those w flags
checkParameters(proc_data1)
dir2 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum"
### TEST 1 ###
# test readFulcrum function
raw_data1 <- readFulcrum(dir2)
# test procFulcrum function
proc_data1 <- procFulcrum(raw_data1)
# test checkParameters function, will output rows with flags/rows related to those w flags
checkParameters(proc_data1)
# test joinFulcrum function
join_data1 <- joinFulcrum(proc_data1)
# test checkJoin function, will output info of flags/rows related to those flags
checkJoin(join_data1)
dir2 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum"
### TEST 1 ###
# test readFulcrum function
raw_data1 <- readFulcrum(dir2)
# test procFulcrum function
proc_data1 <- procFulcrum(raw_data1)
# test checkParameters function, will output rows with flags/rows related to those w flags
checkParameters(proc_data1)
# test checkParameters function, saves the output as a list of three dataframes of flagged rows
flag1.1 <- checkParameters(proc_data1, return = TRUE)
# upon further inspection we select two rows for ambient_temperature_run to be set to NA
to_change <- c("c5b0cabf-ded8-4c3d-9915-b3c94b913686", "fb975ace-0036-4a80-b073-8ff638f35786")
proc_data1_clean <- fixParameters(proc_data1, ambient_temperature_run_ids = to_change)
# Recheck to see if fixParameters worked
checkParameters(proc_data1_clean)
# test joinFulcrum function
join_data1 <- joinFulcrum(proc_data1)
# test checkJoin function, will output info of flags/rows related to those flags
checkJoin(join_data1)
saveRDS(raw_data1, "2020FebruaryAustralia_errors_created.Rds")
2020FebruaryAustralia_errors_created
saveRDS(raw_data1, "2020FebruaryAustralia_errors_created.rda")
anno_data1 <- annotateFulcrum(join_data1)
# test readGenotypes function
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
proc_geno_data1 <- procGenotypes(geno_data = geno_data1, fulc_data = anno_data1)
setwd("~/Desktop/Andersen")
# setup test directory for multi project Fulcrum export
dir1 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum"
dir2 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia/data/raw/fulcrum"
# test readFulcrum function
raw_data1 <- readFulcrum(dir1)
# test procFulcrum function
proc_data1 <- procFulcrum(raw_data1)
# test checkParameters function, will output rows with flags/rows related to those w flags
checkParameters(proc_data1)
# test checkParameters function, saves the output as a list of three dataframes of flagged rows
flag1.1 <- checkParameters(proc_data1, return = TRUE)
flag1.1
View(flag1.1)
proc_data1_clean <- fixParameters(proc_data1,
substrate_temperature_ids = "fe28600b-c78a-4545-a525-28dfb3e5d84c",
ambient_temperature_ids = "e088d373-6f4a-48c3-b672-2f6a43747595",
ambient_temperature_run_ids =
c("fb975ace-0036-4a80-b073-8ff638f35786","c9313751-3f96-41f6-9d5e-b8dc994f5edb"))
#pass in fulcrum_id values corresponding to flagged rows
proc_data1_clean <- fixParameters(proc_data1,
substrate_temperature_ids = "fe28600b-c78a-4545-a525-28dfb3e5d84c",
ambient_temperature_ids = "e088d373-6f4a-48c3-b672-2f6a43747595",
ambient_temperature_run_ids =
c("fb975ace-0036-4a80-b073-8ff638f35786","c9313751-3f96-41f6-9d5e-b8dc994f5edb"))
checkParameters(proc_data1_clean)
join_data1 <- joinFulcrum(proc_data1)
checkJoin(join_data1)
flag1.3 <- checkJoin(join_data1, return = TRUE)
flag1.2 <- checkJoin(join_data1, return = TRUE)
View(flag1.2)
anno_data1 <- annotateFulcrum(join_data1)
View(anno_data1)
geno_data1
# test readGenotypes function
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
proc_geno_data1 <- procGenotypes(geno_data = geno_data1, fulc_data = anno_data1)
checkGenotypes(proc_geno_data1)
View(anno_data1)
View(joinFulcrum())
View(proc_data1)
setwd("~/Desktop/Andersen")
#first dataset has created purposeful errors
dir1 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum"
dir2 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia/data/raw/fulcrum"
raw_data1 <- readFulcrum(dir1)
proc_data1 <- procFulcrum(raw_data1)
checkParameters(proc_data1)
flag1.1 <- checkParameters(proc_data1, return = TRUE)
#pass in fulcrum_id values corresponding to flagged rows
proc_data1_clean <- fixParameters(proc_data1,
substrate_temperature_ids = "fe28600b-c78a-4545-a525-28dfb3e5d84c",
ambient_temperature_ids = "e088d373-6f4a-48c3-b672-2f6a43747595",
ambient_temperature_run_ids =
c("fb975ace-0036-4a80-b073-8ff638f35786","c9313751-3f96-41f6-9d5e-b8dc994f5edb"))
checkParameters(proc_data1_clean)
join_data1 <- joinFulcrum(proc_data1)
checkJoin(join_data1)
flag1.2 <- checkJoin(join_data1, return = TRUE)
anno_data1 <- annotateFulcrum(join_data1)
View(anno_data1)
View(raw_data1)
dir1 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum"
raw_data1 <- readFulcrum(dir1)
View(raw_data1)
library(easyfulcrum)
setwd("~/Desktop/Andersen")
dir1 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum"
raw_data1 <- readFulcrum(dir1)
View(raw_data1)
dir1 <- "/Users/matteodibernardo/Desktop/Andersen/git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum"
raw_data1 <- readFulcrum(dir1)
View(raw_data1)
dir1 <- "/Users/matteodibernardo/Desktop/Andersen/git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum"
raw_data1 <- readFulcrum(dir1)
View(raw_data1)
library(easyfulcrum)
#first dataset has created purposeful errors
dir1 <- "/Users/matteodibernardo/Desktop/Andersen/git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum"
dir2 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia/data/raw/fulcrum"
raw_data1 <- readFulcrum(dir1)
View(raw_data1$nematode_field_sampling)
View(raw_data1)
proc_data1 <- procFulcrum(raw_data1)
View(proc_data1)
join_data1 <- joinFulcrum(proc_data1)
View(join_data1)
checkJoin(join_data1)
anno_data1 <- annotateFulcrum(join_data1)
View(anno_data1)
load("/Users/matteodibernardo/Desktop/Andersen/git/easyfulcrum/data/island.rda")
island
View(join_data1)
View(island)
anno_data1 <- annotateFulcrum(join_data1)
View(anno_data1)
dir2 <- "git/test_easyfulcrum/test_data/2020JanuaryHawaii/data/raw/fulcrum"
raw_data1 <- readFulcrum(dir2)
proc_data1 <- procFulcrum(raw_data1)
checkParameters(proc_data1)
checkParameters(proc_data1_clean)
join_data1 <- joinFulcrum(proc_data1)
join_data1
anno_data1 <- annotateFulcrum(join_data1)
View(anno_data1)
raw_data1 <- readFulcrum(dir1)
View(raw_data1)
dir1 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum"
raw_data1 <- readFulcrum(dir1)
proc_data1 <- procFulcrum(raw_data1)
checkParameters(proc_data1)
join_data1 <- joinFulcrum(proc_data1)
checkJoin(join_data1)
anno_data1 <- annotateFulcrum(join_data1)
View(join_data1)
View(anno_data1)
saveRDS(raw_data1, "2020FebruaryAustralia_errors_created_fulc.rda")
flag1.2 <- checkJoin(join_data1, return = TRUE)
anno_data1 <- annotateFulcrum(join_data1)
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
proc_geno_data1 <- procGenotypes(geno_data = geno_data1, fulc_data = anno_data1)
checkGenotypes(proc_geno_data1)
proc_geno_data1
View(proc_geno_data1)
View(geno_data1)
library(easyfulcrum)
library(easyfulcrum)
library(easyfulcrum)
setwd("~/Desktop/Andersen")
dir1 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum"
raw_data1 <- readFulcrum(dir1)
proc_data1 <- procFulcrum(raw_data1)
checkParameters(proc_data1)
flag1.1 <- checkParameters(proc_data1, return = TRUE)
#pass in fulcrum_id values corresponding to flagged rows
proc_data1_clean <- fixParameters(proc_data1,
substrate_temperature_ids = "fe28600b-c78a-4545-a525-28dfb3e5d84c",
ambient_temperature_ids = "e088d373-6f4a-48c3-b672-2f6a43747595",
ambient_temperature_run_ids =
c("fb975ace-0036-4a80-b073-8ff638f35786","c9313751-3f96-41f6-9d5e-b8dc994f5edb"))
checkParameters(proc_data1_clean)
join_data1 <- joinFulcrum(proc_data1)
checkJoin(join_data1)
flag1.2 <- checkJoin(join_data1, return = TRUE)
anno_data1 <- annotateFulcrum(join_data1)
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
View(anno_data1)
View(geno_data1)
checkGenotypes(geno_data = geno_data1, fulc_data = anno_data1)
checkGenotypes(geno_data = geno_data1, fulc_data = anno_data1)
checkGenotypes()
checkGenotypes(geno_data = geno_data1, fulc_data = anno_data1)
checkGenotypes(geno_data = geno_data1, fulc_data = anno_data1)
checkGenotypes(geno_data = geno_data1, fulc_data = anno_data1)
checkGenotypes(geno_data = geno_data1, fulc_data = anno_data1)
rlang::last_error()
rlang::last_trace()
geno_data <- geno_data1
fulc_data <- fulc_data1
fulc_data <- anno_data1
# report s_label check
message(">>> Checking s labels")
# missing s_labels
missing_s_label_genotyping <- geno_data %>% dplyr::filter(flag_missing_s_label_genotyping == TRUE)
print(paste("There are", nrow(missing_s_label_genotyping), "rows with missing s labels, these s labels are:", sep = " "))
if(nrow(missing_s_label_genotyping) > 0){print(missing_s_label_genotyping$s_label)}
# dupicated s_labels
duplicated_s_label_genotyping <- geno_data %>% dplyr::filter(flag_duplicated_s_label_genotyping == TRUE)
print(paste("There are", nrow(duplicated_s_label_genotyping), "rows with duplicated s labels, these s labels are:", sep = " "))
if(nrow(duplicated_s_label_genotyping) > 0){print(duplicated_s_label_genotyping$s_label)}
# unusual s_labels
unusual_s_label_genotyping <- geno_data %>% dplyr::filter(flag_unusual_s_label_genotyping == TRUE)
print(paste("There are", nrow(unusual_s_label_genotyping), "rows with unusual s labels, these s labels are:", sep = " "))
if(nrow(unusual_s_label_genotyping) > 0){print(unusual_s_label_genotyping$s_label)}
# s_labels not in fulcrum
s_label_not_in_fulcrum <- geno_data %>% dplyr::filter(flag_s_label_not_in_fulcrum == TRUE)
print(paste("There are", nrow(s_label_not_in_fulcrum), "rows with s labels not found in the Fulcrum data, these s labels are:", sep = " "))
if(nrow(s_label_not_in_fulcrum) > 0){print(s_label_not_in_fulcrum$s_label)}
# Make a dataframe for s_labels in Fulcrum but not in the genotyping sheet
s_label_in_fulcrum_not_in_genotyping <- fulc_data %>%
dplyr::filter(!is.na(s_label)) %>%
dplyr::filter(!(s_label %in% geno_data$s_label))
print(paste("There are", nrow(s_label_in_fulcrum_not_in_genotyping), "s labels in the Fulcrum data but not in the genotyping data, these s labels are:", sep = " "))
if(nrow(s_label_in_fulcrum_not_in_genotyping) > 0){print(s_label_in_fulcrum_not_in_genotyping$s_label)}
message(">>> Checking genotyping process")
# show expected but missing proliferation data
proliferation_missing <- geno_data %>% dplyr::filter(flag_proliferation_missing == TRUE)
print(paste("There are", nrow(proliferation_missing), "rows missing expected proliferation data, these s labels are:", sep = " "))
if(nrow(proliferation_missing) > 0){print(proliferation_missing$s_label)}
# its2 check
its2_genotype_expected <- geno_data %>% dplyr::filter(flag_its2_genotype_expected == TRUE)
print(paste("There are", nrow(its2_genotype_expected), "rows missing expected its2 genotype, these s labels are:", sep = " "))
if(nrow(its2_genotype_expected) > 0){print(its2_genotype_expected$s_label)}
# species_id check
species_id_expected <- geno_data %>% dplyr::filter(flag_species_id_expected == TRUE)
print(paste("There are", nrow(species_id_expected), "rows missing expected species_id, these s labels are:", sep = " "))
if(nrow(species_id_expected) > 0){print(species_id_expected$s_label)}
# unusual target name
unusual_target_species_name <- geno_data %>% dplyr::filter(flag_unusual_target_species_name == TRUE)
print(paste("There are", nrow(unusual_target_species_name), "rows with unusual target species names, these names are:", sep = " "))
if(nrow(unusual_target_species_name) > 0){print(unusual_target_species_name$species_id)}
# expected strain_name
strain_name_expected <- geno_data %>% dplyr::filter(flag_strain_name_expected == TRUE)
print(paste("There are", nrow(strain_name_expected), "rows missing expected strain_name, these s labels are:", sep = " "))
if(nrow(strain_name_expected) > 0){print(strain_name_expected$s_label)}
# report s_label check
message(">>> Checking s labels")
# missing s_labels
missing_s_label_genotyping <- geno_data %>% dplyr::filter(flag_missing_s_label_genotyping == TRUE)
print(paste("There are", nrow(missing_s_label_genotyping), "rows with missing s labels, these s labels are:", sep = " "))
if(nrow(missing_s_label_genotyping) > 0){print(missing_s_label_genotyping$s_label)}
library(dplyr)
library(tidyverse)
# report s_label check
message(">>> Checking s labels")
# missing s_labels
missing_s_label_genotyping <- geno_data %>% dplyr::filter(flag_missing_s_label_genotyping == TRUE)
print(paste("There are", nrow(missing_s_label_genotyping), "rows with missing s labels, these s labels are:", sep = " "))
if(nrow(missing_s_label_genotyping) > 0){print(missing_s_label_genotyping$s_label)}
View(geno_data)
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
proc_geno_data1 <- procGenotypes(geno_data = geno_data1, fulc_data = anno_data1)
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
Q
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
debuggingState(on=FALSE)
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
:c
:f
f()
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
f()
Q
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
setwd("~/Desktop/Andersen")
#first dataset has created purposeful errors
dir1 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum"
dir2 <- "git/test_easyfulcrum/test_data/2020JanuaryHawaii/data/raw/fulcrum"
raw_data1 <- readFulcrum(dir1)
proc_data1 <- procFulcrum(raw_data1)
checkParameters(proc_data1)
flag1.1 <- checkParameters(proc_data1, return = TRUE)
#pass in fulcrum_id values corresponding to flagged rows
proc_data1_clean <- fixParameters(proc_data1,
substrate_temperature_ids = "fe28600b-c78a-4545-a525-28dfb3e5d84c",
ambient_temperature_ids = "e088d373-6f4a-48c3-b672-2f6a43747595",
ambient_temperature_run_ids =
c("fb975ace-0036-4a80-b073-8ff638f35786","c9313751-3f96-41f6-9d5e-b8dc994f5edb"))
checkParameters(proc_data1_clean)
join_data1 <- joinFulcrum(proc_data1)
checkJoin(join_data1)
flag1.2 <- checkJoin(join_data1, return = TRUE)
anno_data1 <- annotateFulcrum(join_data1)
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
library(easyfulcrum)
setwd("~/Desktop/Andersen")
#first dataset has created purposeful errors
dir1 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum"
dir2 <- "git/test_easyfulcrum/test_data/2020JanuaryHawaii/data/raw/fulcrum"
raw_data1 <- readFulcrum(dir1)
proc_data1 <- procFulcrum(raw_data1)
checkParameters(proc_data1)
flag1.1 <- checkParameters(proc_data1, return = TRUE)
#pass in fulcrum_id values corresponding to flagged rows
proc_data1_clean <- fixParameters(proc_data1,
substrate_temperature_ids = "fe28600b-c78a-4545-a525-28dfb3e5d84c",
ambient_temperature_ids = "e088d373-6f4a-48c3-b672-2f6a43747595",
ambient_temperature_run_ids =
c("fb975ace-0036-4a80-b073-8ff638f35786","c9313751-3f96-41f6-9d5e-b8dc994f5edb"))
checkParameters(proc_data1_clean)
join_data1 <- joinFulcrum(proc_data1)
checkJoin(join_data1)
flag1.2 <- checkJoin(join_data1, return = TRUE)
anno_data1 <- annotateFulcrum(join_data1)
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
proc_geno_data1 <- procGenotypes(geno_data = geno_data1, fulc_data = anno_data1)
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
flag1.3 <- checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1, return = TRUE)
View(flag1.3)
geno_data <- geno_data1
fulc_data <- anno_data1
usual_s_labels <- stringr::str_subset(geno_data$s_label, pattern = "S-" %R% DGT %R% DGT %R% DGT %R% DGT %R% optional(DGT) %R% optional(DGT))
library(dplyr)
usual_s_labels <- stringr::str_subset(geno_data$s_label, pattern = "S-" %R% DGT %R% DGT %R% DGT %R% DGT %R% optional(DGT) %R% optional(DGT))
optional(DGT)
library(stringr)
usual_s_labels <- stringr::str_subset(geno_data$s_label, pattern = "S-" %R% DGT %R% DGT %R% DGT %R% DGT %R% optional(DGT) %R% optional(DGT))
edit
edit(geno_data1)
write.csv(geno_data1,"geno_data1_to_fix.csv")
read.csv("geno_data1_to_fix.csv")
View(fulc_data)
geno_data1_test <- read.csv("geno_data1_to_fix.csv")
View(geno_data1_test)
?read.csv
geno_data1_test <- read.csv("geno_data1_to_fix.csv")
geno_data1_test <- read.csv("geno_data1_to_fix.csv")
proc_geno_data1 <- procGenotypes(geno_data = geno_data1_test, fulc_data = anno_data1)
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
geno_data1_test <- read.csv("geno_data1_to_fix.csv")
proc_geno_data1 <- procGenotypes(geno_data = geno_data1_test, fulc_data = anno_data1)
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
geno_data1_test <- read.csv("geno_data1_to_fix.csv")
proc_geno_data1 <- procGenotypes(geno_data = geno_data1_test, fulc_data = anno_data1)
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
usual_s_labels <- stringr::str_subset(geno_data$s_label, pattern = "S-" %R% DGT %R% DGT %R% DGT %R% DGT %R% optional(DGT) %R% optional(DGT))
usual_s_labels <- stringr::str_subset(geno_data$s_label, pattern = "S-" %R% DGT %R% DGT %R% DGT %R% DGT %R% optional(DGT) %R% optional(DGT))
library(rebus)
usual_s_labels <- stringr::str_subset(geno_data$s_label, pattern = "S-" %R% DGT %R% DGT %R% DGT %R% DGT %R% optional(DGT) %R% optional(DGT))
usual_s_labels
geno_data1_test <- read.csv("geno_data1_to_fix.csv")
proc_geno_data1 <- procGenotypes(geno_data = geno_data1_test, fulc_data = anno_data1)
geno_data <- geno_data1_test
usual_s_labels <- stringr::str_subset(geno_data$s_label, pattern = "S-" %R% DGT %R% DGT %R% DGT %R% DGT %R% optional(DGT) %R% optional(DGT))
usual_s_labels
geno_data1_test <- read.csv("geno_data1_to_fix.csv")
proc_geno_data1 <- procGenotypes(geno_data = geno_data1_test, fulc_data = anno_data1)
geno_data <- geno_data1_test
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
geno_data1_test <- read.csv("geno_data1_to_fix.csv")
proc_geno_data1 <- procGenotypes(geno_data = geno_data1_test, fulc_data = anno_data1)
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
library(easyfulcrum)
geno_data1_test <- read.csv("geno_data1_to_fix.csv")
proc_geno_data1 <- procGenotypes(geno_data = geno_data1_test, fulc_data = anno_data1)
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
library(easyfulcrum)
geno_data1_test <- read.csv("geno_data1_to_fix.csv")
proc_geno_data1 <- procGenotypes(geno_data = geno_data1_test, fulc_data = anno_data1)
checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1)
flag1.3 <- checkGenotypes(geno_data = proc_geno_data1, fulc_data = anno_data1, return = TRUE)
View(flag1.3)
joingeno_data1 <- joinGenoFulc(geno = proc_geno_data1, fulc = anno_data1)
final_data1 <- procPhotos(dir = "test_collection/data/raw/fulcrum/photos", data = joingeno_data1, max_dim = 500, overwrite = T)
final_data1 <- procPhotos(dir = "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum/photos", data = joingeno_data1, max_dim = 500, overwrite = T)
View(final_data1
)
saveRDS(geno_data1_test, "2020FebruaryAustralia_errors_created_geno.rda")
View(proc_data1)
View(proc_data1)
View(join_data1)
names(join_data1)
View(proc_data1)
library(easyfulcrum)
setwd("~/Desktop/Andersen")
#first dataset has created purposeful errors
dir1 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum"
raw_data1 <- readFulcrum(dir1)
proc_data1 <- procFulcrum(raw_data1)
checkParameters(proc_data1)
join_data1 <- joinFulcrum(proc_data1)
checkJoin(join_data1)
View(join_data1)
library(easyfulcrum)
setwd("~/Desktop/Andersen")
#first dataset has created purposeful errors
dir1 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum"
raw_data1 <- readFulcrum(dir1)
proc_data1 <- procFulcrum(raw_data1)
checkParameters(proc_data1)
join_data1 <- joinFulcrum(proc_data1)
checkJoin(join_data1)
View(joinFulcrum())
View(join_data1)
View(join_data1)
names(join_data1)
library(easyfulcrum)
setwd("~/Desktop/Andersen")
#first dataset has created purposeful errors
dir1 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum"
dir2 <- "git/test_easyfulcrum/test_data/2020JanuaryHawaii/data/raw/fulcrum"
raw_data1 <- readFulcrum(dir1)
proc_data1 <- procFulcrum(raw_data1)
checkParameters(proc_data1)
checkParameters(proc_data1_clean)
join_data1 <- joinFulcrum(proc_data1)
checkJoin(join_data1)
library(easyfulcrum)
setwd("~/Desktop/Andersen")
#first dataset has created purposeful errors
dir1 <- "git/test_easyfulcrum/test_data/2020FebruaryAustralia_errors_created/data/raw/fulcrum"
dir2 <- "git/test_easyfulcrum/test_data/2020JanuaryHawaii/data/raw/fulcrum"
raw_data1 <- readFulcrum(dir1)
proc_data1 <- procFulcrum(raw_data1)
checkParameters(proc_data1)
join_data1 <- joinFulcrum(proc_data1)
checkJoin(join_data1)
View(proc_data1)
View(proc_data1[[1]])
View(proc_data1[[2]])
View(proc_data1[[3]])
View(proc_data1[[4]])
View(proc_data1[[5]])
names(proc_data1[[1]])
names(proc_data1[[2]])
names(proc_data1[[3]])
names(proc_data1[[4]])
names(proc_data1[[5]])
saveRDS(raw_data1, "2020FebruaryAustralia_errors_created_fulc.rda")
