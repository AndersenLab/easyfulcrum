View(flag1.1$ambient_temperature_run)
# upon further inspection we select two rows for ambient_temperature_run to be set to NA
to_change <- c("fb975ace-0036-4a80-b073-8ff638f35786", "3c1fd1f3-ea50-43b7-8fd6-09670e3068bf")
proc_data1_clean <- fixParameters(proc_data1, ambient_temperature_run_ids = to_change)
# test checkProc function, will output info with flags/rows related to those flags
checkProc(proc_data1)
# test checkParameters function, saves the output as a list of six dataframes of flagged rows
flag1.2 <- checkProc(proc_data1, return = TRUE)
# test joinFulcrum function
join_data1 <- joinFulcrum(proc_data1)
# test checkProc function, will output info of flags/rows related to those flags
checkJoin(join_data1)
# test checkProc function, saves the output as a dataframe of flagged rows
flag1.3 <- checkJoin(join_data1, return = TRUE)
# test annotateFulcrum fuction
anno_data1 <- annotateFulcrum(join_data1)
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
proc_geno_data1 <- procGenotypes(geno_data = geno_data1, fulc_data = anno_data1)
#test checkGenotypes function
checkGenotypes(proc_geno_data1)
flag1.4 <- checkGenotypes(proc_geno_data1, return = TRUE)
joingeno_data1 <- joinGenoFulc(geno = proc_geno_data1, fulc = anno_data1)
# test the procPhotos function, output is final dataframe
final_data1 <- procPhotos(dir = "test_collection/data/raw/fulcrum/photos", data = joingeno_data1, percentage = 20, overwrite = T)
# test the procPhotos function, output is final dataframe
final_data1 <- procPhotos(dir = "test_collection/data/raw/fulcrum/photos", data = joingeno_data1, percentage = 20, overwrite = T)
library(easyfulcrum)
setwd("~/Desktop/Andersen")
location <- getwd()
setwd(paste(location, "/R", sep = ""))
files.sources = list.files()
sapply(files.sources, source)
setwd(location)
# setup test directory for multi project Fulcrum export
dir1 <- "test_collection/data/raw/fulcrum"
dir2 <- "test_data/2018OctoberHawaii/data/fulcrum"
dir3 <- "test_data/2019DecemberHawaii/data/fulcrum"
dir4 <- "test_data/2019OctoberHawaii/data/fulcrum"
### TEST 1 ###
# test readFulcrum function
raw_data1 <- readFulcrum(dir1)
# test procFulcrum function
proc_data1 <- procFulcrum(raw_data1)
# test checkParameters function, will output rows with flags/rows related to those w flags
checkParameters(proc_data1)
# test checkParameters function, saves the output as a list of three dataframes of flagged rows
flag1.1 <- checkParameters(proc_data1, return = TRUE)
# easier to see which rows we might want to edit
View(flag1.1$ambient_temperature_run)
# upon further inspection we select two rows for ambient_temperature_run to be set to NA
to_change <- c("fb975ace-0036-4a80-b073-8ff638f35786", "3c1fd1f3-ea50-43b7-8fd6-09670e3068bf")
proc_data1_clean <- fixParameters(proc_data1, ambient_temperature_run_ids = to_change)
# test checkProc function, will output info with flags/rows related to those flags
checkProc(proc_data1)
# test checkParameters function, saves the output as a list of six dataframes of flagged rows
flag1.2 <- checkProc(proc_data1, return = TRUE)
# test joinFulcrum function
join_data1 <- joinFulcrum(proc_data1)
# test checkProc function, will output info of flags/rows related to those flags
checkJoin(join_data1)
# test checkProc function, saves the output as a dataframe of flagged rows
flag1.3 <- checkJoin(join_data1, return = TRUE)
# test annotateFulcrum fuction
anno_data1 <- annotateFulcrum(join_data1)
# test readGenotypes function
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
setwd("~/Desktop/Andersen")
location <- getwd()
setwd(paste(location, "/R", sep = ""))
files.sources = list.files()
sapply(files.sources, source)
setwd(location)
# setup test directory for multi project Fulcrum export
dir1 <- "test_collection/data/raw/fulcrum"
dir2 <- "test_data/2018OctoberHawaii/data/fulcrum"
dir3 <- "test_data/2019DecemberHawaii/data/fulcrum"
dir4 <- "test_data/2019OctoberHawaii/data/fulcrum"
### TEST 1 ###
# test readFulcrum function
raw_data1 <- readFulcrum(dir1)
# test procFulcrum function
proc_data1 <- procFulcrum(raw_data1)
# test checkParameters function, will output rows with flags/rows related to those w flags
checkParameters(proc_data1)
# test checkParameters function, saves the output as a list of three dataframes of flagged rows
flag1.1 <- checkParameters(proc_data1, return = TRUE)
# easier to see which rows we might want to edit
View(flag1.1$ambient_temperature_run)
# upon further inspection we select two rows for ambient_temperature_run to be set to NA
to_change <- c("fb975ace-0036-4a80-b073-8ff638f35786", "3c1fd1f3-ea50-43b7-8fd6-09670e3068bf")
proc_data1_clean <- fixParameters(proc_data1, ambient_temperature_run_ids = to_change)
# test checkProc function, will output info with flags/rows related to those flags
checkProc(proc_data1)
# test checkParameters function, saves the output as a list of six dataframes of flagged rows
flag1.2 <- checkProc(proc_data1, return = TRUE)
# test joinFulcrum function
join_data1 <- joinFulcrum(proc_data1)
# test checkProc function, will output info of flags/rows related to those flags
checkJoin(join_data1)
# test checkProc function, saves the output as a dataframe of flagged rows
flag1.3 <- checkJoin(join_data1, return = TRUE)
# test annotateFulcrum fuction
anno_data1 <- annotateFulcrum(join_data1)
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
proc_geno_data1 <- procGenotypes(geno_data = geno_data1, fulc_data = anno_data1)
#test checkGenotypes function
checkGenotypes(proc_geno_data1)
flag1.4 <- checkGenotypes(proc_geno_data1, return = TRUE)
# code to fix Genotype data
# library(tidyverse)
# proc_geno_data2 <- proc_geno_data1 %>%
#         dplyr::mutate(species_id = ifelse(species_id == "C. elegans", "Caenorhabditis elegans",
#                                           ifelse(species_id == "C. briggsae", "Caenorhabditis briggsae",
#                                                  ifelse(species_id == "C. tropicalis", "Caenorhabditis tropicalis", species_id))))
# test joinGenoFulc function to join genotype data to fulcrum data
joingeno_data1 <- joinGenoFulc(geno = proc_geno_data1, fulc = anno_data1)
# test the procPhotos function, output is final dataframe
final_data1 <- procPhotos(dir = "test_collection/data/raw/fulcrum/photos", data = joingeno_data1, percentage = 20, overwrite = T)
import.packages("rebus")
library(rebus)
proc_geno_data1 <- procGenotypes(geno_data = geno_data1, fulc_data = anno_data1)
#test checkGenotypes function
checkGenotypes(proc_geno_data1)
flag1.4 <- checkGenotypes(proc_geno_data1, return = TRUE)
# code to fix Genotype data
# library(tidyverse)
# proc_geno_data2 <- proc_geno_data1 %>%
#         dplyr::mutate(species_id = ifelse(species_id == "C. elegans", "Caenorhabditis elegans",
#                                           ifelse(species_id == "C. briggsae", "Caenorhabditis briggsae",
#                                                  ifelse(species_id == "C. tropicalis", "Caenorhabditis tropicalis", species_id))))
# test joinGenoFulc function to join genotype data to fulcrum data
joingeno_data1 <- joinGenoFulc(geno = proc_geno_data1, fulc = anno_data1)
# test the procPhotos function, output is final dataframe
final_data1 <- procPhotos(dir = "test_collection/data/raw/fulcrum/photos", data = joingeno_data1, percentage = 20, overwrite = T)
View(final_data1)
setwd("~/Desktop/Abate-Shen/SleepingBeauty/git/sleeping-beauty-analysis")
reports.dir <- "results"
library(UpSetR)
library(tidyverse)
library(venn)
library(dplyr)
library(reshape2)
library(ggplot2)
#this function will compare two dataframes of flagged genes, tapdance, gCIS
#also compare overlaps with moffitt datasets,
gCIS_TAPDANCE <- function(td_df, gCIS_df, threshold.value = .01/nrow(gCIS_df)){
td_df <- td_df %>% mutate_if(is.factor, as.character)
td_df_clean <- data.frame(matrix(ncol = length(colnames(td_df))))
colnames(td_df_clean) <- colnames(td_df)
for(i in 1:length(td_df$gene_name)) {
genes <- unlist(strsplit(td_df$gene_name[i], ","))
for (j in 1:length(genes)){
if (!grepl("^\\s*$", genes[j])) {
rowtoadd <- td_df[i,]
rowtoadd["gene_name"] <- genes[j]
td_df_clean <- rbind(td_df_clean, rowtoadd)
}
}
}
td_df_clean <- td_df_clean[-1,]
#clean and convert
td_df_clean[,"gene_name"] <- td_df_clean[,"gene_name"] %>% trimws()
gCIS_df_clean <- gCIS_df %>% filter(p.value != "----") %>%
mutate_at("p.value", as.numeric) %>% filter(p.value < threshold.value)
overlap <- td_df_clean[td_df_clean$gene_name %in% gCIS_df_clean$gene_symbol,]
names(overlap)[names(overlap) == "gene_name"] <- "Gene"
overlap <- overlap %>% as_tibble()
gCIS_df_temp <- data.frame()
for(i in 1:nrow(overlap)){
gCIS_df_temp <- rbind(gCIS_df_temp,
gCIS_df_clean[gCIS_df_clean$gene_symbol == overlap$Gene[i],])
}
gCIS_df_temp <- gCIS_df_temp %>% as_tibble() %>% unique()
#merge the dataframes, carrying over info if more than one MR
merged_df <- gCIS_df_temp %>% inner_join(overlap, by = c("gene_symbol" = "Gene"))
listInput <- list(td_df_clean$gene_name, gCIS_df_clean$gene_symbol)
names(listInput) <- c("TAPDANCE", "gCIS")
#export a pdf of the venn diagram
pdf(file.path(reports.dir,"venn_prostate.pdf"))
plot(venn(listInput, ellipse = FALSE, ilab=TRUE,
zcolor = c("red", "blue")), xlim = c(0,100), ylim = c(0,100))
dev.off()
#save a .rds of the table
saveRDS(merged_df, file.path(reports.dir,"prostate_overlaps.rds"))
#import the moffitt subtypes
temp <- list.files(path = "data/moffitt", pattern = "\\_moffitt.txt$")
moffitt.dfs <- lapply(paste("data/moffitt/", temp, sep = ""), read.delim)
for(i in 1:length(temp)){
names(moffitt.dfs)[i] <- strsplit(temp, "_")[[i]][1]
}
moffitt.vecs <- lapply(moffitt.dfs, "[", , "gene")
for(i in 1:length(temp)){
names(moffitt.vecs)[i] <- strsplit(temp, "_")[[i]][1]
}
moffitt.vecs$gCIS <- gCIS_df_clean$gene_symbol
moffitt.vecs$tapdance <- td_df_clean$gene_name
#upset plot
pdf(file.path(reports.dir,"prostate_upset.pdf"))
upset(fromList(moffitt.vecs), order.by = "freq", nsets = 13)
dev.off()
#reduced upset and venn plot
lists.to.remove <- sapply(moffitt.vecs, function(i) length(i) < 500)
moffitt.vecs.reduced <- moffitt.vecs[!lists.to.remove]
#bring together all the smaller sets of length less than 500
moffitt.vecs.reduced$'small sets' <- unique(unlist(moffitt.vecs[lists.to.remove]))
pdf(file.path(reports.dir,"prostate_upset_reduced.pdf"))
upset(fromList(moffitt.vecs.reduced), order.by = "freq", nsets = 6)
dev.off()
pdf(file.path(reports.dir,"prostate_venn_reduced.pdf"))
plot(venn(moffitt.vecs.reduced, zcolor = "green",
ellipse = FALSE, ilab=TRUE, xlim = c(0,100), ylim = c(0,100), ilcs = .7))
dev.off()
write.csv(as.data.frame(Reduce(intersect, moffitt.vecs.reduced)),
file.path(reports.dir,"moffitt_intersects.csv"))
gCIS_unique_genes <- setdiff(moffitt.vecs.reduced[["gCIS"]], unlist(moffitt.vecs.reduced[-5]))
gCIS_df_clean %>% filter(gene_symbol %in% gCIS_unique_genes) %>%
write.csv(file.path(reports.dir,"gCIS_unique.csv"))
TD_unique_genes <- setdiff(moffitt.vecs.reduced[["tapdance"]], unlist(moffitt.vecs.reduced[-6]))
td_df_clean %>% filter(gene_name %in% TD_unique_genes) %>%
write.csv(file.path(reports.dir,"TD_unique.csv"))
write.csv(as.data.frame(setdiff(unlist(intersect(moffitt.vecs.reduced[[5]],
moffitt.vecs.reduced[[6]])),
unlist(moffitt.vecs.reduced[-(5:6)]))),
file.path(reports.dir,"TD_gCIS_overlap.csv"))
return("output saved")
}
#will generate histograms for flagged genes at different tapdance thresholds
TD_histograms <- function(reduce = FALSE){
TD_raw <- list(TD.01 = read.csv("data/cis-all/cis_all-nr-prostate-0.01.csv", header = T),
TD.001 = read.csv("data/cis-all/cis_all-nr-prostate-0.001.csv", header = T),
TD.0001 = read.csv("data/cis-all/cis_all-nr-prostate-0.0001.csv", header = T),
TD.00001 = read.csv("data/cis-all/cis_all-nr-prostate-0.00001.csv", header = T),
TD.000001 = read.csv("data/cis-all/cis_all-nr-prostate-0.000001.csv", header = T))
TD_split <- lapply(TD_raw, split_genes)
TD_genes <- lapply(TD_split, pull_genes_TD)
TD_gene_count <- lapply(TD_genes, length)
TD_gene_count_df <- gather(as.data.frame(TD_gene_count))
TD_gene_count_df <- TD_gene_count %>% as.data.frame() %>%
gather(value = "genes") %>% mutate(key = substring(key, 3)) %>% rename(threshold = key)
ggplot(TD_gene_count_df, aes(threshold, genes, fill = threshold)) +
geom_col()+
geom_text(aes(label=genes), position=position_dodge(width=1), vjust=-0.25, size = 2.25) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "")
ggsave(file.path(reports.dir,"TD_simple.pdf"))
TD_freq <- cbind(freq_genes(TD_genes,1),freq_genes(TD_genes,2),freq_genes(TD_genes,3),
freq_genes(TD_genes,4),freq_genes(TD_genes,5))
TD_freq$threshold <- names(TD_raw)
TD_melted <- TD_freq %>% melt(id.vars = "threshold", variable.name = "compareto") %>%
mutate(threshold = substring(threshold, 3), compareto = substring(compareto, 3)) %>%
group_by(compareto) %>%
mutate(position = rank(-value))
if(reduce){TD_melted <- TD_melted[-c(21:23,16:18,11:12,6),]}
ggplot(data = TD_melted, aes(x = compareto, y = value, fill = reorder(threshold,-value), group = position)) +
geom_col(position = position_dodge2(width = 0.9, preserve = "single")) +
geom_text(aes(label=value), position=position_dodge(width=0.9), vjust=-0.25, size = 2) +
labs(x = "threshold compared to", y = "number of intersecting genes", fill = "upper discarding threshold")+
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(text = element_text(size = 7.5))
ggsave(file.path(reports.dir,"TD_overlaps.pdf"))
#upset(fromList(TD_genes), order.by = "freq", nsets = 5)
return("output saved")
}
gCIS_histograms <- function(reduce = FALSE){
gCIS_raw <- list(gCIS_0 = read.csv("data/gCIS-all/gCIS_prostate_refseq_0.csv", header = T,stringsAsFactors=FALSE),
#gCIS_5000 = read.csv("data/gCIS-all/gCIS_prostate_refseq_5000.csv", header = T ,stringsAsFactors=FALSE),
gCIS_10000 = read.csv("data/gCIS-all/gCIS_prostate_refseq_10000.csv", header = T,stringsAsFactors=FALSE),
#gCIS_15000 = read.csv("data/gCIS-all/gCIS_prostate_refseq_15000.csv", header = T,stringsAsFactors=FALSE),
gCIS_20000 = read.csv("data/gCIS-all/gCIS_prostate_refseq_20000.csv", header = T,stringsAsFactors=FALSE),
#gCIS_25000 = read.csv("data/gCIS-all/gCIS_prostate_refseq_25000.csv", header = T,stringsAsFactors=FALSE),
gCIS_30000 = read.csv("data/gCIS-all/gCIS_prostate_refseq_30000.csv", header = T,stringsAsFactors=FALSE),
#gCIS_35000 = read.csv("data/gCIS-all/gCIS_prostate_refseq_35000.csv", header = T,stringsAsFactors=FALSE),
gCIS_40000 = read.csv("data/gCIS-all/gCIS_prostate_refseq_40000.csv", header = T,stringsAsFactors=FALSE))
#method 1
gCIS_sig <- lapply(gCIS_raw, sig_genes1)
gCIS_genes <- lapply(gCIS_sig, pull_genes_gCIS)
gCIS_gene_count <- lapply(gCIS_genes, length)
gCIS_gene_count_df <- gCIS_gene_count %>% as.data.frame() %>%
gather(value = "genes") %>% mutate(key = substring(key, 6)) %>% rename(promoter_size = key)
gCIS_gene_count_df$promoter_size <- factor(gCIS_gene_count_df$promoter_size,
levels = c("0", "5000", "10000", "15000", "20000", "25000", "30000", "35000", "40000"))
ggplot(gCIS_gene_count_df, aes(promoter_size, genes, fill = promoter_size)) +
geom_col()+
geom_text(aes(label=genes), position=position_dodge(width=1), vjust=-0.25, size = 2.25) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "")
ggsave(file.path(reports.dir,"gCIS_simple1.pdf"))
#method 2
gCIS_sig <- lapply(gCIS_raw, sig_genes2)
gCIS_genes <- lapply(gCIS_sig, pull_genes_gCIS)
gCIS_gene_count <- lapply(gCIS_genes, length)
gCIS_gene_count_df <- gCIS_gene_count %>% as.data.frame() %>%
gather(value = "genes") %>% mutate(key = substring(key, 6)) %>% rename(promoter_size = key)
gCIS_gene_count_df$promoter_size <- factor(gCIS_gene_count_df$promoter_size,
levels = c("0", "5000", "10000", "15000", "20000", "25000", "30000", "35000", "40000"))
ggplot(gCIS_gene_count_df, aes(promoter_size, genes, fill = promoter_size)) +
geom_col()+
geom_text(aes(label=genes), position=position_dodge(width=1), vjust=-0.25, size = 2.25) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "")
ggsave(file.path(reports.dir,"gCIS_simple2.pdf"))
gCIS_freq <- cbind(freq_genes(gCIS_genes,1),freq_genes(gCIS_genes,2),freq_genes(gCIS_genes,3),
freq_genes(gCIS_genes,4),freq_genes(gCIS_genes,5))
gCIS_freq$threshold <- names(gCIS_freq)
gCIS_melted <- gCIS_freq %>% melt(id.vars = "threshold", variable.name = "compareto") %>%
mutate(threshold = substring(threshold, 6), compareto = substring(compareto, 6)) %>%
group_by(compareto) %>%
mutate(position = rank(-value))
ggplot(data = gCIS_melted, aes(x = compareto, y = value, fill = reorder(threshold,-value), group = position)) +
geom_col(position = position_dodge2(width = 0.9, preserve = "single")) +
geom_text(aes(label=value), position=position_dodge(width=0.9), vjust=-0.25, size = 3) +
labs(x = "promoter region compared to", y = "number of intersecting genes", fill = "promoter region included")+
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(text = element_text(size = 12))+
scale_fill_discrete(breaks = c("0","10000","20000","30000","40000"))
ggsave(file.path(reports.dir,"gCIS_overlaps.pdf"))
return("output saved")
}
split_genes <- function(df){
td_df <- df %>% mutate_if(is.factor, as.character)
td_df_clean <- data.frame(matrix(ncol = length(colnames(td_df))))
colnames(td_df_clean) <- colnames(td_df)
for(i in 1:length(td_df$gene_name)) {
genes <- unlist(strsplit(td_df$gene_name[i], ","))
for (j in 1:length(genes)){
if (!grepl("^\\s*$", genes[j])) {
rowtoadd <- td_df[i,]
rowtoadd["gene_name"] <- genes[j]
td_df_clean <- rbind(td_df_clean, rowtoadd)
}
}
}
td_df_clean <- td_df_clean[-1,]
#clean and convert
td_df_clean[,"gene_name"] <- td_df_clean[,"gene_name"] %>% trimws()
return(td_df_clean)
}
pull_genes_TD <- function(df){
return(as.vector(unique(df$gene_name)))
}
pull_genes_gCIS <- function(df){
return(as.vector(unique(df$gene_symbol)))
}
freq_genes <- function(list,compare_to){
counts <- vector(length = length(list))
for(i in 1:length(list)){
counts[i] <- length(intersect(list[[i]],list[[compare_to]]))
}
names(counts) <- names(list)
counts <- as.data.frame(counts)
colnames(counts) <- names(list)[compare_to]
return(counts)
}
sig_genes1 <- function(df){
threshold.value <- .01/nrow(df)
df <- df %>% filter(p.value != "----")
df$p.value <- as.numeric(df[, 'p.value'])
df <- df %>%
filter(p.value < threshold.value) %>%
filter(chr != "chr1") %>%
filter(2 < X..of.hits)
return(df)
}
sig_genes2<- function(df){
threshold.value <- .01/nrow(df)
df <- df %>% filter(functional.prediction != "----")
df <- df %>% filter(p.value != "----")
df$p.value <- as.numeric(df[, 'p.value'])
df <- df %>%
filter(p.value < threshold.value) %>%
filter(chr != "chr1")
return(df)
}
# generate venn diagrams and examine overlaps:
gCIS_raw <- list(gCIS_0 = read.csv("data/gCIS-all/gCIS_prostate_refseq_0.csv", header = T,stringsAsFactors=FALSE),
gCIS_10000 = read.csv("data/gCIS-all/gCIS_prostate_refseq_10000.csv", header = T,stringsAsFactors=FALSE))
gCIS_sig1 <- lapply(gCIS_raw, sig_genes1)
gCIS_genes1 <- lapply(gCIS_sig1, pull_genes_gCIS)
gCIS_sig2 <- lapply(gCIS_raw, sig_genes2)
gCIS_genes2 <- lapply(gCIS_sig2, pull_genes_gCIS)
TD_raw <- list(TD.001 = read.csv("data/cis-all/cis_all-nr-prostate-0.001.csv", header = T),
TD.0001 = read.csv("data/cis-all/cis_all-nr-prostate-0.0001.csv", header = T))
TD_split <- lapply(TD_raw, split_genes)
TD_genes <- lapply(TD_split, pull_genes_TD)
gCIS1_0 <- gCIS_genes1[[1]]
gCIS1_10000 <- gCIS_genes1[[2]]
gCIS2_0 <- gCIS_genes2[[1]]
gCIS2_10000 <- gCIS_genes2[[2]]
TD_.001 <- TD_genes[[1]]
TD_.0001 <- TD_genes[[2]]
listInput1 <- list("gCIS_0" = gCIS1_0, "gCIS_10000" = gCIS1_10000, "TD_.001" = TD_.001,
"TD_.0001" = TD_.0001)
listInput2 <- list("gCIS_0" = gCIS2_0, "gCIS_10000" = gCIS2_10000, "TD_.001" = TD_.001,
"TD_.0001" = TD_.0001)
pdf(file.path(reports.dir,"overlaps1.pdf"))
plot(venn(listInput1, ellipse = FALSE, ilab=TRUE, ilcs = .8,
zcolor = c("red", "pink", "blue", "purple")), xlim = c(0,100), ylim = c(0,100))
dev.off()
pdf(file.path(reports.dir,"overlaps2.pdf"))
plot(venn(listInput2, ellipse = FALSE, ilab=TRUE, ilcs = .8,
zcolor = c("red", "pink", "blue", "purple")), xlim = c(0,100), ylim = c(0,100))
dev.off()
common1 <- Reduce(intersect, listInput1)
common2 <- Reduce(intersect, listInput2)
#import the moffitt subtypes
temp <- list.files(path = "data/moffitt", pattern = "\\_moffitt.txt$")
moffitt.dfs <- lapply(paste("data/moffitt/", temp, sep = ""), read.delim)
for(i in 1:length(temp)){
names(moffitt.dfs)[i] <- strsplit(temp, "_")[[i]][1]
}
moffitt.vecs <- lapply(moffitt.dfs, "[", , "gene")
for(i in 1:length(temp)){
names(moffitt.vecs)[i] <- strsplit(temp, "_")[[i]][1]
}
#reduced upset and venn plot
lists.to.remove <- sapply(moffitt.vecs, function(i) length(i) < 500)
moffitt.vecs.reduced <- moffitt.vecs[!lists.to.remove]
#bring together all the smaller sets of length less than 500
moffitt.vecs.reduced$'small sets' <- unique(unlist(moffitt.vecs[lists.to.remove]))
moffitt_common <- Reduce(intersect, moffitt.vecs.reduced)
listInput1_moffitt <- list("SB genes 1" = common1, "moffit genes" = moffitt_common)
pdf(file.path(reports.dir,"moffitt_overlaps1.pdf"))
plot(venn(listInput1_moffitt, ellipse = FALSE, ilab=TRUE, ilcs = .8,
zcolor = c("red", "blue")), xlim = c(0,100), ylim = c(0,100))
dev.off()
write.csv(as.data.frame(setdiff(listInput1_moffitt[[1]],listInput1_moffitt[[2]])),
file.path(reports.dir,"method1_unique_SB.csv"))
write.csv(as.data.frame(Reduce(intersect, listInput1_moffitt)),
file.path(reports.dir,"method1_intersect_moffitt.csv"))
listInput2_moffitt <- list("SB genes 2" = common2, "moffit genes" = moffitt_common)
pdf(file.path(reports.dir,"moffitt_overlaps2.pdf"))
plot(venn(listInput2_moffitt, ellipse = FALSE, ilab=TRUE, ilcs = .8,
zcolor = c("red", "blue")), xlim = c(0,100), ylim = c(0,100))
dev.off()
write.csv(as.data.frame(setdiff(listInput2_moffitt[[1]],listInput2_moffitt[[2]])),
file.path(reports.dir,"method2_unique_SB.csv"))
write.csv(as.data.frame(Reduce(intersect, listInput2_moffitt)),
file.path(reports.dir,"method2_intersect_moffitt.csv"))
#td_df <- td_df %>% mutate(ratio = number.of.inserts.drive.transcription.on.positive.strand/X.inserts) %>%
#  arrange(ratio) %>% filter(ratio >= .75 | ratio <= .25)
View(listInput2_moffitt)
temp
moffitt.vecs
View(moffitt.vecs)
View(moffitt.dfs)
moffitt_prostate_genes <- moffitt.dfs$prostate$gene
listInput3_prostate <- list("SB genes 1" = common1,
"prostate moffitt genes" = moffitt_prostate_genes)
pdf(file.path(reports.dir,"moffitt_overlap3.pdf"))
plot(venn(listInput3_moffitt, ellipse = FALSE, ilab=TRUE, ilcs = .8,
zcolor = c("red", "blue")), xlim = c(0,100), ylim = c(0,100))
dev.off()
pdf(file.path(reports.dir,"moffitt_overlap3.pdf"))
plot(venn(listInput3_prostate, ellipse = FALSE, ilab=TRUE, ilcs = .8,
zcolor = c("red", "blue")), xlim = c(0,100), ylim = c(0,100))
dev.off()
pdf(file.path(reports.dir,"prostate_overlap1.pdf"))
plot(venn(listInput3_prostate, ellipse = FALSE, ilab=TRUE, ilcs = .8,
zcolor = c("red", "blue")), xlim = c(0,100), ylim = c(0,100))
dev.off()
Reduce(intersect, listInput3_prostate)
write.csv(as.data.frame(Reduce(intersect, listInput3_prostate)),
file.path(reports.dir,"intersect_prostate.csv"))
pdf(file.path(reports.dir,"intersect_prostate.pdf"))
plot(venn(listInput3_prostate, ellipse = FALSE, ilab=TRUE, ilcs = .8,
zcolor = c("red", "blue")), xlim = c(0,100), ylim = c(0,100))
dev.off()
write.csv(as.data.frame(Reduce(intersect, listInput3_prostate)),
file.path(reports.dir,"intersect_prostate.csv"))
library(easyfulcrum)
setwd("~/Desktop/Andersen")
location <- getwd()
setwd(paste(location, "/R", sep = ""))
files.sources = list.files()
sapply(files.sources, source)
setwd(location)
# setup test directory for multi project Fulcrum export
dir1 <- "test_collection/data/raw/fulcrum"
location
paste(location, "/R", sep = "")
setwd(paste(location, "/R", sep = ""))
setwd("/R")
ls
ls()
setwd("~/Desktop/Andersen")
location <- getwd()
location <- getwd()
location
setwd("~/Desktop/Andersen")
dir1 <- "test_collection/data/raw/fulcrum"
raw_data1 <- readFulcrum(dir1)
proc_data1 <- procFulcrum(raw_data1)
checkParameters(proc_data1)
flag1.1 <- checkParameters(proc_data1, return = TRUE)
View(flag1.1$ambient_temperature_run)
to_change <- c("fb975ace-0036-4a80-b073-8ff638f35786", "3c1fd1f3-ea50-43b7-8fd6-09670e3068bf")
proc_data1_clean <- fixParameters(proc_data1, ambient_temperature_run_ids = to_change)
checkParameters(proc_data1_clean)
checkProc(proc_data1)
flag1.2 <- checkProc(proc_data1, return = TRUE)
join_data1 <- joinFulcrum(proc_data1)
checkJoin(join_data1)
flag1.3 <- checkJoin(join_data1, return = TRUE)
anno_data1 <- annotateFulcrum(join_data1)
geno_data1 <- readGenotypes(gsKey = c("1CxKJHM6mEu4VvnN2T1ioXiJNZmmmpeosmECP2zeAPmY"))
proc_geno_data1 <- procGenotypes(geno_data = geno_data1, fulc_data = anno_data1)
checkGenotypes(proc_geno_data1)
flag1.4 <- checkGenotypes(proc_geno_data1, return = TRUE)
View(flag1.4)
joingeno_data1 <- joinGenoFulc(geno = proc_geno_data1, fulc = anno_data1)
final_data1 <- procPhotos(dir = "test_collection/data/raw/fulcrum/photos", data = joingeno_data1, percentage = 20, overwrite = T)
View(final_data1)
