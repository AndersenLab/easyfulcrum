attach(df)
leaflet::leaflet(data = df, width = "100%", options = list(zoomControl = T)) %>%
addProviderTiles("Stamen.Terrain") %>%
leaflet::addMarkers(~collection_longitude,
~collection_latitude,
~collection_location,
~collection_island,
~collection_trail,
popup = glue::glue("<h2>{strain_name}</h2><hr />
<strong>collection uploaded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>collection location:</strong> {collection_location}<br />
<strong>collection island:</strong> {collection_island}<br />
<strong>collection trail:</strong> {collection_trail}<br />
<strong>substrate:</strong> {substrate}<br />  /></a>"),
# <strong>C. elegans:</strong> {`C. elegans count`}
# <strong>C. briggsae:</strong> {`C. briggsae count`}
# <strong>C. tropicalis:</strong> {`C. tropicalis count`}<br /></a>"),
popupOptions(maxWidth = 500),
icon = icos[ df[[color_use]] ] )
#htmlwidgets::saveWidget(m, tempfile(), selfcontained = FALSE)
#webshot::webshot("temp.html", file = "map.png",
#        cliprect = "viewport", vwidth = 1000, vheight = 1000)
}
# Make df for diagnostic plotting
# dplyr::mutate(non.caeno = ifelse((pcr_product_ssu == 1 & pcr_product_its2 == 0) |
#                                (pcr_product_ssu == 1 & pcr_product_its2 == 1 &
#                                   !(grepl("^Caeno",species_id))),"non-caeno",NA)) %>%
target_df <- df %>%
dplyr::filter(!is.na(c_label)) %>%
dplyr::group_by(c_label, species_id) %>%
dplyr::mutate(species_count = n()) %>%
dplyr::mutate(`C. elegans count` = ifelse(species_id == "Caenorhabditis elegans", species_count, 0),
`C. briggsae count` = ifelse(species_id == "Caenorhabditis briggsae", species_count, 0),
`C. tropicalis count` = ifelse(species_id == "Caenorhabditis tropicalis", species_count, 0)) %>%
dplyr::ungroup() %>%
dplyr::distinct(c_label, species_id, .keep_all =T) %>%
dplyr::arrange(c_label, desc(species_count)) %>%
dplyr::group_by(c_label) %>%
dplyr::mutate(`C. elegans count` = sum(`C. elegans count`),
`C. briggsae count` = sum(`C. briggsae count`),
`C. tropicalis count` = sum(`C. tropicalis count`)) %>%
dplyr::ungroup() %>%
dplyr::distinct(c_label, .keep_all =T) %>%
dplyr::mutate(color = case_when(species_id == "Caenorhabditis elegans" ~ "red",
species_id == "Caenorhabditis briggsae" ~ "blue",
#species_id == "Caenorhabditis tropicalis" ~ "orange",
is.na(species_id) ~ "orange"))
# map collection for diagnostic
target_map <-  map_target_species(target_df[1:16,],"color")
target_map
# Make df for diagnostic plotting
# dplyr::mutate(non.caeno = ifelse((pcr_product_ssu == 1 & pcr_product_its2 == 0) |
#                                (pcr_product_ssu == 1 & pcr_product_its2 == 1 &
#                                   !(grepl("^Caeno",species_id))),"non-caeno",NA)) %>%
target_df <- df %>%
dplyr::distinct(c_label, .keep_all =T) %>%
dplyr::mutate(color = case_when(species_id == "Caenorhabditis elegans" ~ "red",
species_id == "Caenorhabditis briggsae" ~ "blue",
species_id == "Caenorhabditis tropicalis" ~ "orange",
is.na(species_id) ~ "black"))
# map collection for diagnostic
target_map <-  map_target_species(target_df[1:16,],"color")
target_map
# Target species map function
# Map_collection function for reviewing collection locations
map_target_species <- function(df, color_use) {
icos <- iconList(
red = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/red.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
),
orange = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/orange.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
),
blue = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/blue.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
),
black = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/black.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
)
)
df <- dplyr::filter(df, !is.na(df[[color_use]])) %>%
dplyr::mutate(substrate=ifelse(is.na(substrate), "", substrate)) %>%
dplyr::arrange(species_id)
#print(df)
# "https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}.png"
#"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}"
attach(df)
leaflet::leaflet(data = df, width = "100%", options = list(zoomControl = T)) %>%
addProviderTiles("Stamen.Terrain") %>%
leaflet::addMarkers(~c_label,
~collection_longitude,
~collection_latitude,
~collection_location,
~collection_island,
~collection_trail,
~substrate
popup = glue::glue("<h2>{c_label}</h2><hr />
# Target species map function
# Map_collection function for reviewing collection locations
map_target_species <- function(df, color_use) {
icos <- iconList(
red = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/red.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
),
orange = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/orange.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
),
blue = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/blue.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
),
black = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/black.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
)
)
df <- dplyr::filter(df, !is.na(df[[color_use]])) %>%
dplyr::mutate(substrate=ifelse(is.na(substrate), "", substrate)) %>%
dplyr::arrange(species_id)
#print(df)
# "https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}.png"
#"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}"
attach(df)
leaflet::leaflet(data = df, width = "100%", options = list(zoomControl = T)) %>%
addProviderTiles("Stamen.Terrain") %>%
leaflet::addMarkers(~c_label,
~collection_longitude,
~collection_latitude,
~collection_location,
~collection_island,
~collection_trail,
~substrate,
popup = glue::glue("<h2>{c_label}</h2><hr />
<strong>collection uploaded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>collection location:</strong> {collection_location}<br />
<strong>collection island:</strong> {collection_island}<br />
<strong>collection trail:</strong> {collection_trail}<br />
<strong>substrate:</strong> {substrate}<br /></a>"),
popupOptions(maxWidth = 500),
icon = icos[ df[[color_use]] ] )
#htmlwidgets::saveWidget(m, tempfile(), selfcontained = FALSE)
#webshot::webshot("temp.html", file = "map.png",
#        cliprect = "viewport", vwidth = 1000, vheight = 1000)
}
# Make df for diagnostic plotting
# dplyr::mutate(non.caeno = ifelse((pcr_product_ssu == 1 & pcr_product_its2 == 0) |
#                                (pcr_product_ssu == 1 & pcr_product_its2 == 1 &
#                                   !(grepl("^Caeno",species_id))),"non-caeno",NA)) %>%
target_df <- df %>%
dplyr::distinct(c_label, .keep_all =T) %>%
dplyr::mutate(color = case_when(species_id == "Caenorhabditis elegans" ~ "red",
species_id == "Caenorhabditis briggsae" ~ "blue",
species_id == "Caenorhabditis tropicalis" ~ "orange",
is.na(species_id) ~ "black"))
# map collection for diagnostic
target_map <-  map_target_species(target_df[1:16,],"color")
# Target species map function
# Map_collection function for reviewing collection locations
map_target_species <- function(df, color_use) {
icos <- iconList(
red = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/red.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
),
orange = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/orange.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
),
blue = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/blue.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
),
black = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/black.svg"),
iconWidth = 15, iconHeight = 15,
popupAnchorX = 0.001, popupAnchorY = -15,
iconAnchorX = 15/2, iconAnchorY = 15
)
)
df <- dplyr::filter(df, !is.na(df[[color_use]])) %>%
dplyr::mutate(substrate=ifelse(is.na(substrate), "", substrate)) %>%
dplyr::arrange(species_id)
#print(df)
# "https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}.png"
#"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}"
attach(df)
leaflet::leaflet(data = df, width = "100%", options = list(zoomControl = T)) %>%
addProviderTiles("Stamen.Terrain") %>%
leaflet::addMarkers(~collection_longitude,
~collection_latitude,
popup = glue::glue("<h2>{c_label}</h2><hr />
<strong>collection uploaded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>collection location:</strong> {collection_location}<br />
<strong>collection island:</strong> {collection_island}<br />
<strong>collection trail:</strong> {collection_trail}<br />
<strong>substrate:</strong> {substrate}<br /></a>"),
popupOptions(maxWidth = 500),
icon = icos[ df[[color_use]] ] )
#htmlwidgets::saveWidget(m, tempfile(), selfcontained = FALSE)
#webshot::webshot("temp.html", file = "map.png",
#        cliprect = "viewport", vwidth = 1000, vheight = 1000)
}
# Make df for diagnostic plotting
# dplyr::mutate(non.caeno = ifelse((pcr_product_ssu == 1 & pcr_product_its2 == 0) |
#                                (pcr_product_ssu == 1 & pcr_product_its2 == 1 &
#                                   !(grepl("^Caeno",species_id))),"non-caeno",NA)) %>%
target_df <- df %>%
dplyr::distinct(c_label, .keep_all =T) %>%
dplyr::mutate(color = case_when(species_id == "Caenorhabditis elegans" ~ "red",
species_id == "Caenorhabditis briggsae" ~ "blue",
species_id == "Caenorhabditis tropicalis" ~ "orange",
is.na(species_id) ~ "black"))
# map collection for diagnostic
target_map <-  map_target_species(target_df[1:16,],"color")
target_map
# Make df for diagnostic plotting
# dplyr::mutate(non.caeno = ifelse((pcr_product_ssu == 1 & pcr_product_its2 == 0) |
#                                (pcr_product_ssu == 1 & pcr_product_its2 == 1 &
#                                   !(grepl("^Caeno",species_id))),"non-caeno",NA)) %>%
target_df <- df %>%
dplyr::distinct(c_label, .keep_all =T) %>%
dplyr::mutate(color = case_when(species_id == "Caenorhabditis elegans" ~ "red",
species_id == "Caenorhabditis briggsae" ~ "blue",
species_id == "Caenorhabditis tropicalis" ~ "orange",
is.na(species_id) ~ "black"))
# map collection for diagnostic
target_map <-  map_target_species(target_df[1:16,],"color")
target_map
collection_worms_on_sample
target_df <- df %>%
dplyr::distinct(c_label, .keep_all =T) %>%
dplyr::mutate(color = case_when(worms_on_sample == "Yes" ~ "red",
worms_on_sample == "No" ~ "blue",
worms_on_sample == "Tracks" ~ "orange",
is.na(worms_on_sample) ~ "black"))
target_map <-  map_target_species(target_df,"color")
target_map
# dplyr::mutate(non.caeno = ifelse((pcr_product_ssu == 1 & pcr_product_its2 == 0) |
#                                (pcr_product_ssu == 1 & pcr_product_its2 == 1 &
#                                   !(grepl("^Caeno",species_id))),"non-caeno",NA)) %>%
target_df <- df %>%
dplyr::filter(species_id %in% c("Caenorhabditis elegans", "Caenorhabditis briggsae", "Caenorhabditis tropicalis"))
dplyr::distinct(c_label, .keep_all =T) %>%
dplyr::mutate(color = case_when(species_id == "Caenorhabditis elegans" ~ "red",
species_id == "Caenorhabditis briggsae" ~ "blue",
species_id == "Caenorhabditis tropicalis" ~ "orange"))
df %>%
dplyr::filter(species_id %in% c("Caenorhabditis elegans", "Caenorhabditis briggsae", "Caenorhabditis tropicalis"))
# dplyr::mutate(non.caeno = ifelse((pcr_product_ssu == 1 & pcr_product_its2 == 0) |
#                                (pcr_product_ssu == 1 & pcr_product_its2 == 1 &
#                                   !(grepl("^Caeno",species_id))),"non-caeno",NA)) %>%
target_df <- df %>%
dplyr::filter(!is.na(c_label)) %>%
dplyr::filter(species_id %in% c("Caenorhabditis elegans", "Caenorhabditis briggsae", "Caenorhabditis tropicalis"))
dplyr::distinct(c_label, .keep_all =T) %>%
dplyr::mutate(color = case_when(species_id == "Caenorhabditis elegans" ~ "red",
species_id == "Caenorhabditis briggsae" ~ "blue",
species_id == "Caenorhabditis tropicalis" ~ "orange"))
target_df <- df %>%
dplyr::distinct(c_label, .keep_all =T) %>%
dplyr::mutate(color = case_when(worms_on_sample == "Yes" ~ "red",
worms_on_sample == "No" ~ "blue",
worms_on_sample == "Tracks" ~ "orange",
is.na(worms_on_sample) ~ "black"))
target_map <-  map_target_species(target_df,"color")
target_map
# dplyr::mutate(non.caeno = ifelse((pcr_product_ssu == 1 & pcr_product_its2 == 0) |
#                                (pcr_product_ssu == 1 & pcr_product_its2 == 1 &
#                                   !(grepl("^Caeno",species_id))),"non-caeno",NA)) %>%
target_df <- df %>%
dplyr::distinct(c_label, .keep_all =T) %>%
dplyr::filter(species_id %in% c("Caenorhabditis elegans", "Caenorhabditis briggsae", "Caenorhabditis tropicalis"))
dplyr::mutate(color = case_when(species_id == "Caenorhabditis elegans" ~ "red",
species_id == "Caenorhabditis briggsae" ~ "blue",
species_id == "Caenorhabditis tropicalis" ~ "orange"))
# dplyr::mutate(non.caeno = ifelse((pcr_product_ssu == 1 & pcr_product_its2 == 0) |
#                                (pcr_product_ssu == 1 & pcr_product_its2 == 1 &
#                                   !(grepl("^Caeno",species_id))),"non-caeno",NA)) %>%
target_df <- df %>%
dplyr::distinct(c_label, .keep_all =T) %>%
dplyr::filter(species_id %in% c("Caenorhabditis elegans", "Caenorhabditis briggsae", "Caenorhabditis tropicalis")) %>%
dplyr::mutate(color = case_when(species_id == "Caenorhabditis elegans" ~ "red",
species_id == "Caenorhabditis briggsae" ~ "blue",
species_id == "Caenorhabditis tropicalis" ~ "orange"))
# map collection for diagnostic
target_map <-  map_target_species(target_df,"color")
target_map
getwd()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# install.packages("devtools")
# devtools::install_github("AndersenLab/easyfulcrum")
library(easyfulcrum)
setwd("~/Desktop")
makeDirStructure(startdir = "~/Desktop/",
projectdirname = "2020JanuaryHawaii")
dir1 <- "~/Desktop/2020JanuaryHawaii"
# raw_fulc1 <- readFulcrum(dir = dir1)
names(easyfulcrum::raw_fulc1)
proc_fulc1 <- procFulcrum(data = raw_fulc1)
flag1.1 <- checkTemperatures(data = proc_fulc1, return_flags = TRUE)
proc_fulc1_clean <- fixTemperatures(data = proc_fulc1,
substrate_temperature_ids = "a7db618d-44cc-4b4a-bc67-871306029274",
ambient_temperature_ids = "b1f20ae4-c5c2-426f-894a-e1f46c2fa693",
ambient_temperature_run_ids=c("dda77efe-d73c-48e9-aefb-b508e613256b",
"93de14a0-40ab-4793-8614-ab1512ab158c"))
join_fulc1 <- joinFulcrum(data = proc_fulc1)
flag1.2 <- checkJoin(data = join_fulc1, return_flags = TRUE)
anno_fulc1 <- annotateFulcrum(data = join_fulc1, dir = NULL)
# raw_geno1 <- readGenotypes(gsKey = c("1_6u4sk_Zj-Hm5d_058Lg8WYWLe7BZHGTWxXcH6EsDUI"))
head(easyfulcrum::raw_geno1)
proc_geno1 <- checkGenotypes(geno_data = easyfulcrum::raw_geno1, fulc_data = anno_fulc1,
return_geno = TRUE, return_flags = FALSE)
flag1.3 <- checkGenotypes(geno_data = raw_geno1, fulc_data = anno_fulc1,
return_geno = FALSE, return_flags = TRUE)
join_genofulc1 <- joinGenoFulc(geno = proc_geno1, fulc = anno_fulc1, dir = dir1)
#This chunk of code will move the photos required for this trial run into the appropriate folder for raw photos, according to what `dir1` is specified.
#You can also find these photos for manual download at: https://github.com/AndersenLab/easyfulcrum/tree/master/vignettes/2020JanuaryHawaii_photos
library(googledrive)
final_directory <- paste(dir1, "data/raw/fulcrum/photos", sep = "/")
temp_dir <- tempdir()
photos <- googledrive::drive_ls(as_id("11T6qzszJ_yK3yRyy4eqBfplZuai20y-g"))
photos$temp_location <- paste(temp_dir,photos$name, sep = "/")
photos$final_location <- paste(final_directory,photos$name, sep = "/")
for(i in 1:nrow(photos)){
googledrive::drive_download(as_id(photos$id[i]),
path =photos$temp_location[i],
overwrite = TRUE)
fs::file_copy(photos$temp_location[i], photos$final_location[i], overwrite = TRUE)
}
final_data1 <- procPhotos(dir = dir1, data = join_genofulc1, max_dim = 500, overwrite = T, CeNDR = TRUE)
rmarkdown::render("source/report.Rmd")
getwd()
rmarkdown::render("R/report.Rmd")
setwd("R")
setwd("/R")
rmarkdown::render("R/report.Rmd")
rmarkdown::render("/Users/matteodibernardo/Desktop/Andersen/git/easyfulcrum/R/report.Rmd")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# install.packages("devtools")
# devtools::install_github("AndersenLab/easyfulcrum")
library(easyfulcrum)
setwd("~/Desktop")
makeDirStructure(startdir = "~/Desktop/",
projectdirname = "2020JanuaryHawaii")
dir1 <- "~/Desktop/2020JanuaryHawaii"
# raw_fulc1 <- readFulcrum(dir = dir1)
names(easyfulcrum::raw_fulc1)
proc_fulc1 <- procFulcrum(data = raw_fulc1)
flag1.1 <- checkTemperatures(data = proc_fulc1, return_flags = TRUE)
proc_fulc1_clean <- fixTemperatures(data = proc_fulc1,
substrate_temperature_ids = "a7db618d-44cc-4b4a-bc67-871306029274",
ambient_temperature_ids = "b1f20ae4-c5c2-426f-894a-e1f46c2fa693",
ambient_temperature_run_ids=c("dda77efe-d73c-48e9-aefb-b508e613256b",
"93de14a0-40ab-4793-8614-ab1512ab158c"))
join_fulc1 <- joinFulcrum(data = proc_fulc1)
flag1.2 <- checkJoin(data = join_fulc1, return_flags = TRUE)
anno_fulc1 <- annotateFulcrum(data = join_fulc1, dir = NULL)
# raw_geno1 <- readGenotypes(gsKey = c("1_6u4sk_Zj-Hm5d_058Lg8WYWLe7BZHGTWxXcH6EsDUI"))
head(easyfulcrum::raw_geno1)
proc_geno1 <- checkGenotypes(geno_data = easyfulcrum::raw_geno1, fulc_data = anno_fulc1,
return_geno = TRUE, return_flags = FALSE)
flag1.3 <- checkGenotypes(geno_data = raw_geno1, fulc_data = anno_fulc1,
return_geno = FALSE, return_flags = TRUE)
join_genofulc1 <- joinGenoFulc(geno = proc_geno1, fulc = anno_fulc1, dir = dir1)
#This chunk of code will move the photos required for this trial run into the appropriate folder for raw photos, according to what `dir1` is specified.
#You can also find these photos for manual download at: https://github.com/AndersenLab/easyfulcrum/tree/master/vignettes/2020JanuaryHawaii_photos
library(googledrive)
final_directory <- paste(dir1, "data/raw/fulcrum/photos", sep = "/")
temp_dir <- tempdir()
photos <- googledrive::drive_ls(as_id("11T6qzszJ_yK3yRyy4eqBfplZuai20y-g"))
photos$temp_location <- paste(temp_dir,photos$name, sep = "/")
photos$final_location <- paste(final_directory,photos$name, sep = "/")
for(i in 1:nrow(photos)){
googledrive::drive_download(as_id(photos$id[i]),
path =photos$temp_location[i],
overwrite = TRUE)
fs::file_copy(photos$temp_location[i], photos$final_location[i], overwrite = TRUE)
}
?kable
# print nice tables
knitr::kable(collection_distinct,
col.names = c("","number of collections")) %>% kable_classic_2(full_width = F)
# print nice tables
knitr::kable(collection_distinct,
col.names = c("","number of collections")) %>% kable_classic_2(full_width = T)
# print nice tables
knitr::kable(collection_distinct,
col.names = c("","number of collections")) %>% kable_classic(full_width = T)
# print nice tables
knitr::kable(collection_distinct,
col.names = c("","number of collections")) %>% kable_classic(full_width = F)
?kable_classic
?kable_styling
rmarkdown::render("/Users/matteodibernardo/Desktop/Andersen/git/easyfulcrum/R/report.Rmd")
knitr::kable(collection_worms_on_sample,
col.names = c("worms on sample","number of collections")) %>%
kable_classic(full_width = F, html_font = "Cambria", position = "left")
rmarkdown::render("/Users/matteodibernardo/Desktop/Andersen/git/easyfulcrum/R/report.Rmd")
rmarkdown::render("/Users/matteodibernardo/Desktop/Andersen/git/easyfulcrum/R/report.Rmd")
rmarkdown::render("/Users/matteodibernardo/Desktop/Andersen/git/easyfulcrum/R/report.Rmd")
rmarkdown::render("/Users/matteodibernardo/Desktop/Andersen/git/easyfulcrum/R/report.Rmd")
rmarkdown::render("/Users/matteodibernardo/Desktop/Andersen/git/easyfulcrum/R/report.Rmd")
rmarkdown::render("/Users/matteodibernardo/Desktop/Andersen/git/easyfulcrum/R/report.Rmd")
rmarkdown::render("/Users/matteodibernardo/Desktop/Andersen/git/easyfulcrum/R/report.Rmd")
collection_counts_1
collection_counts_1 %>% dplyr::filter(species_id == "Caenorhabditis elegans") %>%
dplyr::pull(c_label)
# strain, C plate, S plate, ambient temp, ambient humidity, substrate temp, elevation, substrate, and then all the other categorical C plate data are good
elegans_c_label <- collection_counts_1 %>%
dplyr::filter(species_id == "Caenorhabditis elegans")%>%
dplyr::pull(c_label)
length(elegans_c_label)
briggsae_c_label <- collection_counts_1 %>%
dplyr::filter(species_id == "Caenorhabditis briggsae")%>%
dplyr::pull(c_label)
if(length(briggsae_c_label)==0){
print("No collections in this project identified C. briggsae samples")
}  else if (length(briggsae_c_label)>0){
briggsae_df <- df %>% dplyr::filter(c_label %in% briggsae_c_label)
}
# strain, C plate, S plate, ambient temp, ambient humidity, substrate temp, elevation, substrate, and then all the other categorical C plate data are good
briggsae_df
View(briggsae_df)
View(collection_counts_1)
View(raw_geno1)
elegans_c_label <- collection_counts_1 %>%
dplyr::filter(species_id == "Caenorhabditis elegans")%>%
dplyr::pull(c_label)
if(length(elegans_c_label)==0){
print("No collections in this project identified C. elegans samples")
}  else if (length(elegans_c_label)>0){
elegans_df <- df %>% dplyr::filter(species_id == "Caenorhabditis elegans")
}
# strain, C plate, S plate, ambient temp, ambient humidity, substrate temp, elevation, substrate, and then all the other categorical C plate data are good
briggsae_c_label <- collection_counts_1 %>%
dplyr::filter(species_id == "Caenorhabditis briggsae")%>%
dplyr::pull(c_label)
if(length(briggsae_c_label)==0){
print("No collections in this project identified C. briggsae samples")
}  else if (length(briggsae_c_label)>0){
briggsae_df <- df %>% dplyr::filter(species_id == "Caenorhabditis briggsae")
}
# strain, C plate, S plate, ambient temp, ambient humidity, substrate temp, elevation, substrate, and then all the other categorical C plate data are good
View(briggsae_df)
briggsae_c_label <- collection_counts_1 %>%
dplyr::filter(species_id == "Caenorhabditis briggsae")%>%
dplyr::pull(c_label)
if(length(briggsae_c_label)==0){
print("No collections in this project identified C. briggsae samples")
}  else if (length(briggsae_c_label)>0){
briggsae_df <- df %>% dplyr::filter(species_id == "Caenorhabditis briggsae") %>%
dplyr::select(c_label,s_label,proc_ambient_temperature,ambient_humidity,
proc_substrate_temperature,collection_altitude, substrate)
}
# strain, C plate, S plate, ambient temp, ambient humidity, substrate temp, elevation, substrate, and then all the other categorical C plate data are good
View(briggsae_df)
briggsae_c_label <- collection_counts_1 %>%
dplyr::filter(species_id == "Caenorhabditis briggsae")%>%
dplyr::pull(c_label)
if(length(briggsae_c_label)==0){
print("No collections in this project identified C. briggsae samples")
}  else if (length(briggsae_c_label)>0){
briggsae_df <- df %>% dplyr::filter(species_id == "Caenorhabditis briggsae") %>%
dplyr::select(c_label,s_label,proc_ambient_temperature,ambient_humidity,
proc_substrate_temperature,collection_altitude, substrate)
knitr::kable(briggsae_df) %>%
kable_classic(full_width = TRUE, html_font = "Cambria", position = "left")
}
# strain, C plate, S plate, ambient temp, ambient humidity, substrate temp, elevation, substrate, and then all the other categorical C plate data are good
rmarkdown::render("/Users/matteodibernardo/Desktop/Andersen/git/easyfulcrum/R/report.Rmd")
View(isolation_species_id)
View(isolation_species_id)
rmarkdown::render("/Users/matteodibernardo/Desktop/Andersen/git/easyfulcrum/R/report.Rmd")
rmarkdown::render("/Users/matteodibernardo/Desktop/Andersen/git/easyfulcrum/R/report.Rmd")
webshot::install_phantomjs()
