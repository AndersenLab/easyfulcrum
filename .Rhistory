theme(legend.position = "none") +
labs(y = "total time (seconds)", x = "") +
coord_flip()
benchmark_plot <- ggplot(bench_dat_proc) +
aes(x = function_name, y = total_time, fill = function_name, alpha = 0.5) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = .15, shape = 21, size = 3) +
theme_bw() +
labs(y = "total time (seconds)", x = "") +
coord_flip()
benchmark_plot <- ggplot(bench_dat_proc) +
aes(x = function_name, y = total_time, fill = function_name, alpha = 0.5) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = .15, shape = 21, size = 3) +
theme_bw() +
labs(y = "total time (seconds)", x = "") +
coord_flip() +
theme(axis.text.x = element_text(size = 16, face = "plain", color = "black"),
axis.text.y = element_text(size = 16, face = "plain", color = "black"),
axis.title.x = element_text(size = 18, face = "bold", color = "black"),
axis.title.y = element_text(size = 18, face = "bold", color = "black"),
strip.text.x = element_text(size = 18, face = "bold", color = "black"),
strip.text.y = element_text(size = 18, face = "bold", color = "black"),
plot.title = element_text(size = 18, face = "bold", color = "black"),
legend.position = "none")
benchmark_plot
bench_dat_proc <- bench_dat %>%
dplyr::mutate(function_name = ifelse(expression == "procPhotos1(photodir, joingeno_data1)", "base graphics",
ifelse(expression == "procPhotos2(photodir, joingeno_data1)", "OpenImageR downsample",
ifelse(expression == "procPhotos3(photodir, joingeno_data1)", "OpenImageR resizeImage",
ifelse(expression == "procPhotos4(photodir, joingeno_data1)", "imager resize", "wtf?"))))) %>%
dplyr::group_by(expression) %>%
dplyr::mutate(mean_time = median(total_time))
bench_dat_proc <- bench_dat %>%
dplyr::mutate(function_name = ifelse(expression == "procPhotos1(photodir, joingeno_data1)", "base graphics",
ifelse(expression == "procPhotos2(photodir, joingeno_data1)", "OpenImageR downsample",
ifelse(expression == "procPhotos3(photodir, joingeno_data1)", "OpenImageR resizeImage",
ifelse(expression == "procPhotos4(photodir, joingeno_data1)", "imager resize", "wtf?"))))) %>%
dplyr::group_by(function_name) %>%
dplyr::mutate(mean_time = median(total_time))
View(bench_dat)
View(bench_dat_proc)
bench_dat_proc <- bench_dat %>%
dplyr::mutate(function_name = ifelse(expression == "procPhotos1(photodir, joingeno_data1)", "base graphics",
ifelse(expression == "procPhotos2(photodir, joingeno_data1)", "OpenImageR downsample",
ifelse(expression == "procPhotos3(photodir, joingeno_data1)", "OpenImageR resizeImage",
ifelse(expression == "procPhotos4(photodir, joingeno_data1)", "imager resize", "wtf?"))))) %>%
dplyr::group_by(function_name) %>%
dplyr::mutate(mean_time = median(total_time)) %>%
dplyr::arrange(mean_time) %>%
dplyr::ungroup() %>%
dplyr::mutate(function_name = factor(function_name, levels = glue::glue({. %>% dplyr::distinct(function_name) %>% dplyr::pull(function_name)})))
View(bench_dat_proc)
bench_dat_proc <- bench_dat %>%
dplyr::mutate(function_name = ifelse(expression == "procPhotos1(photodir, joingeno_data1)", "base graphics",
ifelse(expression == "procPhotos2(photodir, joingeno_data1)", "OpenImageR downsample",
ifelse(expression == "procPhotos3(photodir, joingeno_data1)", "OpenImageR resizeImage",
ifelse(expression == "procPhotos4(photodir, joingeno_data1)", "imager resize", "wtf?"))))) %>%
dplyr::group_by(function_name) %>%
dplyr::mutate(mean_time = median(total_time)) %>%
dplyr::arrange(mean_time) %>%
dplyr::ungroup() %>%
dplyr::mutate(function_name = factor(function_name, levels = glue::glue("{. %>% dplyr::distinct(function_name) %>% dplyr::pull(function_name)})")))
bench_dat_proc <- bench_dat %>%
dplyr::mutate(function_name = ifelse(expression == "procPhotos1(photodir, joingeno_data1)", "base graphics",
ifelse(expression == "procPhotos2(photodir, joingeno_data1)", "OpenImageR downsample",
ifelse(expression == "procPhotos3(photodir, joingeno_data1)", "OpenImageR resizeImage",
ifelse(expression == "procPhotos4(photodir, joingeno_data1)", "imager resize", "wtf?"))))) %>%
dplyr::group_by(function_name) %>%
dplyr::mutate(mean_time = median(total_time)) %>%
dplyr::arrange(mean_time) %>%
dplyr::ungroup()
glimipse(bench_dat_proc)
glimpse(bench_dat_proc)
bench_dat_proc <- bench_dat %>%
dplyr::mutate(function_name = ifelse(expression == "procPhotos1(photodir, joingeno_data1)", "base graphics",
ifelse(expression == "procPhotos2(photodir, joingeno_data1)", "OpenImageR downsample",
ifelse(expression == "procPhotos3(photodir, joingeno_data1)", "OpenImageR resizeImage",
ifelse(expression == "procPhotos4(photodir, joingeno_data1)", "imager resize", "wtf?"))))) %>%
dplyr::group_by(function_name) %>%
dplyr::mutate(mean_time = median(total_time)) %>%
dplyr::arrange(mean_time) %>%
dplyr::ungroup() %>%
dplyr::mutate(function_name = factor(function_name, levels = glue::glue("{dplyr::distinct(function_name) %>% dplyr::pull(function_name)})")))
bench_dat_proc <- bench_dat %>%
dplyr::mutate(function_name = ifelse(expression == "procPhotos1(photodir, joingeno_data1)", "base graphics",
ifelse(expression == "procPhotos2(photodir, joingeno_data1)", "OpenImageR downsample",
ifelse(expression == "procPhotos3(photodir, joingeno_data1)", "OpenImageR resizeImage",
ifelse(expression == "procPhotos4(photodir, joingeno_data1)", "imager resize", "wtf?"))))) %>%
dplyr::group_by(function_name) %>%
dplyr::mutate(mean_time = median(total_time)) %>%
dplyr::arrange(mean_time) %>%
dplyr::ungroup() %>%
dplyr::mutate(function_name = factor(function_name, levels = glue::glue("{unique(function_name) %>% dplyr::pull(function_name)})")))
bench_dat_proc <- bench_dat %>%
dplyr::mutate(function_name = ifelse(expression == "procPhotos1(photodir, joingeno_data1)", "base graphics",
ifelse(expression == "procPhotos2(photodir, joingeno_data1)", "OpenImageR downsample",
ifelse(expression == "procPhotos3(photodir, joingeno_data1)", "OpenImageR resizeImage",
ifelse(expression == "procPhotos4(photodir, joingeno_data1)", "imager resize", "wtf?"))))) %>%
dplyr::group_by(function_name) %>%
dplyr::mutate(mean_time = median(total_time)) %>%
dplyr::arrange(mean_time) %>%
dplyr::ungroup() %>%
dplyr::mutate(function_name = factor(function_name, levels = glue::glue("{unique(.$function_name)})")))
View(bench_dat_proc)
bench_dat_proc <- bench_dat %>%
dplyr::mutate(function_name = ifelse(expression == "procPhotos1(photodir, joingeno_data1)", "base graphics",
ifelse(expression == "procPhotos2(photodir, joingeno_data1)", "OpenImageR downsample",
ifelse(expression == "procPhotos3(photodir, joingeno_data1)", "OpenImageR resizeImage",
ifelse(expression == "procPhotos4(photodir, joingeno_data1)", "imager resize", "wtf?"))))) %>%
dplyr::group_by(function_name) %>%
dplyr::mutate(mean_time = median(total_time)) %>%
dplyr::arrange(mean_time) %>%
dplyr::ungroup() %>%
dplyr::mutate(function_test = factor(function_name, levels = glue::glue("{unique(.$function_name)})")))
View(bench_dat_proc)
unique(bench_dat_proc$function_name)
bench_dat_proc <- bench_dat %>%
dplyr::mutate(function_name = ifelse(expression == "procPhotos1(photodir, joingeno_data1)", "base graphics",
ifelse(expression == "procPhotos2(photodir, joingeno_data1)", "OpenImageR downsample",
ifelse(expression == "procPhotos3(photodir, joingeno_data1)", "OpenImageR resizeImage",
ifelse(expression == "procPhotos4(photodir, joingeno_data1)", "imager resize", "wtf?"))))) %>%
dplyr::group_by(function_name) %>%
dplyr::mutate(mean_time = median(total_time)) %>%
dplyr::arrange(mean_time) %>%
dplyr::ungroup() %>%
dplyr::mutate(function_test = factor(function_name, levels = glue::glue("{unique(function_name)})")))
View(bench_dat_proc)
dplyr::mutate(function_test = factor(function_name, levels = unique(function_name))
bench_dat_proc <- bench_dat %>%
dplyr::mutate(function_name = ifelse(expression == "procPhotos1(photodir, joingeno_data1)", "base graphics",
ifelse(expression == "procPhotos2(photodir, joingeno_data1)", "OpenImageR downsample",
ifelse(expression == "procPhotos3(photodir, joingeno_data1)", "OpenImageR resizeImage",
ifelse(expression == "procPhotos4(photodir, joingeno_data1)", "imager resize", "wtf?"))))) %>%
dplyr::group_by(function_name) %>%
dplyr::mutate(mean_time = median(total_time)) %>%
dplyr::arrange(mean_time) %>%
dplyr::ungroup() %>%
dplyr::mutate(function_test = factor(function_name, levels = unique(function_name)))
bench_dat_proc <- bench_dat %>%
dplyr::mutate(function_name = ifelse(expression == "procPhotos1(photodir, joingeno_data1)", "base graphics",
ifelse(expression == "procPhotos2(photodir, joingeno_data1)", "OpenImageR downsample",
ifelse(expression == "procPhotos3(photodir, joingeno_data1)", "OpenImageR resizeImage",
ifelse(expression == "procPhotos4(photodir, joingeno_data1)", "imager resize", "wtf?"))))) %>%
dplyr::group_by(function_name) %>%
dplyr::mutate(mean_time = median(total_time)) %>%
dplyr::arrange(mean_time) %>%
dplyr::ungroup() %>%
dplyr::mutate(function_test = factor(function_name, levels = unique(function_name)))
View(bench_dat_proc)
bench_dat_proc <- bench_dat %>%
dplyr::mutate(function_name = ifelse(expression == "procPhotos1(photodir, joingeno_data1)", "base graphics",
ifelse(expression == "procPhotos2(photodir, joingeno_data1)", "OpenImageR downsample",
ifelse(expression == "procPhotos3(photodir, joingeno_data1)", "OpenImageR resizeImage",
ifelse(expression == "procPhotos4(photodir, joingeno_data1)", "imager resize", "wtf?"))))) %>%
dplyr::group_by(function_name) %>%
dplyr::mutate(mean_time = median(total_time)) %>%
dplyr::arrange(mean_time) %>%
dplyr::ungroup() %>%
dplyr::mutate(function_name = factor(function_name, levels = unique(function_name)))
benchmark_plot <- ggplot(bench_dat_proc) +
aes(x = function_name, y = total_time, fill = function_name, alpha = 0.5) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = .15, shape = 21, size = 3) +
theme_bw() +
labs(y = "total time (seconds)", x = "") +
coord_flip() +
theme(axis.text.x = element_text(size = 16, face = "plain", color = "black"),
axis.text.y = element_text(size = 16, face = "plain", color = "black"),
axis.title.x = element_text(size = 18, face = "bold", color = "black"),
axis.title.y = element_text(size = 18, face = "bold", color = "black"),
strip.text.x = element_text(size = 18, face = "bold", color = "black"),
strip.text.y = element_text(size = 18, face = "bold", color = "black"),
plot.title = element_text(size = 18, face = "bold", color = "black"),
legend.position = "none")
benchmark_plot
benchmark_plot <- ggplot(bench_dat_proc) +
aes(x = function_name, y = total_time, fill = "black", alpha = 0.5) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = .15, shape = 21, size = 3) +
theme_bw() +
labs(y = "total time (seconds)", x = "") +
coord_flip() +
theme(axis.text.x = element_text(size = 16, face = "plain", color = "black"),
axis.text.y = element_text(size = 16, face = "plain", color = "black"),
axis.title.x = element_text(size = 18, face = "bold", color = "black"),
axis.title.y = element_text(size = 18, face = "bold", color = "black"),
strip.text.x = element_text(size = 18, face = "bold", color = "black"),
strip.text.y = element_text(size = 18, face = "bold", color = "black"),
plot.title = element_text(size = 18, face = "bold", color = "black"),
legend.position = "none")
benchmark_plot
benchmark_plot <- ggplot(bench_dat_proc) +
aes(x = function_name, y = total_time, alpha = 0.5) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = .15, shape = 21, size = 3) +
theme_bw() +
labs(y = "total time (seconds)", x = "") +
coord_flip() +
theme(axis.text.x = element_text(size = 16, face = "plain", color = "black"),
axis.text.y = element_text(size = 16, face = "plain", color = "black"),
axis.title.x = element_text(size = 18, face = "bold", color = "black"),
axis.title.y = element_text(size = 18, face = "bold", color = "black"),
strip.text.x = element_text(size = 18, face = "bold", color = "black"),
strip.text.y = element_text(size = 18, face = "bold", color = "black"),
plot.title = element_text(size = 18, face = "bold", color = "black"),
legend.position = "none")
benchmark_plot
benchmark_plot <- ggplot(bench_dat_proc) +
aes(x = function_name, y = total_time) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = .15, shape = 21, size = 3) +
theme_bw() +
labs(y = "total time (seconds)", x = "") +
coord_flip() +
theme(axis.text.x = element_text(size = 16, face = "plain", color = "black"),
axis.text.y = element_text(size = 16, face = "plain", color = "black"),
axis.title.x = element_text(size = 18, face = "bold", color = "black"),
axis.title.y = element_text(size = 18, face = "bold", color = "black"),
strip.text.x = element_text(size = 18, face = "bold", color = "black"),
strip.text.y = element_text(size = 18, face = "bold", color = "black"),
plot.title = element_text(size = 18, face = "bold", color = "black"),
legend.position = "none")
benchmark_plot
bench_dat_proc <- bench_dat %>%
dplyr::mutate(function_name = ifelse(expression == "procPhotos1(photodir, joingeno_data1)", "grDevices::jpeg",
ifelse(expression == "procPhotos2(photodir, joingeno_data1)", "OpenImage::downsample",
ifelse(expression == "procPhotos3(photodir, joingeno_data1)", "OpenImageR::resizeImage",
ifelse(expression == "procPhotos4(photodir, joingeno_data1)", "imager::resize", "wtf?"))))) %>%
dplyr::group_by(function_name) %>%
dplyr::mutate(mean_time = median(total_time)) %>%
dplyr::arrange(mean_time) %>%
dplyr::ungroup() %>%
dplyr::mutate(function_name = factor(function_name, levels = unique(function_name)))
benchmark_plot <- ggplot(bench_dat_proc) +
aes(x = function_name, y = total_time) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = .15, shape = 21, size = 3) +
theme_bw() +
labs(y = "total time (seconds)", x = "") +
coord_flip() +
theme(axis.text.x = element_text(size = 16, face = "plain", color = "black"),
axis.text.y = element_text(size = 16, face = "plain", color = "black"),
axis.title.x = element_text(size = 18, face = "bold", color = "black"),
axis.title.y = element_text(size = 18, face = "bold", color = "black"),
strip.text.x = element_text(size = 18, face = "bold", color = "black"),
strip.text.y = element_text(size = 18, face = "bold", color = "black"),
plot.title = element_text(size = 18, face = "bold", color = "black"),
legend.position = "none")
benchmark_plot
benchmark_plot <- ggplot(bench_dat_proc) +
aes(x = function_name, y = total_time) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = .15, shape = 21, size = 3) +
theme_bw() +
labs(y = "total time (seconds)", x = "", title = "easyFulcrum::procPhotos benchmarking") +
coord_flip() +
theme(axis.text.x = element_text(size = 16, face = "plain", color = "black"),
axis.text.y = element_text(size = 16, face = "plain", color = "black"),
axis.title.x = element_text(size = 18, face = "bold", color = "black"),
axis.title.y = element_text(size = 18, face = "bold", color = "black"),
strip.text.x = element_text(size = 18, face = "bold", color = "black"),
strip.text.y = element_text(size = 18, face = "bold", color = "black"),
plot.title = element_text(size = 18, face = "bold", color = "black"),
legend.position = "none")
benchmark_plot
ggsave(benchmark_plot, "~/Desktop/procPhotos_benchmark.pdf", width = 7, height = 4)
ggsave(benchmark_plot, "~/Desktop/procPhotos_benchmark.pdf", width = 7, height = 4)
benchmark_plot
ggsave(benchmark_plot, "~/Desktop/procPhotos_benchmark.pdf", width = 7, height = 4)
ggsave('~/Desktop/procPhotos_benchmark.pdf', width = 7, height = 4)
ggsave('~/Desktop/procPhotos_benchmark.pdf', width = 8, height = 4)
benchmark_plot <- ggplot(bench_dat_proc) +
aes(x = function_name, y = total_time) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = .15, shape = 21, size = 3) +
labs(y = "total time (seconds)", x = "", title = "easyFulcrum::procPhotos benchmarking") +
coord_flip() +
theme_bw() +
theme(axis.text.x = element_text(size = 16, face = "plain", color = "black"),
axis.text.y = element_text(size = 16, face = "plain", color = "black"),
axis.title.x = element_text(size = 18, face = "bold", color = "black"),
axis.title.y = element_text(size = 18, face = "bold", color = "black"),
strip.text.x = element_text(size = 18, face = "bold", color = "black"),
strip.text.y = element_text(size = 18, face = "bold", color = "black"),
plot.title = element_text(size = 18, face = "bold", color = "black"),
legend.position = "none")
benchmark_plot
benchmark_plot <- ggplot(bench_dat_proc) +
aes(x = function_name, y = total_time) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = .15, shape = 21, size = 3) +
labs(y = "total time (seconds)", x = "", title = "easyFulcrum::procPhotos benchmarking") +
coord_flip(clip = "off") +
theme_bw() +
theme(axis.text.x = element_text(size = 16, face = "plain", color = "black"),
axis.text.y = element_text(size = 16, face = "plain", color = "black"),
axis.title.x = element_text(size = 18, face = "bold", color = "black"),
axis.title.y = element_text(size = 18, face = "bold", color = "black"),
strip.text.x = element_text(size = 18, face = "bold", color = "black"),
strip.text.y = element_text(size = 18, face = "bold", color = "black"),
plot.title = element_text(size = 18, face = "bold", color = "black"),
legend.position = "none")
benchmark_plot
benchmark_plot <- ggplot(bench_dat_proc) +
aes(x = function_name, y = total_time) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = .15, shape = 21, size = 3) +
labs(y = "total time (seconds)", x = "", title = "easyFulcrum::procPhotos benchmarking") +
coord_flip(expand = F) +
theme_bw() +
theme(axis.text.x = element_text(size = 16, face = "plain", color = "black"),
axis.text.y = element_text(size = 16, face = "plain", color = "black"),
axis.title.x = element_text(size = 18, face = "bold", color = "black"),
axis.title.y = element_text(size = 18, face = "bold", color = "black"),
strip.text.x = element_text(size = 18, face = "bold", color = "black"),
strip.text.y = element_text(size = 18, face = "bold", color = "black"),
plot.title = element_text(size = 18, face = "bold", color = "black"),
legend.position = "none")
benchmark_plot
benchmark_plot <- ggplot(bench_dat_proc) +
aes(x = function_name, y = total_time) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = .15, shape = 21, size = 3) +
labs(y = "total time (seconds)", x = "", title = "easyFulcrum::procPhotos benchmarking") +
coord_flip(expand = T) +
theme_bw() +
theme(axis.text.x = element_text(size = 16, face = "plain", color = "black"),
axis.text.y = element_text(size = 16, face = "plain", color = "black"),
axis.title.x = element_text(size = 18, face = "bold", color = "black"),
axis.title.y = element_text(size = 18, face = "bold", color = "black"),
strip.text.x = element_text(size = 18, face = "bold", color = "black"),
strip.text.y = element_text(size = 18, face = "bold", color = "black"),
plot.title = element_text(size = 18, face = "bold", color = "black"),
legend.position = "none")
benchmark_plot
benchmark_plot <- ggplot(bench_dat_proc) +
aes(x = function_name, y = total_time) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = .15, shape = 21, size = 3) +
labs(y = "total time (seconds)", x = "", title = "easyFulcrum::procPhotos benchmarking") +
coord_fixed(expand = F) +
theme_bw() +
theme(axis.text.x = element_text(size = 16, face = "plain", color = "black"),
axis.text.y = element_text(size = 16, face = "plain", color = "black"),
axis.title.x = element_text(size = 18, face = "bold", color = "black"),
axis.title.y = element_text(size = 18, face = "bold", color = "black"),
strip.text.x = element_text(size = 18, face = "bold", color = "black"),
strip.text.y = element_text(size = 18, face = "bold", color = "black"),
plot.title = element_text(size = 18, face = "bold", color = "black"),
legend.position = "none")
benchmark_plot
benchmark_plot <- ggplot(bench_dat_proc) +
aes(x = function_name, y = total_time) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = .15, shape = 21, size = 3) +
labs(y = "total time (seconds)", x = "", title = "easyFulcrum::procPhotos benchmarking") +
coord_flip() +
coord_fixed(expand = F) +
theme_bw() +
theme(axis.text.x = element_text(size = 16, face = "plain", color = "black"),
axis.text.y = element_text(size = 16, face = "plain", color = "black"),
axis.title.x = element_text(size = 18, face = "bold", color = "black"),
axis.title.y = element_text(size = 18, face = "bold", color = "black"),
strip.text.x = element_text(size = 18, face = "bold", color = "black"),
strip.text.y = element_text(size = 18, face = "bold", color = "black"),
plot.title = element_text(size = 18, face = "bold", color = "black"),
legend.position = "none")
benchmark_plot
benchmark_plot <- ggplot(bench_dat_proc) +
aes(x = function_name, y = total_time) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = .15, shape = 21, size = 3) +
labs(y = "total time (seconds)", x = "", title = "easyFulcrum::procPhotos benchmarking") +
coord_flip() +
theme_bw() +
theme(axis.text.x = element_text(size = 16, face = "plain", color = "black"),
axis.text.y = element_text(size = 16, face = "plain", color = "black"),
axis.title.x = element_text(size = 18, face = "bold", color = "black"),
axis.title.y = element_text(size = 18, face = "bold", color = "black"),
strip.text.x = element_text(size = 18, face = "bold", color = "black"),
strip.text.y = element_text(size = 18, face = "bold", color = "black"),
plot.title = element_text(size = 18, face = "bold", color = "black"),
legend.position = "none")
benchmark_plot
ggsave('~/Desktop/procPhotos_benchmark.pdf', width = 12, height = 5)
bench_dat_proc <- bench_dat %>%
dplyr::mutate(function_name = ifelse(expression == "procPhotos1(photodir, joingeno_data1)", "grDevices::jpeg",
ifelse(expression == "procPhotos2(photodir, joingeno_data1)", "OpenImageR::downsample",
ifelse(expression == "procPhotos3(photodir, joingeno_data1)", "OpenImageR::resizeImage",
ifelse(expression == "procPhotos4(photodir, joingeno_data1)", "imager::resize", "wtf?"))))) %>%
dplyr::group_by(function_name) %>%
dplyr::mutate(mean_time = median(total_time)) %>%
dplyr::arrange(mean_time) %>%
dplyr::ungroup() %>%
dplyr::mutate(function_name = factor(function_name, levels = unique(function_name)))
benchmark_plot <- ggplot(bench_dat_proc) +
aes(x = function_name, y = total_time) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = .15, shape = 21, size = 3) +
labs(y = "total time (seconds)", x = "", title = "easyFulcrum::procPhotos benchmarking") +
coord_flip() +
theme_bw() +
theme(axis.text.x = element_text(size = 16, face = "plain", color = "black"),
axis.text.y = element_text(size = 16, face = "plain", color = "black"),
axis.title.x = element_text(size = 18, face = "bold", color = "black"),
axis.title.y = element_text(size = 18, face = "bold", color = "black"),
strip.text.x = element_text(size = 18, face = "bold", color = "black"),
strip.text.y = element_text(size = 18, face = "bold", color = "black"),
plot.title = element_text(size = 18, face = "bold", color = "black"),
legend.position = "none")
benchmark_plot
ggsave('~/Desktop/procPhotos_benchmark.pdf', width = 12, height = 5)
# testing hash apply function
?hash_apply
########################################## func 4
procPhotos4 <- function(dir, data, percentage = -20) {
# Make message
message("Processing collection photos: This can take up to a minute to process 100 photos.")
# find file names for photos where nematodes with strain names were isolated
to_change <- data %>%
dplyr::filter(!is.na(ECA_name)) %>%
dplyr::mutate(orig_file_name = glue::glue("{dir}/{sample_photo}.jpg"),
new_file_name = glue::glue("{dir}/processed_photos/{ECA_name}_{c_label}.jpg"),
thumb_file_name = glue::glue("{dir}/processed_photos/{ECA_name}_{c_label}_thumbnail.jpg")) %>%
dplyr::select(ECA_name, species_id, c_label, orig_file_name, new_file_name, thumb_file_name)
# make processed subdirectory in dir
fs::dir_create(glue::glue("{dir}/processed_photos"))
# copy files to new directory and rename
fs::file_copy(to_change$orig_file_name, to_change$new_file_name, overwrite = F)
# loop through renamed images to make thumbnails
for(i in unique(to_change$new_file_name)) {
# setup image in R
img <- imager::load.image(i)
# get img dimensions
h<-dim(img)[1] # image height
w<-dim(img)[2] # image width
# resize to make thumbnail
thumb <- imager::resize(img, percentage, percentage)
# write the file
imager::save.image(thumb, file = glue::glue("{to_change %>% dplyr::filter(new_file_name == i) %>% dplyr::pull(thumb_file_name)}"))
}
# make a checksum for integrity
tools::md5sum(dir_ls(glue::glue("{dir}/processed_photos")))
}
# testing md5sum function
procPhotos4(photodir, joingeno_data1)
# make a checksum for integrity
tools::md5sum(fs::dir_ls(glue::glue("{dir}/processed_photos")))
########################################## func 4
procPhotos4 <- function(dir, data, percentage = -20) {
# Make message
message("Processing collection photos: This can take up to a minute to process 100 photos.")
# find file names for photos where nematodes with strain names were isolated
to_change <- data %>%
dplyr::filter(!is.na(ECA_name)) %>%
dplyr::mutate(orig_file_name = glue::glue("{dir}/{sample_photo}.jpg"),
new_file_name = glue::glue("{dir}/processed_photos/{ECA_name}_{c_label}.jpg"),
thumb_file_name = glue::glue("{dir}/processed_photos/{ECA_name}_{c_label}_thumbnail.jpg")) %>%
dplyr::select(ECA_name, species_id, c_label, orig_file_name, new_file_name, thumb_file_name)
# make processed subdirectory in dir
fs::dir_create(glue::glue("{dir}/processed_photos"))
# copy files to new directory and rename
fs::file_copy(to_change$orig_file_name, to_change$new_file_name, overwrite = F)
# loop through renamed images to make thumbnails
for(i in unique(to_change$new_file_name)) {
# setup image in R
img <- imager::load.image(i)
# get img dimensions
h<-dim(img)[1] # image height
w<-dim(img)[2] # image width
# resize to make thumbnail
thumb <- imager::resize(img, percentage, percentage)
# write the file
imager::save.image(thumb, file = glue::glue("{to_change %>% dplyr::filter(new_file_name == i) %>% dplyr::pull(thumb_file_name)}"))
}
# make a checksum for integrity
tools::md5sum(fs::dir_ls(glue::glue("{dir}/processed_photos")))
}
fs::dir_ls(glue::glue("{dir}/processed_photos"))
########################################## func 4
procPhotos4 <- function(dir, data, percentage = -20) {
# Make message
message("Processing collection photos: This can take up to a minute to process 100 photos.")
# find file names for photos where nematodes with strain names were isolated
to_change <- data %>%
dplyr::filter(!is.na(ECA_name)) %>%
dplyr::mutate(orig_file_name = glue::glue("{dir}/{sample_photo}.jpg"),
new_file_name = glue::glue("{dir}/processed_photos/{ECA_name}_{c_label}.jpg"),
thumb_file_name = glue::glue("{dir}/processed_photos/{ECA_name}_{c_label}_thumbnail.jpg")) %>%
dplyr::select(ECA_name, species_id, c_label, orig_file_name, new_file_name, thumb_file_name)
# make processed subdirectory in dir
fs::dir_create(glue::glue("{dir}/processed_photos"))
# copy files to new directory and rename
fs::file_copy(to_change$orig_file_name, to_change$new_file_name, overwrite = F)
# loop through renamed images to make thumbnails
for(i in unique(to_change$new_file_name)) {
# setup image in R
img <- imager::load.image(i)
# get img dimensions
h<-dim(img)[1] # image height
w<-dim(img)[2] # image width
# resize to make thumbnail
thumb <- imager::resize(img, percentage, percentage)
# write the file
imager::save.image(thumb, file = glue::glue("{to_change %>% dplyr::filter(new_file_name == i) %>% dplyr::pull(thumb_file_name)}"))
}
# make a checksum for integrity
tools::md5sum(fs::dir_ls(glue::glue("{dir}/processed_photos")))
}
# testing md5sum function
procPhotos4(photodir, joingeno_data1)
