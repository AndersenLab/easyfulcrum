dplyr::mutate(species_count = n()) %>%
dplyr::mutate(`C. elegans count` = ifelse(species_id == "Caenorhabditis elegans" & !is.na(species_id), species_count, 0),
`C. briggsae count` = ifelse(species_id == "Caenorhabditis briggsae" & !is.na(species_id), species_count, 0),
`C. tropicalis count` = ifelse(species_id == "Caenorhabditis tropicalis" & !is.na(species_id), species_count, 0)) %>%
dplyr::ungroup() %>%
dplyr::distinct(c_label, species_id, .keep_all =T) %>%
dplyr::arrange(c_label, desc(species_count)) %>%
dplyr::group_by(c_label) %>%
dplyr::mutate(`C. elegans count` = sum(`C. elegans count`),
`C. briggsae count` = sum(`C. briggsae count`),
`C. tropicalis count` = sum(`C. tropicalis count`)) %>%
dplyr::ungroup() %>%
dplyr::filter(species_id == "Caenorhabditis briggsae") %>%
dplyr::distinct(c_label, .keep_all =T) %>%
dplyr::mutate(color = case_when(species_id == "Caenorhabditis elegans" ~ "red",
species_id == "Caenorhabditis briggsae" ~ "blue",
species_id == "Caenorhabditis tropicalis" ~ "orange")) %>%
dplyr::mutate(pub_url = NA)
target_map <-  map_target_species(target_df,"color")
target_map
briggsae_df <- df %>% dplyr::filter(species_id == "Caenorhabditis briggsae") %>%
dplyr::select(c_label,s_label,proc_ambient_temperature,ambient_humidity,
proc_substrate_temperature,collection_altitude, substrate,
landscape, collection_by, collection_location, collection_island,
collection_trail)
DT::datatable(briggsae_df, rownames = FALSE, filter = "none", options = list(dom = 'ftrp',scrollX = '200px'))
stat_df <- df%>%
dplyr::filter(species_id == "Caenorhabditis briggsae") %>%
dplyr::distinct(project, c_label, species_id, .keep_all = T) %>%
dplyr::select(project, c_label, s_label, species_id, proc_ambient_temperature,
ambient_humidity, proc_substrate_temperature, collection_altitude) %>%
dplyr::mutate(species_id = forcats::as_factor(species_id),
species_id = forcats::fct_relevel(species_id,
"Caenorhabditis elegans",
"Caenorhabditis tropicalis",
"Caenorhabditis briggsae")) %>%
tidyr::gather(env_par, value, proc_ambient_temperature,ambient_humidity,
proc_substrate_temperature, collection_altitude)
plot_atemp <- ggplot(data = stat_df %>% dplyr::filter(env_par == "proc_ambient_temperature")) +
geom_boxplot(aes(x = species_id, y = value, fill = species_id), outlier.color = NA) +
scale_fill_manual(values=c("red","blue","orange")) +
geom_jitter(aes(x = species_id, y = value, shape = project), size = 1.5, width = .25) +
theme_bw() +
theme(axis.title = element_text(size = 8, color = "black"),
axis.text = element_text(size = 8, color = "black")) +
labs(fill = "Species", x = "", y = "Ambient temperature (째C)") +
theme(axis.text.x = element_text(size = 9, face = "italic", color = "black"),
axis.text.y = element_text(size = 9, face = "plain", color = "black"),
axis.title.x = element_text(size = 9, face = "bold", color = "black"),
axis.title.y = element_text(size = 9, face = "bold", color = "black"),
plot.margin = unit(c(0,1,1,1), "lines"),
legend.position = "none")
plot_stemp <- ggplot(data = stat_df %>% dplyr::filter(env_par == "proc_substrate_temperature")) +
geom_boxplot(aes(x = species_id, y = value, fill = species_id), outlier.color = NA) +
scale_fill_manual(values=c("red","blue","orange")) +
geom_jitter(aes(x = species_id, y = value, shape = project), size = 1.5, width = .25) +
theme_bw() +
theme(axis.title = element_text(size = 8, color = "black"),
axis.text = element_text(size = 8, color = "black")) +
labs(fill = "Species", x = "", y = "Substrate temperature (째C)") +
theme(axis.text.x = element_text(size = 9, face = "italic", color = "black"),
axis.text.y = element_text(size = 9, face = "plain", color = "black"),
axis.title.x = element_text(size = 9, face = "bold", color = "black"),
axis.title.y = element_text(size = 9, face = "bold", color = "black"),
plot.margin = unit(c(0,1,1,1), "lines"),
legend.position = "none")
plot_ahum <- ggplot(data = stat_df %>% dplyr::filter(env_par == "ambient_humidity")) +
geom_boxplot(aes(x = species_id, y = value, fill = species_id), outlier.color = NA) +
scale_fill_manual(values=c("red","blue","orange")) +
geom_jitter(aes(x = species_id, y = value, shape = project), size = 1.5, width = .25) +
theme_bw() +
theme(axis.title = element_text(size = 8, color = "black"),
axis.text = element_text(size = 8, color = "black")) +
labs(fill = "Species", x = "", y = "Ambient humidity (%)") +
theme(axis.text.x = element_text(size = 9, face = "italic", color = "black"),
axis.text.y = element_text(size = 9, face = "plain", color = "black"),
axis.title.x = element_text(size = 9, face = "bold", color = "black"),
axis.title.y = element_text(size = 9, face = "bold", color = "black"),
plot.margin = unit(c(0,1,1,1), "lines"),
legend.position = "none")
plot_elev <- ggplot(data = stat_df %>% dplyr::filter(env_par == "collection_altitude")) +
geom_boxplot(aes(x = species_id, y = value, fill = species_id), outlier.color = NA) +
scale_fill_manual(values=c("red","blue","orange")) +
geom_jitter(aes(x = species_id, y = value, shape = project), size = 1.5, width = .25) +
theme_bw() +
theme(axis.title = element_text(size = 8, color = "black"),
axis.text = element_text(size = 8, color = "black")) +
labs(fill = "Species", x = "", y = "Elevation (m)") +
theme(axis.text.x = element_text(size = 9, face = "italic", color = "black"),
axis.text.y = element_text(size = 9, face = "plain", color = "black"),
axis.title.x = element_text(size = 9, face = "bold", color = "black"),
axis.title.y = element_text(size = 9, face = "bold", color = "black"),
plot.margin = unit(c(0,1,1,1), "lines"),
legend.position = "none")
cowplot::plot_grid(plot_atemp, plot_stemp, plot_ahum, plot_elev,
ncol = 2, nrow = 2, align = "hv", axis = "l")
tropicalis_eval <- ifelse(df %>%
dplyr::filter(species_id == "Caenorhabditis tropicalis") %>%
dplyr::pull(c_label) %>% length()==0,
FALSE,TRUE)
if(tropicalis_eval == FALSE) {
warning("No collections in this project isolated C. tropicalis samples")
}
target_df <- df %>%
dplyr::group_by(c_label, species_id) %>%
dplyr::mutate(species_count = n()) %>%
dplyr::mutate(`C. elegans count` = ifelse(species_id == "Caenorhabditis elegans" & !is.na(species_id), species_count, 0),
`C. briggsae count` = ifelse(species_id == "Caenorhabditis briggsae" & !is.na(species_id), species_count, 0),
`C. tropicalis count` = ifelse(species_id == "Caenorhabditis tropicalis" & !is.na(species_id), species_count, 0)) %>%
dplyr::ungroup() %>%
dplyr::distinct(c_label, species_id, .keep_all =T) %>%
dplyr::arrange(c_label, desc(species_count)) %>%
dplyr::group_by(c_label) %>%
dplyr::mutate(`C. elegans count` = sum(`C. elegans count`),
`C. briggsae count` = sum(`C. briggsae count`),
`C. tropicalis count` = sum(`C. tropicalis count`)) %>%
dplyr::ungroup() %>%
dplyr::filter(species_id == "Caenorhabditis tropicalis") %>%
dplyr::distinct(c_label, .keep_all =T) %>%
dplyr::mutate(color = case_when(species_id == "Caenorhabditis elegans" ~ "red",
species_id == "Caenorhabditis briggsae" ~ "blue",
species_id == "Caenorhabditis tropicalis" ~ "orange")) %>%
dplyr::mutate(pub_url = NA)
target_map <-  map_target_species(target_df,"color")
target_map
tropicalis_df <- df %>% dplyr::filter(species_id == "Caenorhabditis tropicalis") %>%
dplyr::select(c_label,s_label,proc_ambient_temperature,ambient_humidity,
proc_substrate_temperature,collection_altitude, substrate,
landscape, collection_by, collection_location, collection_island,
collection_trail)
DT::datatable(tropicalis_df, rownames = FALSE, filter = "none", options = list(dom = 'ftrp',scrollX = '200px'))
stat_df <- df%>%
dplyr::filter(species_id == "Caenorhabditis tropicalis") %>%
dplyr::distinct(project, c_label, species_id, .keep_all = T) %>%
dplyr::select(project, c_label, s_label, species_id, proc_ambient_temperature,
ambient_humidity, proc_substrate_temperature, collection_altitude) %>%
dplyr::mutate(species_id = forcats::as_factor(species_id),
species_id = forcats::fct_relevel(species_id,
"Caenorhabditis elegans",
"Caenorhabditis tropicalis",
"Caenorhabditis briggsae")) %>%
tidyr::gather(env_par, value, proc_ambient_temperature,ambient_humidity,
proc_substrate_temperature, collection_altitude)
plot_atemp <- ggplot(data = stat_df %>% dplyr::filter(env_par == "proc_ambient_temperature")) +
geom_boxplot(aes(x = species_id, y = value, fill = species_id), outlier.color = NA) +
scale_fill_manual(values=c("red","blue","orange")) +
geom_jitter(aes(x = species_id, y = value, shape = project), size = 1.5, width = .25) +
theme_bw() +
theme(axis.title = element_text(size = 8, color = "black"),
axis.text = element_text(size = 8, color = "black")) +
labs(fill = "Species", x = "", y = "Ambient temperature (째C)") +
theme(axis.text.x = element_text(size = 9, face = "italic", color = "black"),
axis.text.y = element_text(size = 9, face = "plain", color = "black"),
axis.title.x = element_text(size = 9, face = "bold", color = "black"),
axis.title.y = element_text(size = 9, face = "bold", color = "black"),
plot.margin = unit(c(0,1,1,1), "lines"),
legend.position = "none")
plot_stemp <- ggplot(data = stat_df %>% dplyr::filter(env_par == "proc_substrate_temperature")) +
geom_boxplot(aes(x = species_id, y = value, fill = species_id), outlier.color = NA) +
scale_fill_manual(values=c("red","blue","orange")) +
geom_jitter(aes(x = species_id, y = value, shape = project), size = 1.5, width = .25) +
theme_bw() +
theme(axis.title = element_text(size = 8, color = "black"),
axis.text = element_text(size = 8, color = "black")) +
labs(fill = "Species", x = "", y = "Substrate temperature (째C)") +
theme(axis.text.x = element_text(size = 9, face = "italic", color = "black"),
axis.text.y = element_text(size = 9, face = "plain", color = "black"),
axis.title.x = element_text(size = 9, face = "bold", color = "black"),
axis.title.y = element_text(size = 9, face = "bold", color = "black"),
plot.margin = unit(c(0,1,1,1), "lines"),
legend.position = "none")
plot_ahum <- ggplot(data = stat_df %>% dplyr::filter(env_par == "ambient_humidity")) +
geom_boxplot(aes(x = species_id, y = value, fill = species_id), outlier.color = NA) +
scale_fill_manual(values=c("red","blue","orange")) +
geom_jitter(aes(x = species_id, y = value, shape = project), size = 1.5, width = .25) +
theme_bw() +
theme(axis.title = element_text(size = 8, color = "black"),
axis.text = element_text(size = 8, color = "black")) +
labs(fill = "Species", x = "", y = "Ambient humidity (%)") +
theme(axis.text.x = element_text(size = 9, face = "italic", color = "black"),
axis.text.y = element_text(size = 9, face = "plain", color = "black"),
axis.title.x = element_text(size = 9, face = "bold", color = "black"),
axis.title.y = element_text(size = 9, face = "bold", color = "black"),
plot.margin = unit(c(0,1,1,1), "lines"),
legend.position = "none")
plot_elev <- ggplot(data = stat_df %>% dplyr::filter(env_par == "collection_altitude")) +
geom_boxplot(aes(x = species_id, y = value, fill = species_id), outlier.color = NA) +
scale_fill_manual(values=c("red","blue","orange")) +
geom_jitter(aes(x = species_id, y = value, shape = project), size = 1.5, width = .25) +
theme_bw() +
theme(axis.title = element_text(size = 8, color = "black"),
axis.text = element_text(size = 8, color = "black")) +
labs(fill = "Species", x = "", y = "Elevation (m)") +
theme(axis.text.x = element_text(size = 9, face = "italic", color = "black"),
axis.text.y = element_text(size = 9, face = "plain", color = "black"),
axis.title.x = element_text(size = 9, face = "bold", color = "black"),
axis.title.y = element_text(size = 9, face = "bold", color = "black"),
plot.margin = unit(c(0,1,1,1), "lines"),
legend.position = "none")
cowplot::plot_grid(plot_atemp, plot_stemp, plot_ahum, plot_elev,
ncol = 2, nrow = 2, align = "hv", axis = "l")
usethis::use_package("dplyr")
usethis::use_package("geosphere")
usethis::use_package("runner")
devtools::document()
devtools::document()
tools::buildVignettes(dir = ".", tangle=TRUE)
library(easyfulcrum)
tools::buildVignettes(dir = ".", tangle=TRUE)
library(tibble)
usethis::use_package("tibble")
sp::Polygons()
usethis::use_package("sp")
usethis::use_package("stringr")
usethis::use_package("lubridate")
usethis::use_package("fs")
?usethis
usethis::use_package("cowplot")
usethis::use_package("leaflet")
usethis::use_package("DT")
devtools::document()
library(easyfulcrum)
devtools::document()
tools::buildVignettes(dir = ".", tangle=TRUE)
# install.packages("devtools")
# devtools::install_github("AndersenLab/easyfulcrum")
library(easyfulcrum)
setwd("~/Desktop")
anno_fulc1 <- annotateFulcrum(data = join_fulc1, dir = NULL)
join_fulc1
View(join_fulc1)
location
easyfulcrum::location
easyfulcrum::island
load("/Users/matteodibernardo/Desktop/Andersen/git/easyfulcrum/data/location.rda")
location
View(location)
easyfulcrum::location
library(easyfulcrum)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# install.packages("devtools")
# devtools::install_github("AndersenLab/easyfulcrum")
library(easyfulcrum)
setwd("~/Desktop")
makeDirStructure(startdir = "~/Desktop/",
projectdirname = "2020JanuaryHawaii")
dir1 <- "~/Desktop/2020JanuaryHawaii"
# raw_fulc1 <- readFulcrum(dir = dir1)
names(easyfulcrum::raw_fulc1)
proc_fulc1 <- procFulcrum(data = raw_fulc1)
flag1.1 <- checkTemperatures(data = proc_fulc1, return_flags = TRUE)
proc_fulc1_clean <- fixTemperatures(data = proc_fulc1,
substrate_temperature_ids = "a7db618d-44cc-4b4a-bc67-871306029274",
ambient_temperature_ids = "b1f20ae4-c5c2-426f-894a-e1f46c2fa693",
ambient_temperature_run_ids=c("dda77efe-d73c-48e9-aefb-b508e613256b",
"93de14a0-40ab-4793-8614-ab1512ab158c"))
join_fulc1 <- joinFulcrum(data = proc_fulc1)
flag1.2 <- checkJoin(data = join_fulc1, return_flags = TRUE)
anno_fulc1 <- annotateFulcrum(data = join_fulc1, dir = NULL)
devtools::document()
rm(list = c("location"))
devtools::document()
library(easyfulcrum)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# install.packages("devtools")
# devtools::install_github("AndersenLab/easyfulcrum")
library(easyfulcrum)
setwd("~/Desktop")
makeDirStructure(startdir = "~/Desktop/",
projectdirname = "2020JanuaryHawaii")
dir1 <- "~/Desktop/2020JanuaryHawaii"
# raw_fulc1 <- readFulcrum(dir = dir1)
names(easyfulcrum::raw_fulc1)
proc_fulc1 <- procFulcrum(data = raw_fulc1)
flag1.1 <- checkTemperatures(data = proc_fulc1, return_flags = TRUE)
proc_fulc1_clean <- fixTemperatures(data = proc_fulc1,
substrate_temperature_ids = "a7db618d-44cc-4b4a-bc67-871306029274",
ambient_temperature_ids = "b1f20ae4-c5c2-426f-894a-e1f46c2fa693",
ambient_temperature_run_ids=c("dda77efe-d73c-48e9-aefb-b508e613256b",
"93de14a0-40ab-4793-8614-ab1512ab158c"))
join_fulc1 <- joinFulcrum(data = proc_fulc1)
flag1.2 <- checkJoin(data = join_fulc1, return_flags = TRUE)
anno_fulc1 <- annotateFulcrum(data = join_fulc1, dir = NULL)
locations
library(easyfulcrum)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# install.packages("devtools")
# devtools::install_github("AndersenLab/easyfulcrum")
library(easyfulcrum)
setwd("~/Desktop")
makeDirStructure(startdir = "~/Desktop/",
projectdirname = "2020JanuaryHawaii")
dir1 <- "~/Desktop/2020JanuaryHawaii"
# raw_fulc1 <- readFulcrum(dir = dir1)
names(easyfulcrum::raw_fulc1)
proc_fulc1 <- procFulcrum(data = raw_fulc1)
flag1.1 <- checkTemperatures(data = proc_fulc1, return_flags = TRUE)
proc_fulc1_clean <- fixTemperatures(data = proc_fulc1,
substrate_temperature_ids = "a7db618d-44cc-4b4a-bc67-871306029274",
ambient_temperature_ids = "b1f20ae4-c5c2-426f-894a-e1f46c2fa693",
ambient_temperature_run_ids=c("dda77efe-d73c-48e9-aefb-b508e613256b",
"93de14a0-40ab-4793-8614-ab1512ab158c"))
join_fulc1 <- joinFulcrum(data = proc_fulc1)
flag1.2 <- checkJoin(data = join_fulc1, return_flags = TRUE)
anno_fulc1 <- annotateFulcrum(data = join_fulc1, dir = NULL)
devtools::document()
#' annotateFulcrum
#'
#' \code{annotateFulcrum} Adds additional collection location information to the final Fulcrum dataframe
#'
#' @param data A single dataframe generated with the joinFulcrum function.
#' @param dir The path to the base fulcrum directory, dir/data/raw/fulcrum should contain:
#' island.csv,
#' location.csv,
#' trails.csv
#'
#' @return A single dataframe containing all Fulcrum data sources.
#' This data frame contains all necessary variables from Fulcrum. It also contains data quality flags.
#' The variable names match the data dictionary.
#' @importFrom glue glue
#' @import tibble
#' @import dplyr
#' @import sp
#' @export
#'
annotateFulcrum <- function(data, dir = NULL) {
# import island csv
island <- easyfulcrum::islands
# import location csv
location <- easyfulcrum::locations
# Generate list of trails and geojson polygon points from geojson output of https://boundingbox.klokantech.com/.
# These polygons are manually curated by using the polygon tool.
# import trails csv
trails_df <- easyfulcrum::trails
if(!is.null(dir)){
dir <- glue::glue("{dir}","/data/raw/annotate")
message(">>> Checking for homemade island.csv, location.csv, trails.csv files in data/raw/annotate")
island <- read.csv(glue::glue("{dir}","/island.csv"))
location <- read.csv(glue::glue("{dir}","/location.csv"))
trails_df <- read.csv(glue::glue("{dir}","/trails.csv"))
}
# assign data to joined_data
joined_data <- data
# Create Island Column
joined_data$collection_island <- NA_character_
# Loop through imported island longitude and latitudes to assign values to Island Column
for (i in 1:nrow(island)){
joined_data[filter_box(joined_data$collection_longitude, joined_data$collection_latitude, c(island$long_start[i], island$lat_start[i], island$long_end[i], island$lat_end[i])), "collection_island"] <- island$island_name[i]
}
# Create location Column
joined_data$collection_location <- NA_character_
for (i in 1:nrow(location)){
joined_data[filter_box(joined_data$collection_longitude, joined_data$collection_latitude, c(location$long_start[i], location$lat_start[i], location$long_end[i], location$lat_end[i])), "collection_location"] <- location$location_name[i]
}
trails <- as.list(trails_df$coordinates)
names(trails) <- trails_df$trail_name
# Make dataframe with trail specific polygon points
trail_coordinates <- NULL
for(i in 1:length(trails)){
longs <- tibble::as_tibble(stringr::str_match_all(trails,  "(?<=\\[).+?(?=,)")[[i]], .name_repair = ~ vctrs::vec_as_names(..., repair = "unique", quiet = TRUE)) %>%
dplyr::rename(longitudes = `...1`) %>%
dplyr::mutate(longitudes = as.numeric(longitudes))
lats <- tibble::as_tibble(stringr::str_match_all(trails,  "(?<=[0-9],).+?(?=\\])")[[i]], .name_repair = ~ vctrs::vec_as_names(..., repair = "unique", quiet = TRUE)) %>%
dplyr::rename(latitudes = `...1`) %>%
dplyr::mutate(latitudes = as.numeric(latitudes))
long_lats <- dplyr::bind_cols(longs, lats) %>%
dplyr::mutate(trail = names(trails)[i])
trail_coordinates <- rbind(trail_coordinates, long_lats)
}
# Create trail polygon object from trail_coordinates dataframe
trail_polygons_list <-  vector('list', length = length(trails))
for(i in 1:length(trail_polygons_list)){
trail_polygons_list[[i]] = sp::Polygons(list(sp::Polygon(cbind(trail_coordinates %>% dplyr::filter(trail == glue::glue("{list(unique(trail_coordinates$trail))[[1]][i]}")) %>% .$longitudes,
trail_coordinates %>% dplyr::filter(trail == glue::glue("{list(unique(trail_coordinates$trail))[[1]][i]}")) %>% .$latitudes))),
ID = glue::glue("{list(unique(trail_coordinates$trail))[[1]][i]}"))
}
trail_polygons <- sp::SpatialPolygons(trail_polygons_list)
# find if collection locations fall within trail polygons
pts <- sp::SpatialPoints(cbind(joined_data %>% dplyr::filter(!is.na(collection_longitude)) %>% .$collection_longitude,
joined_data %>% dplyr::filter(!is.na(collection_latitude)) %>% .$collection_latitude))
# bind trails
fulc_data <- cbind(unname(sp::over(pts, trail_polygons)), joined_data %>%
dplyr::filter(!is.na(collection_longitude) & !is.na(collection_latitude))) %>%
dplyr::rename(collection_trail = 1) %>%
dplyr::rowwise() %>%
dplyr::mutate(collection_trail = glue::glue("{list(unique(trail_coordinates$trail))[[1]][{collection_trail}]}")) %>%
dplyr::ungroup() %>%
dplyr::mutate(collection_trail = ifelse(collection_trail == "NA", NA_character_, collection_trail)) %>% # fix NAs
dplyr::full_join(joined_data) %>% # add back joined_data with NAs for complete collection
dplyr::select(project,
c_label,
s_label,
flag_ambient_temperature,
flag_ambient_temperature_extreme,
flag_ambient_temperature_run,
flag_substrate_temperature,
flag_substrate_temperature_extreme,
flag_unusual_sample_photo_num,
flag_duplicated_c_label_field_sampling,
flag_duplicated_isolation_for_c_label,
flag_duplicated_s_label_isolation_s_labeled_plates,
flag_missing_s_label_isolation_s_labeled_plates,
flag_missing_isolation_record,
collection_by,
collection_datetime_UTC,
collection_date_UTC,
collection_local_time,
collection_fulcrum_latitude,
collection_fulcrum_longitude,
exif_gps_latitude,
exif_gps_longitude,
collection_latitude,
collection_longitude,
collection_lat_long_method,
collection_lat_long_method_diff,
fulcrum_altitude,
exif_gps_altitude,
collection_altitude,
collection_altitude_method,
collection_location,
collection_island,
collection_trail,
flag_collection_altitude_extreme,
landscape,
sky_view,
ambient_humidity,
substrate,
substrate_notes,
substrate_other,
raw_ambient_temperature,
proc_ambient_temperature,
raw_substrate_temperature,
proc_substrate_temperature,
gridsect,
gridsect_index,
gridsect_radius,
grid_sect_direction,
sample_photo1,
sample_photo2,
sample_photo3,
best_exif_dop_photo,
best_sample_photo_caption,
gps_course,
gps_horizontal_accuracy,
gps_speed,
gps_vertical_accuracy,
isolation_by,
isolation_datetime_UTC,
isolation_date_UTC,
isolation_local_time,
isolation_latitude,
isolation_longitude,
worms_on_sample,
approximate_number_of_worms)
# return data
return(fulc_data)
}
anno_fulc1 <- annotateFulcrum(data = join_fulc1, dir = NULL)
devtools::check()
devtools::check()
library(easyfulcrum)
anno_fulc1 <- annotateFulcrum(data = join_fulc1, dir = NULL)
library(easyfulcrum)
easyfulcrum::island
island
islands
hawaii_islands <- island
devtools::use_data(hawaii_islands, overwrite = TRUE)
usethis::use_data(hawaii_islands, overwrite = TRUE)
location
hawaii_locations <- location
usethis::use_data(hawaii_locations, overwrite = TRUE)
trails
hawaii_trails <- trails
usethis::use_data(hawaii_trails, overwrite = TRUE)
library(easyfulcrum)
devtools::check()
devtools::check()
tools::buildVignettes(dir = ".", tangle=TRUE)
dir.create("inst/doc")
file.copy(dir("vignettes", full.names=TRUE), "inst/doc", overwrite=TRUE)
devtools::install_github("AndersenLab/easyfulcrum", ref = "revert-final_data1", force = TRUE, build_vignettes=TRUE)
library(easyfulcrum)
browseVignettes(package = "easyfulcrum")
devtools::install("AndersenLab/easyfulcrum", ref = "revert-final_data1", force = TRUE, build_vignettes=TRUE)
_github
devtools::install_github("AndersenLab/easyfulcrum", ref = "revert-final_data1", force = TRUE, build_vignettes=TRUE)
browseVignettes(package = "easyfulcrum")
devtools::use_vignette()
file.copy(dir("vignettes", full.names=TRUE), "inst/doc", overwrite=TRUE)
browseVignettes()
tools::buildVignettes(dir = ".", tangle=TRUE)
dir.create("inst/doc")
getwd()
devtools::buildvignettes(dir = ".", tangle=TRUE)
devtools::build_vignettes(dir = "inst/doc", tangle=TRUE)
devtools::build_vignettes()
?devtools::build_vignettes()
devtools::build_vignettes()
devtools::install_github("AndersenLab/easyfulcrum", ref = "revert-final_data1", force = TRUE, build_vignettes=TRUE)
library(easyfulcrum)
browseVignettes(package = "easyfulcrum")
browseVignettes(package = "easyfulcrum")
